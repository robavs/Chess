(()=>{"use strict";var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};function e(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(u){return function(c){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,u[0]&&(s=0)),s;)try{if(n=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return s.label++,{value:u[1],done:!1};case 5:s.label++,r=u[1],u=[0];continue;case 7:u=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){s=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){s.label=u[1];break}if(6===u[0]&&s.label<o[1]){s.label=o[1],o=u;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(u);break}o[2]&&s.ops.pop(),s.trys.pop();continue}u=e.call(t,s)}catch(t){u=[6,t],r=0}finally{n=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}}function r(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s}function i(t,e,n){if(n||2===arguments.length)for(var r,o=0,i=e.length;o<i;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))}function s(t){return this instanceof s?(this.v=t,this):new s(t)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var u=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function c(t){return"function"==typeof t}function a(t){return c(null==t?void 0:t.then)}function l(t){var e=t((function(t){Error.call(t),t.stack=(new Error).stack}));return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}var f=l((function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}));function h(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var p=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}var e;return t.prototype.unsubscribe=function(){var t,e,n,s,u;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var l=r(a),h=l.next();!h.done;h=l.next())h.value.remove(this)}catch(e){t={error:e}}finally{try{h&&!h.done&&(e=l.return)&&e.call(l)}finally{if(t)throw t.error}}else a.remove(this);var p=this.initialTeardown;if(c(p))try{p()}catch(t){u=t instanceof f?t.errors:[t]}var d=this._finalizers;if(d){this._finalizers=null;try{for(var v=r(d),b=v.next();!b.done;b=v.next()){var w=b.value;try{y(w)}catch(t){u=null!=u?u:[],t instanceof f?u=i(i([],o(u)),o(t.errors)):u.push(t)}}}catch(t){n={error:t}}finally{try{b&&!b.done&&(s=v.return)&&s.call(v)}finally{if(n)throw n.error}}}if(u)throw new f(u)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)y(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&h(e,t)},t.prototype.remove=function(e){var n=this._finalizers;n&&h(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t}(),d=p.EMPTY;function v(t){return t instanceof p||t&&"closed"in t&&c(t.remove)&&c(t.add)&&c(t.unsubscribe)}function y(t){c(t)?t():t.unsubscribe()}var b={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},w={setTimeout:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var s=w.delegate;return(null==s?void 0:s.setTimeout)?s.setTimeout.apply(s,i([t,e],o(n))):setTimeout.apply(void 0,i([t,e],o(n)))},clearTimeout:function(t){var e=w.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function m(t){w.setTimeout((function(){var e=b.onUnhandledError;if(!e)throw t;e(t)}))}function g(){}var E=x("C",void 0,void 0);function x(t,e,n){return{kind:t,value:e,error:n}}var T=null;function S(t){if(b.useDeprecatedSynchronousErrorHandling){var e=!T;if(e&&(T={errorThrown:!1,error:null}),t(),e){var n=T,r=n.errorThrown,o=n.error;if(T=null,r)throw o}}else t()}var C=function(t){function n(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,v(e)&&e.add(n)):n.destination=L,n}return e(n,t),n.create=function(t,e,n){return new I(t,e,n)},n.prototype.next=function(t){this.isStopped?W(function(t){return x("N",t,void 0)}(t),this):this._next(t)},n.prototype.error=function(t){this.isStopped?W(x("E",void 0,t),this):(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped?W(E,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(p),_=Function.prototype.bind;function k(t,e){return _.call(t,e)}var A=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var e=this.partialObserver;if(e.next)try{e.next(t)}catch(t){P(t)}},t.prototype.error=function(t){var e=this.partialObserver;if(e.error)try{e.error(t)}catch(t){P(t)}else P(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){P(t)}},t}(),I=function(t){function n(e,n,r){var o,i,s=t.call(this)||this;return c(e)||!e?o={next:null!=e?e:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:s&&b.useDeprecatedNextContext?((i=Object.create(e)).unsubscribe=function(){return s.unsubscribe()},o={next:e.next&&k(e.next,i),error:e.error&&k(e.error,i),complete:e.complete&&k(e.complete,i)}):o=e,s.destination=new A(o),s}return e(n,t),n}(C);function P(t){var e;b.useDeprecatedSynchronousErrorHandling?(e=t,b.useDeprecatedSynchronousErrorHandling&&T&&(T.errorThrown=!0,T.error=e)):m(t)}function W(t,e){var n=b.onStoppedNotification;n&&w.setTimeout((function(){return n(t,e)}))}var L={closed:!0,next:g,error:function(t){throw t},complete:g},H="function"==typeof Symbol&&Symbol.observable||"@@observable";function O(t){return t}var M=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r,o=this,i=(r=t)&&r instanceof C||function(t){return t&&c(t.next)&&c(t.error)&&c(t.complete)}(r)&&v(r)?t:new I(t,e,n);return S((function(){var t=o,e=t.operator,n=t.source;i.add(e?e.call(i,n):n?o._subscribe(i):o._trySubscribe(i))})),i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=K(e))((function(e,r){var o=new I({next:function(e){try{t(e)}catch(t){r(t),o.unsubscribe()}},error:r,complete:e});n.subscribe(o)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[H]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return(0===(n=t).length?O:1===n.length?n[0]:function(t){return n.reduce((function(t,e){return e(t)}),t)})(this);var n},t.prototype.toPromise=function(t){var e=this;return new(t=K(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function K(t){var e;return null!==(e=null!=t?t:b.Promise)&&void 0!==e?e:Promise}function j(t){return c(t[H])}function B(t){return Symbol.asyncIterator&&c(null==t?void 0:t[Symbol.asyncIterator])}function N(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var D="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function q(t){return c(null==t?void 0:t[D])}function U(t){return function(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(t,e||[]),i=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(t){o[t]&&(r[t]=function(e){return new Promise((function(n,r){i.push([t,e,n,r])>1||c(t,e)}))})}function c(t,e){try{(n=o[t](e)).value instanceof s?Promise.resolve(n.value.v).then(a,l):f(i[0][2],n)}catch(t){f(i[0][3],t)}var n}function a(t){c("next",t)}function l(t){c("throw",t)}function f(t,e){t(e),i.shift(),i.length&&c(i[0][0],i[0][1])}}(this,arguments,(function(){var e,r,o;return n(this,(function(n){switch(n.label){case 0:e=t.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,s(e.read())];case 3:return r=n.sent(),o=r.value,r.done?[4,s(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,s(o)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function z(t){return c(null==t?void 0:t.getReader)}function G(t){if(t instanceof M)return t;if(null!=t){if(j(t))return i=t,new M((function(t){var e=i[H]();if(c(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(u(t))return o=t,new M((function(t){for(var e=0;e<o.length&&!t.closed;e++)t.next(o[e]);t.complete()}));if(a(t))return n=t,new M((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,m)}));if(B(t))return R(t);if(q(t))return e=t,new M((function(t){var n,o;try{for(var i=r(e),s=i.next();!s.done;s=i.next()){var u=s.value;if(t.next(u),t.closed)return}}catch(t){n={error:t}}finally{try{s&&!s.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}t.complete()}));if(z(t))return R(U(t))}var e,n,o,i;throw N(t)}function R(t){return new M((function(e){(function(t,e){var o,i,s,u,c,a,l,f;return c=this,a=void 0,f=function(){var c,a;return n(this,(function(n){switch(n.label){case 0:n.trys.push([0,5,6,11]),o=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=r(t),e={},o("next"),o("throw"),o("return"),e[Symbol.asyncIterator]=function(){return this},e);function o(n){e[n]=t[n]&&function(e){return new Promise((function(r,o){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,o,(e=t[n](e)).done,e.value)}))}}}(t),n.label=1;case 1:return[4,o.next()];case 2:if((i=n.sent()).done)return[3,4];if(c=i.value,e.next(c),e.closed)return[2];n.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=n.sent(),s={error:a},[3,11];case 6:return n.trys.push([6,,9,10]),i&&!i.done&&(u=o.return)?[4,u.call(o)]:[3,8];case 7:n.sent(),n.label=8;case 8:return[3,10];case 9:if(s)throw s.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,e){function n(t){try{o(f.next(t))}catch(t){e(t)}}function r(t){try{o(f.throw(t))}catch(t){e(t)}}function o(e){var o;e.done?t(e.value):(o=e.value,o instanceof l?o:new l((function(t){t(o)}))).then(n,r)}o((f=f.apply(c,a||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}function V(t){return function(e){if(function(t){return c(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function $(t,e,n,r,o){return new F(t,e,n,r,o)}var F=function(t){function n(e,n,r,o,i,s){var u=t.call(this,e)||this;return u.onFinalize=i,u.shouldUnsubscribe=s,u._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,u._error=o?function(t){try{o(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,u._complete=r?function(){try{r()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,u}return e(n,t),n.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},n}(C);function Y(t,e){return V((function(n,r){var o=0;n.subscribe($(r,(function(n){r.next(t.call(e,n,o++))})))}))}function Q(t,e,n,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=e.schedule((function(){n(),o?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(i),!o)return i}function J(t,e,n){return void 0===n&&(n=1/0),c(e)?J((function(n,r){return Y((function(t,o){return e(n,t,r,o)}))(G(t(n,r)))}),n):("number"==typeof e&&(n=e),V((function(e,r){return function(t,e,n,r,o,i,s,u){var c=[],a=0,l=0,f=!1,h=function(){!f||c.length||a||e.complete()},p=function(t){return a<r?d(t):c.push(t)},d=function(t){a++;var o=!1;G(n(t,l++)).subscribe($(e,(function(t){e.next(t)}),(function(){o=!0}),void 0,(function(){if(o)try{a--;for(;c.length&&a<r;)t=void 0,t=c.shift(),d(t);h()}catch(t){e.error(t)}var t})))};return t.subscribe($(e,p,(function(){f=!0,h()}))),function(){}}(e,r,t,n)})))}var X=Array.isArray;function Z(t){return Y((function(e){return function(t,e){return X(e)?t.apply(void 0,i([],o(e))):t(e)}(t,e)}))}var tt,et=["addListener","removeListener"],nt=["addEventListener","removeEventListener"],rt=["on","off"];function ot(t,e,n,r){if(c(n)&&(r=n,n=void 0),r)return ot(t,e,n).pipe(Z(r));var i=o(function(t){return c(t.addEventListener)&&c(t.removeEventListener)}(t)?nt.map((function(r){return function(o){return t[r](e,o,n)}})):function(t){return c(t.addListener)&&c(t.removeListener)}(t)?et.map(it(t,e)):function(t){return c(t.on)&&c(t.off)}(t)?rt.map(it(t,e)):[],2),s=i[0],a=i[1];if(!s&&u(t))return J((function(t){return ot(t,e,n)}))(G(t));if(!s)throw new TypeError("Invalid event target");return new M((function(t){var e=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.next(1<e.length?e:e[0])};return s(e),function(){return a(e)}}))}function it(t,e){return function(n){return function(r){return t[n](e,r)}}}function st(t,e,n){var r=c(t)||e||n?{next:t,error:e,complete:n}:t;return r?V((function(t,e){var n;null===(n=r.subscribe)||void 0===n||n.call(r);var o=!0;t.subscribe($(e,(function(t){var n;null===(n=r.next)||void 0===n||n.call(r,t),e.next(t)}),(function(){var t;o=!1,null===(t=r.complete)||void 0===t||t.call(r),e.complete()}),(function(t){var n;o=!1,null===(n=r.error)||void 0===n||n.call(r,t),e.error(t)}),(function(){var t,e;o&&(null===(t=r.unsubscribe)||void 0===t||t.call(r)),null===(e=r.finalize)||void 0===e||e.call(r)})))})):O}class ut{constructor(t,e,n,r){this.color=t,this.x=e,this.y=n,this.pieceType=r,this.imageURL=`src/assets/${t} ${r}.png`}setDirections(t){this.directions=t}}!function(t){t.WHITE="white",t.BLACK="black"}(tt||(tt={}));const ct=tt;var at;!function(t){t.PAWN="pawn",t.KNIGHT="knight",t.BISHOP="bishop",t.ROOK="rook",t.QUEEN="queen",t.KING="king"}(at||(at={}));const lt=at;var ft,ht,pt=function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)},dt=function(t,e,n,r,o){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?o.call(t,n):o?o.value=n:e.set(t,n),n};ft=new WeakMap,ht=new WeakMap;const vt=class extends ut{constructor(t,e,n){super(t,e,n,lt.PAWN),ft.set(this,[[1,0],[2,0],[1,1],[1,-1]]),ht.set(this,!1),t===ct.BLACK&&dt(this,ft,pt(this,ft,"f").map((t=>[-1*t[0],t[1]])),"f"),this.setDirections(pt(this,ft,"f"))}get hasMoved(){return pt(this,ht,"f")}set hasMoved(t){dt(this,ht,!0,"f"),dt(this,ft,[[1,0],[1,1],[1,-1]],"f"),this.color===ct.BLACK&&dt(this,ft,this.blackPawnDirections(pt(this,ft,"f")),"f"),this.setDirections(pt(this,ft,"f"))}blackPawnDirections(t){return t.map((t=>[-1*t[0],t[1]]))}};var yt;yt=new WeakMap;const bt=class extends ut{constructor(t,e,n){super(t,e,n,lt.BISHOP),yt.set(this,[[1,1],[1,-1],[-1,1],[-1,-1]]),this.setDirections(function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)}(this,yt,"f"))}};var wt;wt=new WeakMap;const mt=class extends ut{constructor(t,e,n){super(t,e,n,lt.KNIGHT),wt.set(this,[[1,2],[1,-2],[-1,2],[-1,-2],[2,1],[2,-1],[-2,1],[-2,-1]]),this.setDirections(function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)}(this,wt,"f"))}};var gt,Et,xt=function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)};gt=new WeakMap,Et=new WeakMap;const Tt=class extends ut{constructor(t,e,n){super(t,e,n,lt.ROOK),gt.set(this,[[1,0],[-1,-0],[0,1],[0,-1]]),Et.set(this,!1),this.setDirections(xt(this,gt,"f"))}get hasMoved(){return xt(this,Et,"f")}set hasMoved(t){!function(t,e,n,r,o){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===r?o.call(t,n):o?o.value=n:e.set(t,n)}(this,Et,!0,"f")}};var St;St=new WeakMap;const Ct=class extends ut{constructor(t,e,n){super(t,e,n,lt.QUEEN),St.set(this,[[0,1],[0,-1],[1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1]]),this.setDirections(function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)}(this,St,"f"))}};var _t,kt,At=function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)};_t=new WeakMap,kt=new WeakMap;const It=class extends ut{constructor(t,e,n){super(t,e,n,lt.KING),_t.set(this,[[0,1],[0,-1],[1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1]]),kt.set(this,!1),this.setDirections(At(this,_t,"f"))}get hasMoved(){return At(this,kt,"f")}set hasMoved(t){!function(t,e,n,r,o){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===r?o.call(t,n):o?o.value=n:e.set(t,n)}(this,kt,!0,"f")}};var Pt=l((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),Wt=function(t){function n(){var e=t.call(this)||this;return e.closed=!1,e.currentObservers=null,e.observers=[],e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return e(n,t),n.prototype.lift=function(t){var e=new Lt(this,this);return e.operator=t,e},n.prototype._throwIfClosed=function(){if(this.closed)throw new Pt},n.prototype.next=function(t){var e=this;S((function(){var n,o;if(e._throwIfClosed(),!e.isStopped){e.currentObservers||(e.currentObservers=Array.from(e.observers));try{for(var i=r(e.currentObservers),s=i.next();!s.done;s=i.next())s.value.next(t)}catch(t){n={error:t}}finally{try{s&&!s.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}}}))},n.prototype.error=function(t){var e=this;S((function(){if(e._throwIfClosed(),!e.isStopped){e.hasError=e.isStopped=!0,e.thrownError=t;for(var n=e.observers;n.length;)n.shift().error(t)}}))},n.prototype.complete=function(){var t=this;S((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var e=t.observers;e.length;)e.shift().complete()}}))},n.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(n.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),n.prototype._trySubscribe=function(e){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,e)},n.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},n.prototype._innerSubscribe=function(t){var e=this,n=this,r=n.hasError,o=n.isStopped,i=n.observers;return r||o?d:(this.currentObservers=null,i.push(t),new p((function(){e.currentObservers=null,h(i,t)})))},n.prototype._checkFinalizedStatuses=function(t){var e=this,n=e.hasError,r=e.thrownError,o=e.isStopped;n?t.error(r):o&&t.complete()},n.prototype.asObservable=function(){var t=new M;return t.source=this,t},n.create=function(t,e){return new Lt(t,e)},n}(M),Lt=function(t){function n(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return e(n,t),n.prototype.next=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.next)||void 0===n||n.call(e,t)},n.prototype.error=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.error)||void 0===n||n.call(e,t)},n.prototype.complete=function(){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===e||e.call(t)},n.prototype._subscribe=function(t){var e,n;return null!==(n=null===(e=this.source)||void 0===e?void 0:e.subscribe(t))&&void 0!==n?n:d},n}(Wt),Ht=function(t){function n(e){var n=t.call(this)||this;return n._value=e,n}return e(n,t),Object.defineProperty(n.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),n.prototype._subscribe=function(e){var n=t.prototype._subscribe.call(this,e);return!n.closed&&e.next(this._value),n},n.prototype.getValue=function(){var t=this,e=t.hasError,n=t.thrownError,r=t._value;if(e)throw n;return this._throwIfClosed(),r},n.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},n}(Wt),Ot=Array.isArray,Mt=Object.getPrototypeOf,Kt=Object.prototype,jt=Object.keys;function Bt(t,e){return void 0===e&&(e=0),V((function(n,r){n.subscribe($(r,(function(n){return Q(r,t,(function(){return r.next(n)}),e)}),(function(){return Q(r,t,(function(){return r.complete()}),e)}),(function(n){return Q(r,t,(function(){return r.error(n)}),e)})))}))}function Nt(t,e){return void 0===e&&(e=0),V((function(n,r){r.add(t.schedule((function(){return n.subscribe(r)}),e))}))}function Dt(t,e){if(!t)throw new Error("Iterable cannot be null");return new M((function(n){Q(n,e,(function(){var r=t[Symbol.asyncIterator]();Q(n,e,(function(){r.next().then((function(t){t.done?n.complete():n.next(t.value)}))}),0,!0)}))}))}function qt(t,e){return e?function(t,e){if(null!=t){if(j(t))return function(t,e){return G(t).pipe(Nt(e),Bt(e))}(t,e);if(u(t))return function(t,e){return new M((function(n){var r=0;return e.schedule((function(){r===t.length?n.complete():(n.next(t[r++]),n.closed||this.schedule())}))}))}(t,e);if(a(t))return function(t,e){return G(t).pipe(Nt(e),Bt(e))}(t,e);if(B(t))return Dt(t,e);if(q(t))return function(t,e){return new M((function(n){var r;return Q(n,e,(function(){r=t[D](),Q(n,e,(function(){var t,e,o;try{e=(t=r.next()).value,o=t.done}catch(t){return void n.error(t)}o?n.complete():n.next(e)}),0,!0)})),function(){return c(null==r?void 0:r.return)&&r.return()}}))}(t,e);if(z(t))return function(t,e){return Dt(U(t),e)}(t,e)}throw N(t)}(t,e):G(t)}function Ut(t){return t[t.length-1]}function zt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=function(t){return(e=Ut(t))&&c(e.schedule)?t.pop():void 0;var e}(t),r=function(t){return c(Ut(t))?t.pop():void 0}(t),o=function(t){if(1===t.length){var e=t[0];if(Ot(e))return{args:e,keys:null};if((r=e)&&"object"==typeof r&&Mt(r)===Kt){var n=jt(e);return{args:n.map((function(t){return e[t]})),keys:n}}}var r;return{args:t,keys:null}}(t),i=o.args,s=o.keys;if(0===i.length)return qt([],n);var u=new M(function(t,e,n){return void 0===n&&(n=O),function(r){Gt(e,(function(){for(var o=t.length,i=new Array(o),s=o,u=o,c=function(o){Gt(e,(function(){var c=qt(t[o],e),a=!1;c.subscribe($(r,(function(t){i[o]=t,a||(a=!0,u--),u||r.next(n(i.slice()))}),(function(){--s||r.complete()})))}),r)},a=0;a<o;a++)c(a)}),r)}}(i,n,s?function(t){return function(t,e){return t.reduce((function(t,n,r){return t[n]=e[r],t}),{})}(s,t)}:O));return r?u.pipe(Z(r)):u}function Gt(t,e,n){t?Q(n,t,e):e()}function Rt(t,e){return V((function(n,r){var o=0;n.subscribe($(r,(function(n){return t.call(e,n,o++)&&r.next(n)})))}))}var Vt,$t,Ft,Yt,Qt,Jt,Xt,Zt,te,ee,ne=function(t,e,n,r,o){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?o.call(t,n):o?o.value=n:e.set(t,n),n},re=function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)};Vt=new WeakMap,$t=new WeakMap,Ft=new WeakMap,Yt=new WeakMap,Qt=new WeakMap,Jt=new WeakMap,Xt=new WeakMap,Zt=new WeakMap,te=new WeakMap,ee=new WeakMap,new class{constructor(){Vt.set(this,void 0),$t.set(this,Array(8).fill(0).map((()=>Array(8).fill(0)))),Ft.set(this,new Ht(!0)),Yt.set(this,new Ht(ct.WHITE)),Qt.set(this,void 0),Jt.set(this,void 0),Xt.set(this,void 0),Zt.set(this,new Ht(!0)),te.set(this,new Ht("")),ee.set(this,void 0),ne(this,Vt,[[new Tt(ct.WHITE,0,0),new mt(ct.WHITE,0,1),new bt(ct.WHITE,0,2),new Ct(ct.WHITE,0,3),new It(ct.WHITE,0,4),new bt(ct.WHITE,0,5),new mt(ct.WHITE,0,6),new Tt(ct.WHITE,0,7)],[new vt(ct.WHITE,1,0),new vt(ct.WHITE,1,1),new vt(ct.WHITE,1,2),new vt(ct.WHITE,1,3),new vt(ct.WHITE,1,4),new vt(ct.WHITE,1,5),new vt(ct.WHITE,1,6),new vt(ct.WHITE,1,7)],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[new vt(ct.BLACK,6,0),new vt(ct.BLACK,6,1),new vt(ct.BLACK,6,2),new vt(ct.BLACK,6,3),new vt(ct.BLACK,6,4),new vt(ct.BLACK,6,5),new vt(ct.BLACK,6,6),new vt(ct.BLACK,6,7)],[new Tt(ct.BLACK,7,0),new mt(ct.BLACK,7,1),new bt(ct.BLACK,7,2),new Ct(ct.BLACK,7,3),new It(ct.BLACK,7,4),new bt(ct.BLACK,7,5),new mt(ct.BLACK,7,6),new Tt(ct.BLACK,7,7)]],"f"),this.createChessBoard(),this.startGame()}createChessBoard(){const t=document.createElement("table");t.classList.add("chess-board");for(let e=7;e>=0;e--){const n=document.createElement("tr");for(let t=0;t<8;t++){const r=document.createElement("th");r.classList.add(!(e%2||t%2)||e%2&&t%2?"dark":"light"),r.setAttribute("x",e.toString()),r.setAttribute("y",t.toString());const o=re(this,Vt,"f")[e][t];if(null!==o){const t=document.createElement("img");t.src=o.imageURL,t.alt=o.color+" "+o.pieceType,t.setAttribute("color",o.color),r.appendChild(t)}n.appendChild(r),re(this,$t,"f")[e][t]=r}t.appendChild(n)}const e=document.createElement("h2");e.classList.add("whoIsPlaying"),document.body.appendChild(e),document.body.appendChild(t)}isSquareValid(t,e){return t>=0&&e>=0&&t<8&&e<8}startGame(){ne(this,ee,new Ht(this.findAvailableSquares(ct.WHITE)),"f"),ne(this,Jt,[...document.querySelectorAll("th")],"f"),ne(this,Xt,ot(re(this,Jt,"f"),"click"),"f"),re(this,te,"f").subscribe({next:t=>{document.querySelector(".whoIsPlaying").innerText=t}}),re(this,ee,"f").subscribe({next:t=>{const e=re(this,Yt,"f").value===ct.WHITE?ct.BLACK:ct.WHITE,n=this.isCheck(!1,e);Object.keys(t).length?n?re(this,te,"f").next(re(this,Yt,"f").value.toUpperCase()+" is playing, but is in check"):re(this,te,"f").next(re(this,Yt,"f").value.toUpperCase()+" is playing"):(re(this,te,"f").next(n?e.toUpperCase()+" win by checkmate":"Stalemate"),re(this,Jt,"f").forEach((t=>t.style.pointerEvents="none")))}}),re(this,Ft,"f").subscribe({next:t=>{re(this,Yt,"f").next(t?ct.WHITE:ct.BLACK)}}),re(this,Yt,"f").subscribe({next:t=>{re(this,Jt,"f").forEach((t=>{t.style.background=""})),re(this,ee,"f").next(this.findAvailableSquares(t)),re(this,Jt,"f").forEach((t=>{t.style.outline=""}))}});const t=re(this,Xt,"f").pipe(Y((t=>t.currentTarget)),Rt((t=>t.childNodes.length>0)),Rt((t=>t.childNodes[0].getAttribute("color")===re(this,Yt,"f").value))),e=re(this,Xt,"f").pipe(Y((t=>t.currentTarget)),Rt((t=>"red"===t.style.outlineColor)),st((()=>re(this,Zt,"f").next(!0))));zt([re(this,ee,"f"),t]).subscribe({next:([t,e])=>{if("blue"===e.style.outlineColor)e.style.outline="",re(this,Jt,"f").forEach((t=>t.style.outline=""));else{re(this,Jt,"f").forEach((t=>t.style.outline="")),e.style.outline="5px solid blue";const n=t[Number(e.getAttribute("x"))+","+Number(e.getAttribute("y"))];null==n||n.forEach((t=>t.style.outline="5px solid red"))}}}),zt([t,e]).subscribe({next:([t,e])=>{if(re(this,Zt,"f").value){const n=Number(t.getAttribute("x")),r=Number(t.getAttribute("y")),o=Number(e.getAttribute("x")),i=Number(e.getAttribute("y")),s=re(this,Vt,"f")[n][r];if(s instanceof vt&&(7===o||0===o))this.showPawnPromotionDialog(o,i,n,r);else{if(s instanceof It&&2===Math.abs(i-r)){const t=re(this,Vt,"f")[o][6===i?7:0],e=t.y;t.y=6===i?5:3,re(this,Vt,"f")[t.x][t.y]=t,re(this,Vt,"f")[o][e]=null,re(this,$t,"f")[t.x][t.y].appendChild(re(this,$t,"f")[o][e].childNodes[0])}else if(s instanceof vt&&null===re(this,Vt,"f")[o][i]&&1===Math.abs(i-r)){const t=o+(s.color===ct.WHITE?-1:1),e=i;re(this,Vt,"f")[t][e]=null,re(this,$t,"f")[t][e].innerHTML=""}re(this,Vt,"f")[n][r]=null,re(this,Vt,"f")[o][i]=s,s.x=o,s.y=i,e.innerHTML="",e.appendChild(t.childNodes[0]),ne(this,Qt,{piece:s,xPositionChanged:Math.abs(n-o)},"f"),re(this,Ft,"f").next(!re(this,Ft,"f").value),re(this,Zt,"f").next(!1)}(s instanceof It||s instanceof Tt||s instanceof vt)&&(s.hasMoved=!0)}}})}canKingCastle(t,e){const n=t===ct.WHITE?0:7,r=n,o=e?7:0,i=re(this,Vt,"f")[n][4],s=re(this,Vt,"f")[r][o],u=t===ct.WHITE?ct.BLACK:ct.WHITE,c=this.isCheck(!1,u);return i instanceof It&&!i.hasMoved&&!c&&s instanceof Tt&&!s.hasMoved&&!re(this,Vt,"f")[n][4+(e?1:-1)]&&!re(this,Vt,"f")[n][4+(e?2:-2)]&&!(!e&&re(this,Vt,"f")[n][4+(e?3:-3)])&&this.isSquareSafe(n,4,n,4+(e?1:-1))&&this.isSquareSafe(n,4,n,4+(e?2:-2))}isSquareSafe(t,e,n,r){const o=re(this,Vt,"f")[t][e],i=re(this,Vt,"f")[n][r];if(i&&i.color===o.color)return!1;re(this,Vt,"f")[n][r]=o,re(this,Vt,"f")[t][e]=null;const s=re(this,Yt,"f").value===ct.WHITE?ct.BLACK:ct.WHITE,u=this.isCheck(!0,s);return re(this,Vt,"f")[t][e]=o,re(this,Vt,"f")[n][r]=i,!u}isCheck(t=!1,e){for(const n of re(this,Vt,"f"))for(const r of n)if(r&&r.color===e)if(r instanceof vt||r instanceof It||r instanceof mt)for(const[e,n]of r.directions){const o=r.x+e,i=r.y+n;if(r instanceof vt&&0===n)continue;if(!this.isSquareValid(o,i))continue;const s=re(this,Vt,"f")[o][i];if(s instanceof It&&r.color!==s.color)return t||(re(this,$t,"f")[o][i].style.backgroundColor="red"),!0}else for(const[e,n]of r.directions){let o=r.x+e,i=r.y+n;for(;this.isSquareValid(o,i);){const s=re(this,Vt,"f")[o][i];if(s instanceof It&&r.color!==s.color)return t||(re(this,$t,"f")[o][i].style.backgroundColor="red"),!0;if(null!==re(this,Vt,"f")[o][i])break;o+=e,i+=n}}return!1}findAvailableSquares(t){const e={};for(const n of re(this,Vt,"f"))for(const r of n){if(!r||r.color!==t)continue;const n=[],o=r.x,i=r.y;for(const[t,s]of r.directions){let u=o+t,c=i+s;if(!this.isSquareValid(u,c))continue;let a=re(this,Vt,"f")[u][c];if(r instanceof vt){if(2===t||-2===t){if(null!==a)continue;if(null!==re(this,Vt,"f")[u+(2===t?-1:1)][c])continue}if((1===t||-1===t)&&0===s&&null!==a)continue;if(!(1!==t&&-1!==t||null!==a||1!==s&&-1!==s))continue}if(r instanceof vt||r instanceof It||r instanceof mt)null!==a&&a.color===re(this,Yt,"f").value||this.isSquareSafe(o,i,u,c)&&n.push(re(this,$t,"f")[u][c]);else for(;this.isSquareValid(u,c)&&(a=re(this,Vt,"f")[u][c],null===a||a.color!==re(this,Yt,"f").value)&&(this.isSquareSafe(o,i,u,c)&&n.push(re(this,$t,"f")[u][c]),null===a);)u+=t,c+=s;0!==n.length&&(e[o.toString()+","+i.toString()]=n)}}const n=t===ct.WHITE?0:7;return this.canKingCastle(t,!0)&&e[n+",4"].push(re(this,$t,"f")[n][6]),this.canKingCastle(t,!1)&&e[n+",4"].push(re(this,$t,"f")[n][2]),this.canCaptureEnPassant(t,e),e}canCaptureEnPassant(t,e){for(const n of re(this,Vt,"f"))for(const r of n)if(re(this,Qt,"f")&&r instanceof vt&&re(this,Qt,"f").piece instanceof vt&&r.color===t&&re(this,Qt,"f").piece.color!==r.color&&2===re(this,Qt,"f").xPositionChanged&&r.x===re(this,Qt,"f").piece.x&&1===Math.abs(r.y-re(this,Qt,"f").piece.y)){const t=r.x+(r.color===ct.WHITE?1:-1),n=re(this,Qt,"f").piece.y;re(this,Vt,"f")[re(this,Qt,"f").piece.x][re(this,Qt,"f").piece.y]=null,this.isSquareSafe(r.x,r.y,t,n)&&(e[r.x+","+r.y]||(e[r.x+","+r.y]=[]),e[r.x+","+r.y].push(re(this,$t,"f")[t][n])),re(this,Vt,"f")[re(this,Qt,"f").piece.x][re(this,Qt,"f").piece.y]=re(this,Qt,"f").piece}}showPawnPromotionDialog(t,e,n,r){const o=["bishop","knight","rook","queen"],i=document.createElement("div");i.classList.add("pawn-promotion-popup"),document.body.appendChild(i);const s=document.createElement("div");s.classList.add("btn-close"),i.appendChild(s),ot(s,"click").pipe(st((()=>{i.style.display="none"}))).subscribe();for(const s of o){const o=document.createElement("div");o.classList.add("figure-option");const u=document.createElement("img");u.src=`src/assets/${re(this,Yt,"f").value} ${s}.png`,u.alt=re(this,Yt,"f").value+" "+s,u.addEventListener("click",(()=>{let o;switch(s){case lt.QUEEN:o=new Ct(re(this,Yt,"f").value,t,e);break;case lt.ROOK:o=new Tt(re(this,Yt,"f").value,t,e);break;case lt.BISHOP:o=new bt(re(this,Yt,"f").value,t,e);break;case lt.KNIGHT:default:o=new mt(re(this,Yt,"f").value,t,e)}re(this,Vt,"f")[t][e]=o,re(this,Vt,"f")[n][r]=null;const u=document.createElement("img");u.src=`src/assets/${re(this,Yt,"f").value} ${s}.png`,u.alt=re(this,Yt,"f").value+" "+s,u.setAttribute("color",re(this,Yt,"f").value),re(this,$t,"f")[t][e].innerHTML="",re(this,$t,"f")[t][e].appendChild(u),re(this,$t,"f")[n][r].innerHTML="",re(this,Ft,"f").next(!re(this,Ft,"f").value),re(this,Zt,"f").next(!1),i.style.display="none"})),o.appendChild(u),i.appendChild(o)}}},ot(document,"contextmenu").pipe(st((t=>t.preventDefault()))).subscribe(),ot(document,"dragstart").pipe(st((t=>t.preventDefault()))).subscribe()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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WUFBaUQsSUFBSXJDLElBQXlCLElBQzlFLFlBQTBDLElBQUlBLEdBQXdCLEtBRXRFLG9CQUlJLEdBQUFsVSxLQUFJLEdBQWtCLENBQ2xCLENBQ0ksSUFBSSxHQUFLLEdBQU11VyxNQUFPLEVBQUcsR0FBSSxJQUFJLEdBQU8sR0FBTUEsTUFBTyxFQUFHLEdBQUksSUFBSSxHQUFPLEdBQU1BLE1BQU8sRUFBRyxHQUFJLElBQUksR0FBTSxHQUFNQSxNQUFPLEVBQUcsR0FDckgsSUFBSSxHQUFLLEdBQU1BLE1BQU8sRUFBRyxHQUFJLElBQUksR0FBTyxHQUFNQSxNQUFPLEVBQUcsR0FBSSxJQUFJLEdBQU8sR0FBTUEsTUFBTyxFQUFHLEdBQUksSUFBSSxHQUFLLEdBQU1BLE1BQU8sRUFBRyxJQUV4SCxDQUNJLElBQUksR0FBSyxHQUFNQSxNQUFPLEVBQUcsR0FBSSxJQUFJLEdBQUssR0FBTUEsTUFBTyxFQUFHLEdBQUksSUFBSSxHQUFLLEdBQU1BLE1BQU8sRUFBRyxHQUFJLElBQUksR0FBSyxHQUFNQSxNQUFPLEVBQUcsR0FDaEgsSUFBSSxHQUFLLEdBQU1BLE1BQU8sRUFBRyxHQUFJLElBQUksR0FBSyxHQUFNQSxNQUFPLEVBQUcsR0FBSSxJQUFJLEdBQUssR0FBTUEsTUFBTyxFQUFHLEdBQUksSUFBSSxHQUFLLEdBQU1BLE1BQU8sRUFBRyxJQUVwSCxDQUFDLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFDM0MsQ0FBQyxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLE1BQzNDLENBQUMsS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxNQUMzQyxDQUFDLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFDM0MsQ0FDSSxJQUFJLEdBQUssR0FBTWhFLE1BQU8sRUFBRyxHQUFJLElBQUksR0FBSyxHQUFNQSxNQUFPLEVBQUcsR0FBSSxJQUFJLEdBQUssR0FBTUEsTUFBTyxFQUFHLEdBQUksSUFBSSxHQUFLLEdBQU1BLE1BQU8sRUFBRyxH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R0FBT1gsVUFBWSxHQUU5QyxHQUFBaGEsS0FBSSxRQUFlZSxNQUFNLEdBQUFmLEtBQUksUUFBZXVCLE9BQzVDLEdBQUF2QixLQUFJLFFBQXNCZSxNQUFLLEdBRS9Ca2IsRUFBb0JoRSxNQUFNa0UsUUFBVSxNQUFNLElBRzlDRSxFQUFhL0UsWUFBWWdGLEdBQ3pCTCxFQUFvQjNFLFlBQVkrRSxFLENBRXhDLEdEOWhCSjNMLEdBQVVpRyxTQUFVLGVBQWU5TCxLQUMvQjZHLElBQUk4RyxHQUFTQSxFQUFNZ0Usb0JBQ3JCeFMsWUFFRjBHLEdBQVVpRyxTQUFVLGFBQWE5TCxLQUM3QjZHLElBQUk4RyxHQUFTQSxFQUFNZ0Usb0JBQ3JCeFMsVyIsInNvdXJjZXMiOlsid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYubWpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzQXJyYXlMaWtlLmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzRnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNQcm9taXNlLmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2NyZWF0ZUVycm9yQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvci5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9hcnJSZW1vdmUuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvY29uZmlnLmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyLmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yLmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL25vb3AuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL05vdGlmaWNhdGlvbkZhY3Rvcmllcy5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9lcnJvckNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL1N1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3N5bWJvbC9vYnNlcnZhYmxlLmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lkZW50aXR5LmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9PYnNlcnZhYmxlLmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3BpcGUuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0FzeW5jSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvci5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvaW5uZXJGcm9tLmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2xpZnQuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9PcGVyYXRvclN1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tYXAuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvZXhlY3V0ZVNjaGVkdWxlLmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VNYXAuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tZXJnZUludGVybmFscy5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9tYXBPbmVPck1hbnlBcmdzLmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb21FdmVudC5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9zcmMvY29tcG9uZW50cy9lbnVtcy9Db2xvci50cyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3RhcC5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9zcmMvY29tcG9uZW50cy9QaWVjZS50cyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9zcmMvY29tcG9uZW50cy9lbnVtcy9QaWVjZVR5cGUudHMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vc3JjL2NvbXBvbmVudHMvUGF3bi50cyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9zcmMvY29tcG9uZW50cy9CaXNob3AudHMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vc3JjL2NvbXBvbmVudHMvS25pZ2h0LnRzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL3NyYy9jb21wb25lbnRzL1Jvb2sudHMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vc3JjL2NvbXBvbmVudHMvUXVlZW4udHMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vc3JjL2NvbXBvbmVudHMvS2luZy50cyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvci5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3ViamVjdC5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvQmVoYXZpb3JTdWJqZWN0LmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2FyZ3NBcmdBcnJheU9yT2JqZWN0LmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvb2JzZXJ2ZU9uLmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvc3Vic2NyaWJlT24uanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUFzeW5jSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29ic2VydmFibGUvZnJvbS5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlZC5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVkL3NjaGVkdWxlQXJyYXkuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZVByb21pc2UuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlZC9zY2hlZHVsZUl0ZXJhYmxlLmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZWQvc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvYXJncy5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9jb21iaW5lTGF0ZXN0LmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzU2NoZWR1bGVyLmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2NyZWF0ZU9iamVjdC5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2ZpbHRlci5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vc3JjL2NvbXBvbmVudHMvQ2hlc3Nib2FyZC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cblxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxuQU5EIEZJVE5FU1MuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1IgQkUgTElBQkxFIEZPUiBBTlkgU1BFQ0lBTCwgRElSRUNULFxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxuT1RIRVIgVE9SVElPVVMgQUNUSU9OLCBBUklTSU5HIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFVTRSBPUlxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXG4vKiBnbG9iYWwgUmVmbGVjdCwgUHJvbWlzZSwgU3VwcHJlc3NlZEVycm9yLCBTeW1ib2wgKi9cblxudmFyIGV4dGVuZFN0YXRpY3MgPSBmdW5jdGlvbihkLCBiKSB7XG4gIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcbiAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcbiAgICAgIGZ1bmN0aW9uIChkLCBiKSB7IGZvciAodmFyIHAgaW4gYikgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChiLCBwKSkgZFtwXSA9IGJbcF07IH07XG4gIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XG4gIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2xhc3MgZXh0ZW5kcyB2YWx1ZSBcIiArIFN0cmluZyhiKSArIFwiIGlzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIG51bGxcIik7XG4gIGV4dGVuZFN0YXRpY3MoZCwgYik7XG4gIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG59XG5cbmV4cG9ydCB2YXIgX19hc3NpZ24gPSBmdW5jdGlvbigpIHtcbiAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcbiAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xuICAgICAgICAgIHMgPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0O1xuICB9XG4gIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcbiAgdmFyIHQgPSB7fTtcbiAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXG4gICAgICB0W3BdID0gc1twXTtcbiAgaWYgKHMgIT0gbnVsbCAmJiB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyA9PT0gXCJmdW5jdGlvblwiKVxuICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcbiAgICAgICAgICAgICAgdFtwW2ldXSA9IHNbcFtpXV07XG4gICAgICB9XG4gIHJldHVybiB0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19wYXJhbShwYXJhbUluZGV4LCBkZWNvcmF0b3IpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2VzRGVjb3JhdGUoY3RvciwgZGVzY3JpcHRvckluLCBkZWNvcmF0b3JzLCBjb250ZXh0SW4sIGluaXRpYWxpemVycywgZXh0cmFJbml0aWFsaXplcnMpIHtcbiAgZnVuY3Rpb24gYWNjZXB0KGYpIHsgaWYgKGYgIT09IHZvaWQgMCAmJiB0eXBlb2YgZiAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiRnVuY3Rpb24gZXhwZWN0ZWRcIik7IHJldHVybiBmOyB9XG4gIHZhciBraW5kID0gY29udGV4dEluLmtpbmQsIGtleSA9IGtpbmQgPT09IFwiZ2V0dGVyXCIgPyBcImdldFwiIDoga2luZCA9PT0gXCJzZXR0ZXJcIiA/IFwic2V0XCIgOiBcInZhbHVlXCI7XG4gIHZhciB0YXJnZXQgPSAhZGVzY3JpcHRvckluICYmIGN0b3IgPyBjb250ZXh0SW5bXCJzdGF0aWNcIl0gPyBjdG9yIDogY3Rvci5wcm90b3R5cGUgOiBudWxsO1xuICB2YXIgZGVzY3JpcHRvciA9IGRlc2NyaXB0b3JJbiB8fCAodGFyZ2V0ID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGNvbnRleHRJbi5uYW1lKSA6IHt9KTtcbiAgdmFyIF8sIGRvbmUgPSBmYWxzZTtcbiAgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBjb250ZXh0ID0ge307XG4gICAgICBmb3IgKHZhciBwIGluIGNvbnRleHRJbikgY29udGV4dFtwXSA9IHAgPT09IFwiYWNjZXNzXCIgPyB7fSA6IGNvbnRleHRJbltwXTtcbiAgICAgIGZvciAodmFyIHAgaW4gY29udGV4dEluLmFjY2VzcykgY29udGV4dC5hY2Nlc3NbcF0gPSBjb250ZXh0SW4uYWNjZXNzW3BdO1xuICAgICAgY29udGV4dC5hZGRJbml0aWFsaXplciA9IGZ1bmN0aW9uIChmKSB7IGlmIChkb25lKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGFkZCBpbml0aWFsaXplcnMgYWZ0ZXIgZGVjb3JhdGlvbiBoYXMgY29tcGxldGVkXCIpOyBleHRyYUluaXRpYWxpemVycy5wdXNoKGFjY2VwdChmIHx8IG51bGwpKTsgfTtcbiAgICAgIHZhciByZXN1bHQgPSAoMCwgZGVjb3JhdG9yc1tpXSkoa2luZCA9PT0gXCJhY2Nlc3NvclwiID8geyBnZXQ6IGRlc2NyaXB0b3IuZ2V0LCBzZXQ6IGRlc2NyaXB0b3Iuc2V0IH0gOiBkZXNjcmlwdG9yW2tleV0sIGNvbnRleHQpO1xuICAgICAgaWYgKGtpbmQgPT09IFwiYWNjZXNzb3JcIikge1xuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHZvaWQgMCkgY29udGludWU7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCB8fCB0eXBlb2YgcmVzdWx0ICE9PSBcIm9iamVjdFwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IGV4cGVjdGVkXCIpO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5nZXQpKSBkZXNjcmlwdG9yLmdldCA9IF87XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LnNldCkpIGRlc2NyaXB0b3Iuc2V0ID0gXztcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuaW5pdCkpIGluaXRpYWxpemVycy51bnNoaWZ0KF8pO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoXyA9IGFjY2VwdChyZXN1bHQpKSB7XG4gICAgICAgICAgaWYgKGtpbmQgPT09IFwiZmllbGRcIikgaW5pdGlhbGl6ZXJzLnVuc2hpZnQoXyk7XG4gICAgICAgICAgZWxzZSBkZXNjcmlwdG9yW2tleV0gPSBfO1xuICAgICAgfVxuICB9XG4gIGlmICh0YXJnZXQpIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGNvbnRleHRJbi5uYW1lLCBkZXNjcmlwdG9yKTtcbiAgZG9uZSA9IHRydWU7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19ydW5Jbml0aWFsaXplcnModGhpc0FyZywgaW5pdGlhbGl6ZXJzLCB2YWx1ZSkge1xuICB2YXIgdXNlVmFsdWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBpbml0aWFsaXplcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlID0gdXNlVmFsdWUgPyBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnLCB2YWx1ZSkgOiBpbml0aWFsaXplcnNbaV0uY2FsbCh0aGlzQXJnKTtcbiAgfVxuICByZXR1cm4gdXNlVmFsdWUgPyB2YWx1ZSA6IHZvaWQgMDtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3Byb3BLZXkoeCkge1xuICByZXR1cm4gdHlwZW9mIHggPT09IFwic3ltYm9sXCIgPyB4IDogXCJcIi5jb25jYXQoeCk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19zZXRGdW5jdGlvbk5hbWUoZiwgbmFtZSwgcHJlZml4KSB7XG4gIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJzeW1ib2xcIikgbmFtZSA9IG5hbWUuZGVzY3JpcHRpb24gPyBcIltcIi5jb25jYXQobmFtZS5kZXNjcmlwdGlvbiwgXCJdXCIpIDogXCJcIjtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmLCBcIm5hbWVcIiwgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiBwcmVmaXggPyBcIlwiLmNvbmNhdChwcmVmaXgsIFwiIFwiLCBuYW1lKSA6IG5hbWUgfSk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xuICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xuICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XG4gIH0pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xuICB2YXIgXyA9IHsgbGFiZWw6IDAsIHNlbnQ6IGZ1bmN0aW9uKCkgeyBpZiAodFswXSAmIDEpIHRocm93IHRbMV07IHJldHVybiB0WzFdOyB9LCB0cnlzOiBbXSwgb3BzOiBbXSB9LCBmLCB5LCB0LCBnO1xuICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcbiAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gIGZ1bmN0aW9uIHN0ZXAob3ApIHtcbiAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcbiAgICAgIHdoaWxlIChnICYmIChnID0gMCwgb3BbMF0gJiYgKF8gPSAwKSksIF8pIHRyeSB7XG4gICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcbiAgICAgICAgICBzd2l0Y2ggKG9wWzBdKSB7XG4gICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xuICAgICAgICAgICAgICBjYXNlIDU6IF8ubGFiZWwrKzsgeSA9IG9wWzFdOyBvcCA9IFswXTsgY29udGludWU7XG4gICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIGlmICghKHQgPSBfLnRyeXMsIHQgPSB0Lmxlbmd0aCA+IDAgJiYgdFt0Lmxlbmd0aCAtIDFdKSAmJiAob3BbMF0gPT09IDYgfHwgb3BbMF0gPT09IDIpKSB7IF8gPSAwOyBjb250aW51ZTsgfVxuICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgXy5sYWJlbCA8IHRbMl0pIHsgXy5sYWJlbCA9IHRbMl07IF8ub3BzLnB1c2gob3ApOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XG4gICAgICBpZiAob3BbMF0gJiA1KSB0aHJvdyBvcFsxXTsgcmV0dXJuIHsgdmFsdWU6IG9wWzBdID8gb3BbMV0gOiB2b2lkIDAsIGRvbmU6IHRydWUgfTtcbiAgfVxufVxuXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgb1trMl0gPSBtW2tdO1xufSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xuICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XG4gIHZhciBzID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIFN5bWJvbC5pdGVyYXRvciwgbSA9IHMgJiYgb1tzXSwgaSA9IDA7XG4gIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xuICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XG4gICAgICBuZXh0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcbiAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XG4gICAgICB9XG4gIH07XG4gIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XG4gIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXTtcbiAgaWYgKCFtKSByZXR1cm4gbztcbiAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XG4gIHRyeSB7XG4gICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcbiAgfVxuICBjYXRjaCAoZXJyb3IpIHsgZSA9IHsgZXJyb3I6IGVycm9yIH07IH1cbiAgZmluYWxseSB7XG4gICAgICB0cnkge1xuICAgICAgICAgIGlmIChyICYmICFyLmRvbmUgJiYgKG0gPSBpW1wicmV0dXJuXCJdKSkgbS5jYWxsKGkpO1xuICAgICAgfVxuICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XG4gIH1cbiAgcmV0dXJuIGFyO1xufVxuXG4vKiogQGRlcHJlY2F0ZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcbiAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXG4gICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XG4gIHJldHVybiBhcjtcbn1cblxuLyoqIEBkZXByZWNhdGVkICovXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XG4gIGZvciAodmFyIHMgPSAwLCBpID0gMCwgaWwgPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWw7IGkrKykgcyArPSBhcmd1bWVudHNbaV0ubGVuZ3RoO1xuICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXG4gICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcbiAgICAgICAgICByW2tdID0gYVtqXTtcbiAgcmV0dXJuIHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tLCBwYWNrKSB7XG4gIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAoYXIgfHwgIShpIGluIGZyb20pKSB7XG4gICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcbiAgICAgICAgICBhcltpXSA9IGZyb21baV07XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcbiAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBfX2F3YWl0ID8gKHRoaXMudiA9IHYsIHRoaXMpIDogbmV3IF9fYXdhaXQodik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jR2VuZXJhdG9yKHRoaXNBcmcsIF9hcmd1bWVudHMsIGdlbmVyYXRvcikge1xuICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xuICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xuICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XG4gIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxuICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XG4gIGZ1bmN0aW9uIHN0ZXAocikgeyByLnZhbHVlIGluc3RhbmNlb2YgX19hd2FpdCA/IFByb21pc2UucmVzb2x2ZShyLnZhbHVlLnYpLnRoZW4oZnVsZmlsbCwgcmVqZWN0KSA6IHNldHRsZShxWzBdWzJdLCByKTsgfVxuICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XG4gIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cbiAgZnVuY3Rpb24gc2V0dGxlKGYsIHYpIHsgaWYgKGYodiksIHEuc2hpZnQoKSwgcS5sZW5ndGgpIHJlc3VtZShxWzBdWzBdLCBxWzBdWzFdKTsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0RlbGVnYXRvcihvKSB7XG4gIHZhciBpLCBwO1xuICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xuICBmdW5jdGlvbiB2ZXJiKG4sIGYpIHsgaVtuXSA9IG9bbl0gPyBmdW5jdGlvbiAodikgeyByZXR1cm4gKHAgPSAhcCkgPyB7IHZhbHVlOiBfX2F3YWl0KG9bbl0odikpLCBkb25lOiBmYWxzZSB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XG4gIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG4gIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XG4gIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcbiAgZnVuY3Rpb24gdmVyYihuKSB7IGlbbl0gPSBvW25dICYmIGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7IHYgPSBvW25dKHYpLCBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCB2LmRvbmUsIHYudmFsdWUpOyB9KTsgfTsgfVxuICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xuICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxuICByZXR1cm4gY29va2VkO1xufTtcblxudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgb1tcImRlZmF1bHRcIl0gPSB2O1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0U3Rhcihtb2QpIHtcbiAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XG4gIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgZGVmYXVsdDogbW9kIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0KHJlY2VpdmVyLCBzdGF0ZSwga2luZCwgZikge1xuICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XG4gIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHJlYWQgcHJpdmF0ZSBtZW1iZXIgZnJvbSBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICByZXR1cm4ga2luZCA9PT0gXCJtXCIgPyBmIDoga2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIpIDogZiA/IGYudmFsdWUgOiBzdGF0ZS5nZXQocmVjZWl2ZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgc3RhdGUsIHZhbHVlLCBraW5kLCBmKSB7XG4gIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcbiAgaWYgKGtpbmQgPT09IFwiYVwiICYmICFmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBhY2Nlc3NvciB3YXMgZGVmaW5lZCB3aXRob3V0IGEgc2V0dGVyXCIpO1xuICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCB3cml0ZSBwcml2YXRlIG1lbWJlciB0byBhbiBvYmplY3Qgd2hvc2UgY2xhc3MgZGlkIG5vdCBkZWNsYXJlIGl0XCIpO1xuICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRJbihzdGF0ZSwgcmVjZWl2ZXIpIHtcbiAgaWYgKHJlY2VpdmVyID09PSBudWxsIHx8ICh0eXBlb2YgcmVjZWl2ZXIgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHJlY2VpdmVyICE9PSBcImZ1bmN0aW9uXCIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHVzZSAnaW4nIG9wZXJhdG9yIG9uIG5vbi1vYmplY3RcIik7XG4gIHJldHVybiB0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyID09PSBzdGF0ZSA6IHN0YXRlLmhhcyhyZWNlaXZlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FkZERpc3Bvc2FibGVSZXNvdXJjZShlbnYsIHZhbHVlLCBhc3luYykge1xuICBpZiAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHZvaWQgMCkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIHZhbHVlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgZXhwZWN0ZWQuXCIpO1xuICAgIHZhciBkaXNwb3NlO1xuICAgIGlmIChhc3luYykge1xuICAgICAgICBpZiAoIVN5bWJvbC5hc3luY0Rpc3Bvc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNEaXNwb3NlIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICAgICAgZGlzcG9zZSA9IHZhbHVlW1N5bWJvbC5hc3luY0Rpc3Bvc2VdO1xuICAgIH1cbiAgICBpZiAoZGlzcG9zZSA9PT0gdm9pZCAwKSB7XG4gICAgICAgIGlmICghU3ltYm9sLmRpc3Bvc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuZGlzcG9zZSBpcyBub3QgZGVmaW5lZC5cIik7XG4gICAgICAgIGRpc3Bvc2UgPSB2YWx1ZVtTeW1ib2wuZGlzcG9zZV07XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGlzcG9zZSAhPT0gXCJmdW5jdGlvblwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiT2JqZWN0IG5vdCBkaXNwb3NhYmxlLlwiKTtcbiAgICBlbnYuc3RhY2sucHVzaCh7IHZhbHVlOiB2YWx1ZSwgZGlzcG9zZTogZGlzcG9zZSwgYXN5bmM6IGFzeW5jIH0pO1xuICB9XG4gIGVsc2UgaWYgKGFzeW5jKSB7XG4gICAgZW52LnN0YWNrLnB1c2goeyBhc3luYzogdHJ1ZSB9KTtcbiAgfVxuICByZXR1cm4gdmFsdWU7XG59XG5cbnZhciBfU3VwcHJlc3NlZEVycm9yID0gdHlwZW9mIFN1cHByZXNzZWRFcnJvciA9PT0gXCJmdW5jdGlvblwiID8gU3VwcHJlc3NlZEVycm9yIDogZnVuY3Rpb24gKGVycm9yLCBzdXBwcmVzc2VkLCBtZXNzYWdlKSB7XG4gIHZhciBlID0gbmV3IEVycm9yKG1lc3NhZ2UpO1xuICByZXR1cm4gZS5uYW1lID0gXCJTdXBwcmVzc2VkRXJyb3JcIiwgZS5lcnJvciA9IGVycm9yLCBlLnN1cHByZXNzZWQgPSBzdXBwcmVzc2VkLCBlO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZGlzcG9zZVJlc291cmNlcyhlbnYpIHtcbiAgZnVuY3Rpb24gZmFpbChlKSB7XG4gICAgZW52LmVycm9yID0gZW52Lmhhc0Vycm9yID8gbmV3IF9TdXBwcmVzc2VkRXJyb3IoZSwgZW52LmVycm9yLCBcIkFuIGVycm9yIHdhcyBzdXBwcmVzc2VkIGR1cmluZyBkaXNwb3NhbC5cIikgOiBlO1xuICAgIGVudi5oYXNFcnJvciA9IHRydWU7XG4gIH1cbiAgZnVuY3Rpb24gbmV4dCgpIHtcbiAgICB3aGlsZSAoZW52LnN0YWNrLmxlbmd0aCkge1xuICAgICAgdmFyIHJlYyA9IGVudi5zdGFjay5wb3AoKTtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWMuZGlzcG9zZSAmJiByZWMuZGlzcG9zZS5jYWxsKHJlYy52YWx1ZSk7XG4gICAgICAgIGlmIChyZWMuYXN5bmMpIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0KS50aGVuKG5leHQsIGZ1bmN0aW9uKGUpIHsgZmFpbChlKTsgcmV0dXJuIG5leHQoKTsgfSk7XG4gICAgICB9XG4gICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgIGZhaWwoZSk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChlbnYuaGFzRXJyb3IpIHRocm93IGVudi5lcnJvcjtcbiAgfVxuICByZXR1cm4gbmV4dCgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIF9fZXh0ZW5kcyxcbiAgX19hc3NpZ24sXG4gIF9fcmVzdCxcbiAgX19kZWNvcmF0ZSxcbiAgX19wYXJhbSxcbiAgX19tZXRhZGF0YSxcbiAgX19hd2FpdGVyLFxuICBfX2dlbmVyYXRvcixcbiAgX19jcmVhdGVCaW5kaW5nLFxuICBfX2V4cG9ydFN0YXIsXG4gIF9fdmFsdWVzLFxuICBfX3JlYWQsXG4gIF9fc3ByZWFkLFxuICBfX3NwcmVhZEFycmF5cyxcbiAgX19zcHJlYWRBcnJheSxcbiAgX19hd2FpdCxcbiAgX19hc3luY0dlbmVyYXRvcixcbiAgX19hc3luY0RlbGVnYXRvcixcbiAgX19hc3luY1ZhbHVlcyxcbiAgX19tYWtlVGVtcGxhdGVPYmplY3QsXG4gIF9faW1wb3J0U3RhcixcbiAgX19pbXBvcnREZWZhdWx0LFxuICBfX2NsYXNzUHJpdmF0ZUZpZWxkR2V0LFxuICBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0LFxuICBfX2NsYXNzUHJpdmF0ZUZpZWxkSW4sXG4gIF9fYWRkRGlzcG9zYWJsZVJlc291cmNlLFxuICBfX2Rpc3Bvc2VSZXNvdXJjZXMsXG59O1xuIiwiZXhwb3J0IHZhciBpc0FycmF5TGlrZSA9IChmdW5jdGlvbiAoeCkgeyByZXR1cm4geCAmJiB0eXBlb2YgeC5sZW5ndGggPT09ICdudW1iZXInICYmIHR5cGVvZiB4ICE9PSAnZnVuY3Rpb24nOyB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzQXJyYXlMaWtlLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRnVuY3Rpb24uanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gXCIuL2lzRnVuY3Rpb25cIjtcbmV4cG9ydCBmdW5jdGlvbiBpc1Byb21pc2UodmFsdWUpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbih2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsdWUudGhlbik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1Byb21pc2UuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVycm9yQ2xhc3MoY3JlYXRlSW1wbCkge1xuICAgIHZhciBfc3VwZXIgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgRXJyb3IuY2FsbChpbnN0YW5jZSk7XG4gICAgICAgIGluc3RhbmNlLnN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgfTtcbiAgICB2YXIgY3RvckZ1bmMgPSBjcmVhdGVJbXBsKF9zdXBlcik7XG4gICAgY3RvckZ1bmMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICAgIGN0b3JGdW5jLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JGdW5jO1xuICAgIHJldHVybiBjdG9yRnVuYztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUVycm9yQ2xhc3MuanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlRXJyb3JDbGFzcyB9IGZyb20gJy4vY3JlYXRlRXJyb3JDbGFzcyc7XG5leHBvcnQgdmFyIFVuc3Vic2NyaXB0aW9uRXJyb3IgPSBjcmVhdGVFcnJvckNsYXNzKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gVW5zdWJzY3JpcHRpb25FcnJvckltcGwoZXJyb3JzKSB7XG4gICAgICAgIF9zdXBlcih0aGlzKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gZXJyb3JzXG4gICAgICAgICAgICA/IGVycm9ycy5sZW5ndGggKyBcIiBlcnJvcnMgb2NjdXJyZWQgZHVyaW5nIHVuc3Vic2NyaXB0aW9uOlxcblwiICsgZXJyb3JzLm1hcChmdW5jdGlvbiAoZXJyLCBpKSB7IHJldHVybiBpICsgMSArIFwiKSBcIiArIGVyci50b1N0cmluZygpOyB9KS5qb2luKCdcXG4gICcpXG4gICAgICAgICAgICA6ICcnO1xuICAgICAgICB0aGlzLm5hbWUgPSAnVW5zdWJzY3JpcHRpb25FcnJvcic7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVuc3Vic2NyaXB0aW9uRXJyb3IuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGFyclJlbW92ZShhcnIsIGl0ZW0pIHtcbiAgICBpZiAoYXJyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgICAgICAwIDw9IGluZGV4ICYmIGFyci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyclJlbW92ZS5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkQXJyYXksIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgVW5zdWJzY3JpcHRpb25FcnJvciB9IGZyb20gJy4vdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yJztcbmltcG9ydCB7IGFyclJlbW92ZSB9IGZyb20gJy4vdXRpbC9hcnJSZW1vdmUnO1xudmFyIFN1YnNjcmlwdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKGluaXRpYWxUZWFyZG93bikge1xuICAgICAgICB0aGlzLmluaXRpYWxUZWFyZG93biA9IGluaXRpYWxUZWFyZG93bjtcbiAgICAgICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZmluYWxpemVycyA9IG51bGw7XG4gICAgfVxuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlXzEsIF9hLCBlXzIsIF9iO1xuICAgICAgICB2YXIgZXJyb3JzO1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgICAgIGlmIChfcGFyZW50YWdlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX3BhcmVudGFnZV8xID0gX192YWx1ZXMoX3BhcmVudGFnZSksIF9wYXJlbnRhZ2VfMV8xID0gX3BhcmVudGFnZV8xLm5leHQoKTsgIV9wYXJlbnRhZ2VfMV8xLmRvbmU7IF9wYXJlbnRhZ2VfMV8xID0gX3BhcmVudGFnZV8xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwYXJlbnRfMSA9IF9wYXJlbnRhZ2VfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudF8xLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF9wYXJlbnRhZ2VfMV8xICYmICFfcGFyZW50YWdlXzFfMS5kb25lICYmIChfYSA9IF9wYXJlbnRhZ2VfMS5yZXR1cm4pKSBfYS5jYWxsKF9wYXJlbnRhZ2VfMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIF9wYXJlbnRhZ2UucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBpbml0aWFsRmluYWxpemVyID0gdGhpcy5pbml0aWFsVGVhcmRvd247XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihpbml0aWFsRmluYWxpemVyKSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxGaW5hbGl6ZXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JzID0gZSBpbnN0YW5jZW9mIFVuc3Vic2NyaXB0aW9uRXJyb3IgPyBlLmVycm9ycyA6IFtlXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgX2ZpbmFsaXplcnMgPSB0aGlzLl9maW5hbGl6ZXJzO1xuICAgICAgICAgICAgaWYgKF9maW5hbGl6ZXJzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmluYWxpemVycyA9IG51bGw7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgX2ZpbmFsaXplcnNfMSA9IF9fdmFsdWVzKF9maW5hbGl6ZXJzKSwgX2ZpbmFsaXplcnNfMV8xID0gX2ZpbmFsaXplcnNfMS5uZXh0KCk7ICFfZmluYWxpemVyc18xXzEuZG9uZTsgX2ZpbmFsaXplcnNfMV8xID0gX2ZpbmFsaXplcnNfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaW5hbGl6ZXIgPSBfZmluYWxpemVyc18xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWNGaW5hbGl6ZXIoZmluYWxpemVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMgIT09IG51bGwgJiYgZXJyb3JzICE9PSB2b2lkIDAgPyBlcnJvcnMgOiBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChlcnJvcnMpKSwgX19yZWFkKGVyci5lcnJvcnMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzJfMSkgeyBlXzIgPSB7IGVycm9yOiBlXzJfMSB9OyB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2ZpbmFsaXplcnNfMV8xICYmICFfZmluYWxpemVyc18xXzEuZG9uZSAmJiAoX2IgPSBfZmluYWxpemVyc18xLnJldHVybikpIF9iLmNhbGwoX2ZpbmFsaXplcnNfMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlcnJvcnMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVW5zdWJzY3JpcHRpb25FcnJvcihlcnJvcnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uICh0ZWFyZG93bikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh0ZWFyZG93biAmJiB0ZWFyZG93biAhPT0gdGhpcykge1xuICAgICAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgZXhlY0ZpbmFsaXplcih0ZWFyZG93bik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAodGVhcmRvd24gaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlYXJkb3duLmNsb3NlZCB8fCB0ZWFyZG93bi5faGFzUGFyZW50KHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGVhcmRvd24uX2FkZFBhcmVudCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKHRoaXMuX2ZpbmFsaXplcnMgPSAoX2EgPSB0aGlzLl9maW5hbGl6ZXJzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXSkucHVzaCh0ZWFyZG93bik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX2hhc1BhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgIHJldHVybiBfcGFyZW50YWdlID09PSBwYXJlbnQgfHwgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkgJiYgX3BhcmVudGFnZS5pbmNsdWRlcyhwYXJlbnQpKTtcbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuX2FkZFBhcmVudCA9IGZ1bmN0aW9uIChwYXJlbnQpIHtcbiAgICAgICAgdmFyIF9wYXJlbnRhZ2UgPSB0aGlzLl9wYXJlbnRhZ2U7XG4gICAgICAgIHRoaXMuX3BhcmVudGFnZSA9IEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkgPyAoX3BhcmVudGFnZS5wdXNoKHBhcmVudCksIF9wYXJlbnRhZ2UpIDogX3BhcmVudGFnZSA/IFtfcGFyZW50YWdlLCBwYXJlbnRdIDogcGFyZW50O1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5fcmVtb3ZlUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgaWYgKF9wYXJlbnRhZ2UgPT09IHBhcmVudCkge1xuICAgICAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpKSB7XG4gICAgICAgICAgICBhcnJSZW1vdmUoX3BhcmVudGFnZSwgcGFyZW50KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbiAodGVhcmRvd24pIHtcbiAgICAgICAgdmFyIF9maW5hbGl6ZXJzID0gdGhpcy5fZmluYWxpemVycztcbiAgICAgICAgX2ZpbmFsaXplcnMgJiYgYXJyUmVtb3ZlKF9maW5hbGl6ZXJzLCB0ZWFyZG93bik7XG4gICAgICAgIGlmICh0ZWFyZG93biBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgdGVhcmRvd24uX3JlbW92ZVBhcmVudCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLkVNUFRZID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVtcHR5ID0gbmV3IFN1YnNjcmlwdGlvbigpO1xuICAgICAgICBlbXB0eS5jbG9zZWQgPSB0cnVlO1xuICAgICAgICByZXR1cm4gZW1wdHk7XG4gICAgfSkoKTtcbiAgICByZXR1cm4gU3Vic2NyaXB0aW9uO1xufSgpKTtcbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiB9O1xuZXhwb3J0IHZhciBFTVBUWV9TVUJTQ1JJUFRJT04gPSBTdWJzY3JpcHRpb24uRU1QVFk7XG5leHBvcnQgZnVuY3Rpb24gaXNTdWJzY3JpcHRpb24odmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uIHx8XG4gICAgICAgICh2YWx1ZSAmJiAnY2xvc2VkJyBpbiB2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnJlbW92ZSkgJiYgaXNGdW5jdGlvbih2YWx1ZS5hZGQpICYmIGlzRnVuY3Rpb24odmFsdWUudW5zdWJzY3JpYmUpKSk7XG59XG5mdW5jdGlvbiBleGVjRmluYWxpemVyKGZpbmFsaXplcikge1xuICAgIGlmIChpc0Z1bmN0aW9uKGZpbmFsaXplcikpIHtcbiAgICAgICAgZmluYWxpemVyKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBmaW5hbGl6ZXIudW5zdWJzY3JpYmUoKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpcHRpb24uanMubWFwIiwiZXhwb3J0IHZhciBjb25maWcgPSB7XG4gICAgb25VbmhhbmRsZWRFcnJvcjogbnVsbCxcbiAgICBvblN0b3BwZWROb3RpZmljYXRpb246IG51bGwsXG4gICAgUHJvbWlzZTogdW5kZWZpbmVkLFxuICAgIHVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmc6IGZhbHNlLFxuICAgIHVzZURlcHJlY2F0ZWROZXh0Q29udGV4dDogZmFsc2UsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uZmlnLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xuZXhwb3J0IHZhciB0aW1lb3V0UHJvdmlkZXIgPSB7XG4gICAgc2V0VGltZW91dDogZnVuY3Rpb24gKGhhbmRsZXIsIHRpbWVvdXQpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGVnYXRlID0gdGltZW91dFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICBpZiAoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLnNldFRpbWVvdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZS5zZXRUaW1lb3V0LmFwcGx5KGRlbGVnYXRlLCBfX3NwcmVhZEFycmF5KFtoYW5kbGVyLCB0aW1lb3V0XSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtoYW5kbGVyLCB0aW1lb3V0XSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgfSxcbiAgICBjbGVhclRpbWVvdXQ6IGZ1bmN0aW9uIChoYW5kbGUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gdGltZW91dFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICByZXR1cm4gKChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuY2xlYXJUaW1lb3V0KSB8fCBjbGVhclRpbWVvdXQpKGhhbmRsZSk7XG4gICAgfSxcbiAgICBkZWxlZ2F0ZTogdW5kZWZpbmVkLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVvdXRQcm92aWRlci5qcy5tYXAiLCJpbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi9jb25maWcnO1xuaW1wb3J0IHsgdGltZW91dFByb3ZpZGVyIH0gZnJvbSAnLi4vc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlcic7XG5leHBvcnQgZnVuY3Rpb24gcmVwb3J0VW5oYW5kbGVkRXJyb3IoZXJyKSB7XG4gICAgdGltZW91dFByb3ZpZGVyLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb25VbmhhbmRsZWRFcnJvciA9IGNvbmZpZy5vblVuaGFuZGxlZEVycm9yO1xuICAgICAgICBpZiAob25VbmhhbmRsZWRFcnJvcikge1xuICAgICAgICAgICAgb25VbmhhbmRsZWRFcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZXBvcnRVbmhhbmRsZWRFcnJvci5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gbm9vcCgpIHsgfVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9vcC5qcy5tYXAiLCJleHBvcnQgdmFyIENPTVBMRVRFX05PVElGSUNBVElPTiA9IChmdW5jdGlvbiAoKSB7IHJldHVybiBjcmVhdGVOb3RpZmljYXRpb24oJ0MnLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7IH0pKCk7XG5leHBvcnQgZnVuY3Rpb24gZXJyb3JOb3RpZmljYXRpb24oZXJyb3IpIHtcbiAgICByZXR1cm4gY3JlYXRlTm90aWZpY2F0aW9uKCdFJywgdW5kZWZpbmVkLCBlcnJvcik7XG59XG5leHBvcnQgZnVuY3Rpb24gbmV4dE5vdGlmaWNhdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBjcmVhdGVOb3RpZmljYXRpb24oJ04nLCB2YWx1ZSwgdW5kZWZpbmVkKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVOb3RpZmljYXRpb24oa2luZCwgdmFsdWUsIGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAga2luZDoga2luZCxcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBlcnJvcjogZXJyb3IsXG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5vdGlmaWNhdGlvbkZhY3Rvcmllcy5qcy5tYXAiLCJpbXBvcnQgeyBjb25maWcgfSBmcm9tICcuLi9jb25maWcnO1xudmFyIGNvbnRleHQgPSBudWxsO1xuZXhwb3J0IGZ1bmN0aW9uIGVycm9yQ29udGV4dChjYikge1xuICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICB2YXIgaXNSb290ID0gIWNvbnRleHQ7XG4gICAgICAgIGlmIChpc1Jvb3QpIHtcbiAgICAgICAgICAgIGNvbnRleHQgPSB7IGVycm9yVGhyb3duOiBmYWxzZSwgZXJyb3I6IG51bGwgfTtcbiAgICAgICAgfVxuICAgICAgICBjYigpO1xuICAgICAgICBpZiAoaXNSb290KSB7XG4gICAgICAgICAgICB2YXIgX2EgPSBjb250ZXh0LCBlcnJvclRocm93biA9IF9hLmVycm9yVGhyb3duLCBlcnJvciA9IF9hLmVycm9yO1xuICAgICAgICAgICAgY29udGV4dCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoZXJyb3JUaHJvd24pIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgY2IoKTtcbiAgICB9XG59XG5leHBvcnQgZnVuY3Rpb24gY2FwdHVyZUVycm9yKGVycikge1xuICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyAmJiBjb250ZXh0KSB7XG4gICAgICAgIGNvbnRleHQuZXJyb3JUaHJvd24gPSB0cnVlO1xuICAgICAgICBjb250ZXh0LmVycm9yID0gZXJyO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yQ29udGV4dC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBpc1N1YnNjcmlwdGlvbiwgU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgY29uZmlnIH0gZnJvbSAnLi9jb25maWcnO1xuaW1wb3J0IHsgcmVwb3J0VW5oYW5kbGVkRXJyb3IgfSBmcm9tICcuL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3InO1xuaW1wb3J0IHsgbm9vcCB9IGZyb20gJy4vdXRpbC9ub29wJztcbmltcG9ydCB7IG5leHROb3RpZmljYXRpb24sIGVycm9yTm90aWZpY2F0aW9uLCBDT01QTEVURV9OT1RJRklDQVRJT04gfSBmcm9tICcuL05vdGlmaWNhdGlvbkZhY3Rvcmllcyc7XG5pbXBvcnQgeyB0aW1lb3V0UHJvdmlkZXIgfSBmcm9tICcuL3NjaGVkdWxlci90aW1lb3V0UHJvdmlkZXInO1xuaW1wb3J0IHsgY2FwdHVyZUVycm9yIH0gZnJvbSAnLi91dGlsL2Vycm9yQ29udGV4dCc7XG52YXIgU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gU3Vic2NyaWJlcihkZXN0aW5hdGlvbikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICAgICAgaWYgKGlzU3Vic2NyaXB0aW9uKGRlc3RpbmF0aW9uKSkge1xuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmFkZChfdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IEVNUFRZX09CU0VSVkVSO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgU3Vic2NyaWJlci5jcmVhdGUgPSBmdW5jdGlvbiAobmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHJldHVybiBuZXcgU2FmZVN1YnNjcmliZXIobmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKG5leHROb3RpZmljYXRpb24odmFsdWUpLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX25leHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKGVycm9yTm90aWZpY2F0aW9uKGVyciksIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihDT01QTEVURV9OT1RJRklDQVRJT04sIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIF9zdXBlci5wcm90b3R5cGUudW5zdWJzY3JpYmUuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24gPSBudWxsO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fbmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLm5leHQodmFsdWUpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBTdWJzY3JpYmVyO1xufShTdWJzY3JpcHRpb24pKTtcbmV4cG9ydCB7IFN1YnNjcmliZXIgfTtcbnZhciBfYmluZCA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kO1xuZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICAgIHJldHVybiBfYmluZC5jYWxsKGZuLCB0aGlzQXJnKTtcbn1cbnZhciBDb25zdW1lck9ic2VydmVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDb25zdW1lck9ic2VydmVyKHBhcnRpYWxPYnNlcnZlcikge1xuICAgICAgICB0aGlzLnBhcnRpYWxPYnNlcnZlciA9IHBhcnRpYWxPYnNlcnZlcjtcbiAgICB9XG4gICAgQ29uc3VtZXJPYnNlcnZlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyID0gdGhpcy5wYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChwYXJ0aWFsT2JzZXJ2ZXIubmV4dCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnN1bWVyT2JzZXJ2ZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyID0gdGhpcy5wYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChwYXJ0aWFsT2JzZXJ2ZXIuZXJyb3IpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBDb25zdW1lck9ic2VydmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlciA9IHRoaXMucGFydGlhbE9ic2VydmVyO1xuICAgICAgICBpZiAocGFydGlhbE9ic2VydmVyLmNvbXBsZXRlKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlVW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQ29uc3VtZXJPYnNlcnZlcjtcbn0oKSk7XG52YXIgU2FmZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTYWZlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTYWZlU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKG9ic2VydmVyT3JOZXh0KSB8fCAhb2JzZXJ2ZXJPck5leHQpIHtcbiAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlciA9IHtcbiAgICAgICAgICAgICAgICBuZXh0OiAob2JzZXJ2ZXJPck5leHQgIT09IG51bGwgJiYgb2JzZXJ2ZXJPck5leHQgIT09IHZvaWQgMCA/IG9ic2VydmVyT3JOZXh0IDogdW5kZWZpbmVkKSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IgIT09IG51bGwgJiYgZXJyb3IgIT09IHZvaWQgMCA/IGVycm9yIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiBjb21wbGV0ZSAhPT0gbnVsbCAmJiBjb21wbGV0ZSAhPT0gdm9pZCAwID8gY29tcGxldGUgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdmFyIGNvbnRleHRfMTtcbiAgICAgICAgICAgIGlmIChfdGhpcyAmJiBjb25maWcudXNlRGVwcmVjYXRlZE5leHRDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgY29udGV4dF8xID0gT2JqZWN0LmNyZWF0ZShvYnNlcnZlck9yTmV4dCk7XG4gICAgICAgICAgICAgICAgY29udGV4dF8xLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMudW5zdWJzY3JpYmUoKTsgfTtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIgPSB7XG4gICAgICAgICAgICAgICAgICAgIG5leHQ6IG9ic2VydmVyT3JOZXh0Lm5leHQgJiYgYmluZChvYnNlcnZlck9yTmV4dC5uZXh0LCBjb250ZXh0XzEpLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogb2JzZXJ2ZXJPck5leHQuZXJyb3IgJiYgYmluZChvYnNlcnZlck9yTmV4dC5lcnJvciwgY29udGV4dF8xKSxcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGU6IG9ic2VydmVyT3JOZXh0LmNvbXBsZXRlICYmIGJpbmQob2JzZXJ2ZXJPck5leHQuY29tcGxldGUsIGNvbnRleHRfMSksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlciA9IG9ic2VydmVyT3JOZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gbmV3IENvbnN1bWVyT2JzZXJ2ZXIocGFydGlhbE9ic2VydmVyKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICByZXR1cm4gU2FmZVN1YnNjcmliZXI7XG59KFN1YnNjcmliZXIpKTtcbmV4cG9ydCB7IFNhZmVTdWJzY3JpYmVyIH07XG5mdW5jdGlvbiBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcikge1xuICAgIGlmIChjb25maWcudXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZykge1xuICAgICAgICBjYXB0dXJlRXJyb3IoZXJyb3IpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmVwb3J0VW5oYW5kbGVkRXJyb3IoZXJyb3IpO1xuICAgIH1cbn1cbmZ1bmN0aW9uIGRlZmF1bHRFcnJvckhhbmRsZXIoZXJyKSB7XG4gICAgdGhyb3cgZXJyO1xufVxuZnVuY3Rpb24gaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24sIHN1YnNjcmliZXIpIHtcbiAgICB2YXIgb25TdG9wcGVkTm90aWZpY2F0aW9uID0gY29uZmlnLm9uU3RvcHBlZE5vdGlmaWNhdGlvbjtcbiAgICBvblN0b3BwZWROb3RpZmljYXRpb24gJiYgdGltZW91dFByb3ZpZGVyLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gb25TdG9wcGVkTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbiwgc3Vic2NyaWJlcik7IH0pO1xufVxuZXhwb3J0IHZhciBFTVBUWV9PQlNFUlZFUiA9IHtcbiAgICBjbG9zZWQ6IHRydWUsXG4gICAgbmV4dDogbm9vcCxcbiAgICBlcnJvcjogZGVmYXVsdEVycm9ySGFuZGxlcixcbiAgICBjb21wbGV0ZTogbm9vcCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpYmVyLmpzLm1hcCIsImV4cG9ydCB2YXIgb2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7IHJldHVybiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wub2JzZXJ2YWJsZSkgfHwgJ0BAb2JzZXJ2YWJsZSc7IH0pKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZhYmxlLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gICAgcmV0dXJuIHg7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZGVudGl0eS5qcy5tYXAiLCJpbXBvcnQgeyBTYWZlU3Vic2NyaWJlciwgU3Vic2NyaWJlciB9IGZyb20gJy4vU3Vic2NyaWJlcic7XG5pbXBvcnQgeyBpc1N1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuL3N5bWJvbC9vYnNlcnZhYmxlJztcbmltcG9ydCB7IHBpcGVGcm9tQXJyYXkgfSBmcm9tICcuL3V0aWwvcGlwZSc7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgZXJyb3JDb250ZXh0IH0gZnJvbSAnLi91dGlsL2Vycm9yQ29udGV4dCc7XG52YXIgT2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmUpIHtcbiAgICAgICAgaWYgKHN1YnNjcmliZSkge1xuICAgICAgICAgICAgdGhpcy5fc3Vic2NyaWJlID0gc3Vic2NyaWJlO1xuICAgICAgICB9XG4gICAgfVxuICAgIE9ic2VydmFibGUucHJvdG90eXBlLmxpZnQgPSBmdW5jdGlvbiAob3BlcmF0b3IpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgpO1xuICAgICAgICBvYnNlcnZhYmxlLnNvdXJjZSA9IHRoaXM7XG4gICAgICAgIG9ic2VydmFibGUub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5zdWJzY3JpYmUgPSBmdW5jdGlvbiAob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgc3Vic2NyaWJlciA9IGlzU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCkgPyBvYnNlcnZlck9yTmV4dCA6IG5ldyBTYWZlU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKTtcbiAgICAgICAgZXJyb3JDb250ZXh0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IF90aGlzLCBvcGVyYXRvciA9IF9hLm9wZXJhdG9yLCBzb3VyY2UgPSBfYS5zb3VyY2U7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmFkZChvcGVyYXRvclxuICAgICAgICAgICAgICAgID9cbiAgICAgICAgICAgICAgICAgICAgb3BlcmF0b3IuY2FsbChzdWJzY3JpYmVyLCBzb3VyY2UpXG4gICAgICAgICAgICAgICAgOiBzb3VyY2VcbiAgICAgICAgICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuX3N1YnNjcmliZShzdWJzY3JpYmVyKVxuICAgICAgICAgICAgICAgICAgICA6XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdHJ5U3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzdWJzY3JpYmVyO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3RyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIChzaW5rKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc3Vic2NyaWJlKHNpbmspO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHNpbmsuZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuZm9yRWFjaCA9IGZ1bmN0aW9uIChuZXh0LCBwcm9taXNlQ3Rvcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBwcm9taXNlQ3RvciA9IGdldFByb21pc2VDdG9yKHByb21pc2VDdG9yKTtcbiAgICAgICAgcmV0dXJuIG5ldyBwcm9taXNlQ3RvcihmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICB2YXIgc3Vic2NyaWJlciA9IG5ldyBTYWZlU3Vic2NyaWJlcih7XG4gICAgICAgICAgICAgICAgbmV4dDogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IHJlamVjdCxcbiAgICAgICAgICAgICAgICBjb21wbGV0ZTogcmVzb2x2ZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHJldHVybiAoX2EgPSB0aGlzLnNvdXJjZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlW1N5bWJvbF9vYnNlcnZhYmxlXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb3BlcmF0aW9ucyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgb3BlcmF0aW9uc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwaXBlRnJvbUFycmF5KG9wZXJhdGlvbnMpKHRoaXMpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUudG9Qcm9taXNlID0gZnVuY3Rpb24gKHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgIF90aGlzLnN1YnNjcmliZShmdW5jdGlvbiAoeCkgeyByZXR1cm4gKHZhbHVlID0geCk7IH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHJlamVjdChlcnIpOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiByZXNvbHZlKHZhbHVlKTsgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5jcmVhdGUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShzdWJzY3JpYmUpO1xuICAgIH07XG4gICAgcmV0dXJuIE9ic2VydmFibGU7XG59KCkpO1xuZXhwb3J0IHsgT2JzZXJ2YWJsZSB9O1xuZnVuY3Rpb24gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuIChfYSA9IHByb21pc2VDdG9yICE9PSBudWxsICYmIHByb21pc2VDdG9yICE9PSB2b2lkIDAgPyBwcm9taXNlQ3RvciA6IGNvbmZpZy5Qcm9taXNlKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBQcm9taXNlO1xufVxuZnVuY3Rpb24gaXNPYnNlcnZlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLm5leHQpICYmIGlzRnVuY3Rpb24odmFsdWUuZXJyb3IpICYmIGlzRnVuY3Rpb24odmFsdWUuY29tcGxldGUpO1xufVxuZnVuY3Rpb24gaXNTdWJzY3JpYmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSAmJiB2YWx1ZSBpbnN0YW5jZW9mIFN1YnNjcmliZXIpIHx8IChpc09ic2VydmVyKHZhbHVlKSAmJiBpc1N1YnNjcmlwdGlvbih2YWx1ZSkpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9T2JzZXJ2YWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4vaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIHBpcGUoKSB7XG4gICAgdmFyIGZucyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGZuc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gcGlwZUZyb21BcnJheShmbnMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBpcGVGcm9tQXJyYXkoZm5zKSB7XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgIH1cbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZm5zWzBdO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gcGlwZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGZucy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGZuKSB7IHJldHVybiBmbihwcmV2KTsgfSwgaW5wdXQpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXBlLmpzLm1hcCIsImltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oaW5wdXRbU3ltYm9sX29ic2VydmFibGVdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSW50ZXJvcE9ic2VydmFibGUuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNBc3luY0l0ZXJhYmxlKG9iaikge1xuICAgIHJldHVybiBTeW1ib2wuYXN5bmNJdGVyYXRvciAmJiBpc0Z1bmN0aW9uKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9ialtTeW1ib2wuYXN5bmNJdGVyYXRvcl0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBc3luY0l0ZXJhYmxlLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvcihpbnB1dCkge1xuICAgIHJldHVybiBuZXcgVHlwZUVycm9yKFwiWW91IHByb3ZpZGVkIFwiICsgKGlucHV0ICE9PSBudWxsICYmIHR5cGVvZiBpbnB1dCA9PT0gJ29iamVjdCcgPyAnYW4gaW52YWxpZCBvYmplY3QnIDogXCInXCIgKyBpbnB1dCArIFwiJ1wiKSArIFwiIHdoZXJlIGEgc3RyZWFtIHdhcyBleHBlY3RlZC4gWW91IGNhbiBwcm92aWRlIGFuIE9ic2VydmFibGUsIFByb21pc2UsIFJlYWRhYmxlU3RyZWFtLCBBcnJheSwgQXN5bmNJdGVyYWJsZSwgb3IgSXRlcmFibGUuXCIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGhyb3dVbm9ic2VydmFibGVFcnJvci5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gZ2V0U3ltYm9sSXRlcmF0b3IoKSB7XG4gICAgaWYgKHR5cGVvZiBTeW1ib2wgIT09ICdmdW5jdGlvbicgfHwgIVN5bWJvbC5pdGVyYXRvcikge1xuICAgICAgICByZXR1cm4gJ0BAaXRlcmF0b3InO1xuICAgIH1cbiAgICByZXR1cm4gU3ltYm9sLml0ZXJhdG9yO1xufVxuZXhwb3J0IHZhciBpdGVyYXRvciA9IGdldFN5bWJvbEl0ZXJhdG9yKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVyYXRvci5qcy5tYXAiLCJpbXBvcnQgeyBpdGVyYXRvciBhcyBTeW1ib2xfaXRlcmF0b3IgfSBmcm9tICcuLi9zeW1ib2wvaXRlcmF0b3InO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNJdGVyYWJsZShpbnB1dCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGlucHV0ID09PSBudWxsIHx8IGlucHV0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbnB1dFtTeW1ib2xfaXRlcmF0b3JdKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzSXRlcmFibGUuanMubWFwIiwiaW1wb3J0IHsgX19hc3luY0dlbmVyYXRvciwgX19hd2FpdCwgX19nZW5lcmF0b3IgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IocmVhZGFibGVTdHJlYW0pIHtcbiAgICByZXR1cm4gX19hc3luY0dlbmVyYXRvcih0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3JfMSgpIHtcbiAgICAgICAgdmFyIHJlYWRlciwgX2EsIHZhbHVlLCBkb25lO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSByZWFkYWJsZVN0cmVhbS5nZXRSZWFkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFsxLCAsIDksIDEwXSk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMjtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICghdHJ1ZSkgcmV0dXJuIFszLCA4XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfX2F3YWl0KHJlYWRlci5yZWFkKCkpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIF9hID0gX2Iuc2VudCgpLCB2YWx1ZSA9IF9hLnZhbHVlLCBkb25lID0gX2EuZG9uZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFkb25lKSByZXR1cm4gWzMsIDVdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9fYXdhaXQodm9pZCAwKV07XG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzIsIF9iLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiByZXR1cm4gWzQsIF9fYXdhaXQodmFsdWUpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6IHJldHVybiBbNCwgX2Iuc2VudCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAyXTtcbiAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMywgMTBdO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnJlbGVhc2VMb2NrKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFsyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNSZWFkYWJsZVN0cmVhbUxpa2Uob2JqKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24ob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqLmdldFJlYWRlcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1JlYWRhYmxlU3RyZWFtTGlrZS5qcy5tYXAiLCJpbXBvcnQgeyBfX2FzeW5jVmFsdWVzLCBfX2F3YWl0ZXIsIF9fZ2VuZXJhdG9yLCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNBcnJheUxpa2UgfSBmcm9tICcuLi91dGlsL2lzQXJyYXlMaWtlJztcbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvaXNQcm9taXNlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzSW50ZXJvcE9ic2VydmFibGUgfSBmcm9tICcuLi91dGlsL2lzSW50ZXJvcE9ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNBc3luY0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0FzeW5jSXRlcmFibGUnO1xuaW1wb3J0IHsgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IgfSBmcm9tICcuLi91dGlsL3Rocm93VW5vYnNlcnZhYmxlRXJyb3InO1xuaW1wb3J0IHsgaXNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJdGVyYWJsZSc7XG5pbXBvcnQgeyBpc1JlYWRhYmxlU3RyZWFtTGlrZSwgcmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvciB9IGZyb20gJy4uL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyByZXBvcnRVbmhhbmRsZWRFcnJvciB9IGZyb20gJy4uL3V0aWwvcmVwb3J0VW5oYW5kbGVkRXJyb3InO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBpbm5lckZyb20oaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBPYnNlcnZhYmxlKSB7XG4gICAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUludGVyb3BPYnNlcnZhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBcnJheUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUFycmF5TGlrZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUHJvbWlzZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tUHJvbWlzZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXN5bmNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tQXN5bmNJdGVyYWJsZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUl0ZXJhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbVJlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdGhyb3cgY3JlYXRlSW52YWxpZE9ic2VydmFibGVUeXBlRXJyb3IoaW5wdXQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21JbnRlcm9wT2JzZXJ2YWJsZShvYmopIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIG9icyA9IG9ialtTeW1ib2xfb2JzZXJ2YWJsZV0oKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JzLnN1YnNjcmliZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBvYnMuc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Byb3ZpZGVkIG9iamVjdCBkb2VzIG5vdCBjb3JyZWN0bHkgaW1wbGVtZW50IFN5bWJvbC5vYnNlcnZhYmxlJyk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUFycmF5TGlrZShhcnJheSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aCAmJiAhc3Vic2NyaWJlci5jbG9zZWQ7IGkrKykge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KGFycmF5W2ldKTtcbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbVByb21pc2UocHJvbWlzZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBwcm9taXNlXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KVxuICAgICAgICAgICAgLnRoZW4obnVsbCwgcmVwb3J0VW5oYW5kbGVkRXJyb3IpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21JdGVyYWJsZShpdGVyYWJsZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIGl0ZXJhYmxlXzEgPSBfX3ZhbHVlcyhpdGVyYWJsZSksIGl0ZXJhYmxlXzFfMSA9IGl0ZXJhYmxlXzEubmV4dCgpOyAhaXRlcmFibGVfMV8xLmRvbmU7IGl0ZXJhYmxlXzFfMSA9IGl0ZXJhYmxlXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gaXRlcmFibGVfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChpdGVyYWJsZV8xXzEgJiYgIWl0ZXJhYmxlXzFfMS5kb25lICYmIChfYSA9IGl0ZXJhYmxlXzEucmV0dXJuKSkgX2EuY2FsbChpdGVyYWJsZV8xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgfVxuICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUFzeW5jSXRlcmFibGUoYXN5bmNJdGVyYWJsZSkge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBwcm9jZXNzKGFzeW5jSXRlcmFibGUsIHN1YnNjcmliZXIpLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSk7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbVJlYWRhYmxlU3RyZWFtTGlrZShyZWFkYWJsZVN0cmVhbSkge1xuICAgIHJldHVybiBmcm9tQXN5bmNJdGVyYWJsZShyZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yKHJlYWRhYmxlU3RyZWFtKSk7XG59XG5mdW5jdGlvbiBwcm9jZXNzKGFzeW5jSXRlcmFibGUsIHN1YnNjcmliZXIpIHtcbiAgICB2YXIgYXN5bmNJdGVyYWJsZV8xLCBhc3luY0l0ZXJhYmxlXzFfMTtcbiAgICB2YXIgZV8yLCBfYTtcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB2YWx1ZSwgZV8yXzE7XG4gICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2IpIHtcbiAgICAgICAgICAgIHN3aXRjaCAoX2IubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMCwgNSwgNiwgMTFdKTtcbiAgICAgICAgICAgICAgICAgICAgYXN5bmNJdGVyYWJsZV8xID0gX19hc3luY1ZhbHVlcyhhc3luY0l0ZXJhYmxlKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAxO1xuICAgICAgICAgICAgICAgIGNhc2UgMTogcmV0dXJuIFs0LCBhc3luY0l0ZXJhYmxlXzEubmV4dCgpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGFzeW5jSXRlcmFibGVfMV8xID0gX2Iuc2VudCgpLCAhYXN5bmNJdGVyYWJsZV8xXzEuZG9uZSkpIHJldHVybiBbMywgNF07XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlID0gYXN5bmNJdGVyYWJsZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDM7XG4gICAgICAgICAgICAgICAgY2FzZSAzOiByZXR1cm4gWzMsIDFdO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFszLCAxMV07XG4gICAgICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgICAgICBlXzJfMSA9IF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgZV8yID0geyBlcnJvcjogZV8yXzEgfTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFszLCAxMV07XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzYsICwgOSwgMTBdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYXN5bmNJdGVyYWJsZV8xXzEgJiYgIWFzeW5jSXRlcmFibGVfMV8xLmRvbmUgJiYgKF9hID0gYXN5bmNJdGVyYWJsZV8xLnJldHVybikpKSByZXR1cm4gWzMsIDhdO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQsIF9hLmNhbGwoYXN5bmNJdGVyYWJsZV8xKV07XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gODtcbiAgICAgICAgICAgICAgICBjYXNlIDg6IHJldHVybiBbMywgMTBdO1xuICAgICAgICAgICAgICAgIGNhc2UgOTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzddO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6IHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlubmVyRnJvbS5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBoYXNMaWZ0KHNvdXJjZSkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHNvdXJjZSA9PT0gbnVsbCB8fCBzb3VyY2UgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNvdXJjZS5saWZ0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBvcGVyYXRlKGluaXQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgICBpZiAoaGFzTGlmdChzb3VyY2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlLmxpZnQoZnVuY3Rpb24gKGxpZnRlZFNvdXJjZSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpbml0KGxpZnRlZFNvdXJjZSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VuYWJsZSB0byBsaWZ0IHVua25vd24gT2JzZXJ2YWJsZSB0eXBlJyk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpZnQuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpYmVyIH0gZnJvbSAnLi4vU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUpIHtcbiAgICByZXR1cm4gbmV3IE9wZXJhdG9yU3Vic2NyaWJlcihkZXN0aW5hdGlvbiwgb25OZXh0LCBvbkNvbXBsZXRlLCBvbkVycm9yLCBvbkZpbmFsaXplKTtcbn1cbnZhciBPcGVyYXRvclN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhPcGVyYXRvclN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUsIHNob3VsZFVuc3Vic2NyaWJlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGRlc3RpbmF0aW9uKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5vbkZpbmFsaXplID0gb25GaW5hbGl6ZTtcbiAgICAgICAgX3RoaXMuc2hvdWxkVW5zdWJzY3JpYmUgPSBzaG91bGRVbnN1YnNjcmliZTtcbiAgICAgICAgX3RoaXMuX25leHQgPSBvbk5leHRcbiAgICAgICAgICAgID8gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25OZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogX3N1cGVyLnByb3RvdHlwZS5fbmV4dDtcbiAgICAgICAgX3RoaXMuX2Vycm9yID0gb25FcnJvclxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25FcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9lcnJvcjtcbiAgICAgICAgX3RoaXMuX2NvbXBsZXRlID0gb25Db21wbGV0ZVxuICAgICAgICAgICAgPyBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9jb21wbGV0ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPcGVyYXRvclN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICghdGhpcy5zaG91bGRVbnN1YnNjcmliZSB8fCB0aGlzLnNob3VsZFVuc3Vic2NyaWJlKCkpIHtcbiAgICAgICAgICAgIHZhciBjbG9zZWRfMSA9IHRoaXMuY2xvc2VkO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgIWNsb3NlZF8xICYmICgoX2EgPSB0aGlzLm9uRmluYWxpemUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE9wZXJhdG9yU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgT3BlcmF0b3JTdWJzY3JpYmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PcGVyYXRvclN1YnNjcmliZXIuanMubWFwIiwiaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gbWFwKHByb2plY3QsIHRoaXNBcmcpIHtcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IDA7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHByb2plY3QuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaW5kZXgrKykpO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXAuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGV4ZWN1dGVTY2hlZHVsZShwYXJlbnRTdWJzY3JpcHRpb24sIHNjaGVkdWxlciwgd29yaywgZGVsYXksIHJlcGVhdCkge1xuICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgIGlmIChyZXBlYXQgPT09IHZvaWQgMCkgeyByZXBlYXQgPSBmYWxzZTsgfVxuICAgIHZhciBzY2hlZHVsZVN1YnNjcmlwdGlvbiA9IHNjaGVkdWxlci5zY2hlZHVsZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdvcmsoKTtcbiAgICAgICAgaWYgKHJlcGVhdCkge1xuICAgICAgICAgICAgcGFyZW50U3Vic2NyaXB0aW9uLmFkZCh0aGlzLnNjaGVkdWxlKG51bGwsIGRlbGF5KSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9LCBkZWxheSk7XG4gICAgcGFyZW50U3Vic2NyaXB0aW9uLmFkZChzY2hlZHVsZVN1YnNjcmlwdGlvbik7XG4gICAgaWYgKCFyZXBlYXQpIHtcbiAgICAgICAgcmV0dXJuIHNjaGVkdWxlU3Vic2NyaXB0aW9uO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4ZWN1dGVTY2hlZHVsZS5qcy5tYXAiLCJpbXBvcnQgeyBtYXAgfSBmcm9tICcuL21hcCc7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IG1lcmdlSW50ZXJuYWxzIH0gZnJvbSAnLi9tZXJnZUludGVybmFscyc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZU1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3RvciwgY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHsgY29uY3VycmVudCA9IEluZmluaXR5OyB9XG4gICAgaWYgKGlzRnVuY3Rpb24ocmVzdWx0U2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiBtZXJnZU1hcChmdW5jdGlvbiAoYSwgaSkgeyByZXR1cm4gbWFwKGZ1bmN0aW9uIChiLCBpaSkgeyByZXR1cm4gcmVzdWx0U2VsZWN0b3IoYSwgYiwgaSwgaWkpOyB9KShpbm5lckZyb20ocHJvamVjdChhLCBpKSkpOyB9LCBjb25jdXJyZW50KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHJlc3VsdFNlbGVjdG9yID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25jdXJyZW50ID0gcmVzdWx0U2VsZWN0b3I7XG4gICAgfVxuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHsgcmV0dXJuIG1lcmdlSW50ZXJuYWxzKHNvdXJjZSwgc3Vic2NyaWJlciwgcHJvamVjdCwgY29uY3VycmVudCk7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VNYXAuanMubWFwIiwiaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgZXhlY3V0ZVNjaGVkdWxlIH0gZnJvbSAnLi4vdXRpbC9leGVjdXRlU2NoZWR1bGUnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlSW50ZXJuYWxzKHNvdXJjZSwgc3Vic2NyaWJlciwgcHJvamVjdCwgY29uY3VycmVudCwgb25CZWZvcmVOZXh0LCBleHBhbmQsIGlubmVyU3ViU2NoZWR1bGVyLCBhZGRpdGlvbmFsRmluYWxpemVyKSB7XG4gICAgdmFyIGJ1ZmZlciA9IFtdO1xuICAgIHZhciBhY3RpdmUgPSAwO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICB2YXIgY2hlY2tDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzQ29tcGxldGUgJiYgIWJ1ZmZlci5sZW5ndGggJiYgIWFjdGl2ZSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB2YXIgb3V0ZXJOZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiAoYWN0aXZlIDwgY29uY3VycmVudCA/IGRvSW5uZXJTdWIodmFsdWUpIDogYnVmZmVyLnB1c2godmFsdWUpKTsgfTtcbiAgICB2YXIgZG9Jbm5lclN1YiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBleHBhbmQgJiYgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgYWN0aXZlKys7XG4gICAgICAgIHZhciBpbm5lckNvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIGlubmVyRnJvbShwcm9qZWN0KHZhbHVlLCBpbmRleCsrKSkuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAoaW5uZXJWYWx1ZSkge1xuICAgICAgICAgICAgb25CZWZvcmVOZXh0ID09PSBudWxsIHx8IG9uQmVmb3JlTmV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25CZWZvcmVOZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgaWYgKGV4cGFuZCkge1xuICAgICAgICAgICAgICAgIG91dGVyTmV4dChpbm5lclZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChpbm5lclZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaW5uZXJDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlubmVyQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmUtLTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyZWRWYWx1ZSA9IGJ1ZmZlci5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlubmVyU3ViU2NoZWR1bGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIGlubmVyU3ViU2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7IHJldHVybiBkb0lubmVyU3ViKGJ1ZmZlcmVkVmFsdWUpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvSW5uZXJTdWIoYnVmZmVyZWRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChidWZmZXIubGVuZ3RoICYmIGFjdGl2ZSA8IGNvbmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9sb29wXzEoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjaGVja0NvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgb3V0ZXJOZXh0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlzQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICBjaGVja0NvbXBsZXRlKCk7XG4gICAgfSkpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFkZGl0aW9uYWxGaW5hbGl6ZXIgPT09IG51bGwgfHwgYWRkaXRpb25hbEZpbmFsaXplciA9PT0gdm9pZCAwID8gdm9pZCAwIDogYWRkaXRpb25hbEZpbmFsaXplcigpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZUludGVybmFscy5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IG1hcCB9IGZyb20gXCIuLi9vcGVyYXRvcnMvbWFwXCI7XG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBjYWxsT3JBcHBseShmbiwgYXJncykge1xuICAgIHJldHVybiBpc0FycmF5KGFyZ3MpID8gZm4uYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoYXJncykpKSA6IGZuKGFyZ3MpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1hcE9uZU9yTWFueUFyZ3MoZm4pIHtcbiAgICByZXR1cm4gbWFwKGZ1bmN0aW9uIChhcmdzKSB7IHJldHVybiBjYWxsT3JBcHBseShmbiwgYXJncyk7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwT25lT3JNYW55QXJncy5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IG1lcmdlTWFwIH0gZnJvbSAnLi4vb3BlcmF0b3JzL21lcmdlTWFwJztcbmltcG9ydCB7IGlzQXJyYXlMaWtlIH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5TGlrZSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IG1hcE9uZU9yTWFueUFyZ3MgfSBmcm9tICcuLi91dGlsL21hcE9uZU9yTWFueUFyZ3MnO1xudmFyIG5vZGVFdmVudEVtaXR0ZXJNZXRob2RzID0gWydhZGRMaXN0ZW5lcicsICdyZW1vdmVMaXN0ZW5lciddO1xudmFyIGV2ZW50VGFyZ2V0TWV0aG9kcyA9IFsnYWRkRXZlbnRMaXN0ZW5lcicsICdyZW1vdmVFdmVudExpc3RlbmVyJ107XG52YXIganF1ZXJ5TWV0aG9kcyA9IFsnb24nLCAnb2ZmJ107XG5leHBvcnQgZnVuY3Rpb24gZnJvbUV2ZW50KHRhcmdldCwgZXZlbnROYW1lLCBvcHRpb25zLCByZXN1bHRTZWxlY3Rvcikge1xuICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMpKSB7XG4gICAgICAgIHJlc3VsdFNlbGVjdG9yID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBmcm9tRXZlbnQodGFyZ2V0LCBldmVudE5hbWUsIG9wdGlvbnMpLnBpcGUobWFwT25lT3JNYW55QXJncyhyZXN1bHRTZWxlY3RvcikpO1xuICAgIH1cbiAgICB2YXIgX2EgPSBfX3JlYWQoaXNFdmVudFRhcmdldCh0YXJnZXQpXG4gICAgICAgID8gZXZlbnRUYXJnZXRNZXRob2RzLm1hcChmdW5jdGlvbiAobWV0aG9kTmFtZSkgeyByZXR1cm4gZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIHRhcmdldFttZXRob2ROYW1lXShldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpOyB9OyB9KVxuICAgICAgICA6XG4gICAgICAgICAgICBpc05vZGVTdHlsZUV2ZW50RW1pdHRlcih0YXJnZXQpXG4gICAgICAgICAgICAgICAgPyBub2RlRXZlbnRFbWl0dGVyTWV0aG9kcy5tYXAodG9Db21tb25IYW5kbGVyUmVnaXN0cnkodGFyZ2V0LCBldmVudE5hbWUpKVxuICAgICAgICAgICAgICAgIDogaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlcih0YXJnZXQpXG4gICAgICAgICAgICAgICAgICAgID8ganF1ZXJ5TWV0aG9kcy5tYXAodG9Db21tb25IYW5kbGVyUmVnaXN0cnkodGFyZ2V0LCBldmVudE5hbWUpKVxuICAgICAgICAgICAgICAgICAgICA6IFtdLCAyKSwgYWRkID0gX2FbMF0sIHJlbW92ZSA9IF9hWzFdO1xuICAgIGlmICghYWRkKSB7XG4gICAgICAgIGlmIChpc0FycmF5TGlrZSh0YXJnZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbWVyZ2VNYXAoZnVuY3Rpb24gKHN1YlRhcmdldCkgeyByZXR1cm4gZnJvbUV2ZW50KHN1YlRhcmdldCwgZXZlbnROYW1lLCBvcHRpb25zKTsgfSkoaW5uZXJGcm9tKHRhcmdldCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghYWRkKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgZXZlbnQgdGFyZ2V0Jyk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpYmVyLm5leHQoMSA8IGFyZ3MubGVuZ3RoID8gYXJncyA6IGFyZ3NbMF0pO1xuICAgICAgICB9O1xuICAgICAgICBhZGQoaGFuZGxlcik7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiByZW1vdmUoaGFuZGxlcik7IH07XG4gICAgfSk7XG59XG5mdW5jdGlvbiB0b0NvbW1vbkhhbmRsZXJSZWdpc3RyeSh0YXJnZXQsIGV2ZW50TmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobWV0aG9kTmFtZSkgeyByZXR1cm4gZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIHRhcmdldFttZXRob2ROYW1lXShldmVudE5hbWUsIGhhbmRsZXIpOyB9OyB9O1xufVxuZnVuY3Rpb24gaXNOb2RlU3R5bGVFdmVudEVtaXR0ZXIodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odGFyZ2V0LmFkZExpc3RlbmVyKSAmJiBpc0Z1bmN0aW9uKHRhcmdldC5yZW1vdmVMaXN0ZW5lcik7XG59XG5mdW5jdGlvbiBpc0pRdWVyeVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHRhcmdldC5vbikgJiYgaXNGdW5jdGlvbih0YXJnZXQub2ZmKTtcbn1cbmZ1bmN0aW9uIGlzRXZlbnRUYXJnZXQodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIpICYmIGlzRnVuY3Rpb24odGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbUV2ZW50LmpzLm1hcCIsImVudW0gQ29sb3Ige1xyXG4gICAgV0hJVEUgPSBcIndoaXRlXCIsXHJcbiAgICBCTEFDSyA9IFwiYmxhY2tcIlxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb2xvciAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi91dGlsL2lkZW50aXR5JztcbmV4cG9ydCBmdW5jdGlvbiB0YXAob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgIHZhciB0YXBPYnNlcnZlciA9IGlzRnVuY3Rpb24ob2JzZXJ2ZXJPck5leHQpIHx8IGVycm9yIHx8IGNvbXBsZXRlXG4gICAgICAgID9cbiAgICAgICAgICAgIHsgbmV4dDogb2JzZXJ2ZXJPck5leHQsIGVycm9yOiBlcnJvciwgY29tcGxldGU6IGNvbXBsZXRlIH1cbiAgICAgICAgOiBvYnNlcnZlck9yTmV4dDtcbiAgICByZXR1cm4gdGFwT2JzZXJ2ZXJcbiAgICAgICAgPyBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIChfYSA9IHRhcE9ic2VydmVyLnN1YnNjcmliZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGFwT2JzZXJ2ZXIpO1xuICAgICAgICAgICAgdmFyIGlzVW5zdWIgPSB0cnVlO1xuICAgICAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIChfYSA9IHRhcE9ic2VydmVyLm5leHQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRhcE9ic2VydmVyLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgaXNVbnN1YiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIChfYSA9IHRhcE9ic2VydmVyLmNvbXBsZXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0YXBPYnNlcnZlcik7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICBpc1Vuc3ViID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgKF9hID0gdGFwT2JzZXJ2ZXIuZXJyb3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRhcE9ic2VydmVyLCBlcnIpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgICAgIGlmIChpc1Vuc3ViKSB7XG4gICAgICAgICAgICAgICAgICAgIChfYSA9IHRhcE9ic2VydmVyLnVuc3Vic2NyaWJlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0YXBPYnNlcnZlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIChfYiA9IHRhcE9ic2VydmVyLmZpbmFsaXplKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbCh0YXBPYnNlcnZlcik7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pXG4gICAgICAgIDpcbiAgICAgICAgICAgIGlkZW50aXR5O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFwLmpzLm1hcCIsImltcG9ydCB7IENvbG9yLCBQaWVjZVR5cGUgfSBmcm9tIFwiLi9lbnVtc1wiXHJcbmltcG9ydCB7IERyaWVjdGlvbnMgfSBmcm9tIFwiLi90eXBlc1wiXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQaWVjZSB7XHJcbiAgICBjb2xvcjogQ29sb3JcclxuICAgIHg6IG51bWJlclxyXG4gICAgeTogbnVtYmVyXHJcbiAgICBkaXJlY3Rpb25zOiBEcmllY3Rpb25zXHJcbiAgICBpbWFnZVVSTDogc3RyaW5nXHJcbiAgICBwaWVjZVR5cGU6IFBpZWNlVHlwZVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNvbG9yOiBDb2xvciwgeDogbnVtYmVyLCB5OiBudW1iZXIsIHBpZWNlVHlwZTogUGllY2VUeXBlKSB7XHJcbiAgICAgICAgdGhpcy5jb2xvciA9IGNvbG9yXHJcbiAgICAgICAgdGhpcy54ID0geFxyXG4gICAgICAgIHRoaXMueSA9IHlcclxuICAgICAgICB0aGlzLnBpZWNlVHlwZSA9IHBpZWNlVHlwZVxyXG4gICAgICAgIHRoaXMuaW1hZ2VVUkwgPSBgc3JjL2Fzc2V0cy8ke2NvbG9yfSAke3BpZWNlVHlwZX0ucG5nYFxyXG4gICAgfVxyXG5cclxuICAgIHNldERpcmVjdGlvbnMoZGlyZWN0aW9uczogRHJpZWN0aW9ucyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZGlyZWN0aW9ucyA9IGRpcmVjdGlvbnNcclxuICAgIH1cclxufSIsImVudW0gUGllY2VUeXBlIHtcclxuICAgIFBBV04gPSBcInBhd25cIixcclxuICAgIEtOSUdIVCA9IFwia25pZ2h0XCIsXHJcbiAgICBCSVNIT1AgPSBcImJpc2hvcFwiLFxyXG4gICAgUk9PSyA9IFwicm9va1wiLFxyXG4gICAgUVVFRU4gPSBcInF1ZWVuXCIsXHJcbiAgICBLSU5HID0gXCJraW5nXCJcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUGllY2VUeXBlICAgICIsImltcG9ydCBQaWVjZSBmcm9tIFwiLi9QaWVjZVwiO1xyXG5pbXBvcnQgeyBDb2xvciwgUGllY2VUeXBlIH0gZnJvbSBcIi4vZW51bXNcIjtcclxuaW1wb3J0IHsgRHJpZWN0aW9ucyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXduIGV4dGVuZHMgUGllY2Uge1xyXG4gICAgI3Bhd25EaXJlY3Rpb25zOiBEcmllY3Rpb25zID0gW1sxLCAwXSwgWzIsIDBdLCBbMSwgMV0sIFsxLCAtMV1dXHJcbiAgICAjaGFzTW92ZWQ6IGJvb2xlYW4gPSBmYWxzZVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNvbG9yOiBDb2xvciwgeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICBzdXBlcihjb2xvciwgeCwgeSwgUGllY2VUeXBlLlBBV04pXHJcbiAgICAgICAgaWYgKGNvbG9yID09PSBDb2xvci5CTEFDSykge1xyXG4gICAgICAgICAgICB0aGlzLiNwYXduRGlyZWN0aW9ucyA9IHRoaXMuI3Bhd25EaXJlY3Rpb25zLm1hcChkaXJlY3Rpb24gPT4gWy0xICogZGlyZWN0aW9uWzBdLCBkaXJlY3Rpb25bMV1dKVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldERpcmVjdGlvbnModGhpcy4jcGF3bkRpcmVjdGlvbnMpXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGhhc01vdmVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNoYXNNb3ZlZFxyXG4gICAgfVxyXG5cclxuICAgIHNldCBoYXNNb3ZlZChfKSB7XHJcbiAgICAgICAgdGhpcy4jaGFzTW92ZWQgPSB0cnVlXHJcbiAgICAgICAgdGhpcy4jcGF3bkRpcmVjdGlvbnMgPSBbWzEsIDBdLCBbMSwgMV0sIFsxLCAtMV1dXHJcbiAgICAgICAgaWYgKHRoaXMuY29sb3IgPT09IENvbG9yLkJMQUNLKSB7XHJcbiAgICAgICAgICAgIHRoaXMuI3Bhd25EaXJlY3Rpb25zID0gdGhpcy5ibGFja1Bhd25EaXJlY3Rpb25zKHRoaXMuI3Bhd25EaXJlY3Rpb25zKVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldERpcmVjdGlvbnModGhpcy4jcGF3bkRpcmVjdGlvbnMpXHJcbiAgICB9XHJcblxyXG4gICAgYmxhY2tQYXduRGlyZWN0aW9ucyhwYXduRGlyZWN0aW9uczogRHJpZWN0aW9ucyk6IERyaWVjdGlvbnMge1xyXG4gICAgICAgIHJldHVybiBwYXduRGlyZWN0aW9ucy5tYXAoZGlyZWN0aW9uID0+IFstMSAqIGRpcmVjdGlvblswXSwgZGlyZWN0aW9uWzFdXSlcclxuICAgIH1cclxufSIsImltcG9ydCBQaWVjZSBmcm9tIFwiLi9QaWVjZVwiO1xyXG5pbXBvcnQgeyBDb2xvciwgUGllY2VUeXBlIH0gZnJvbSBcIi4vZW51bXNcIjtcclxuaW1wb3J0IHsgRHJpZWN0aW9ucyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCaXNob3AgZXh0ZW5kcyBQaWVjZSB7XHJcbiAgICAjYmlzaG9wRGlyZWN0aW9uczogRHJpZWN0aW9ucyA9IFtbMSwgMV0sIFsxLCAtMV0sIFstMSwgMV0sIFstMSwgLTFdXVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNvbG9yOiBDb2xvciwgeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICBzdXBlcihjb2xvciwgeCwgeSwgUGllY2VUeXBlLkJJU0hPUClcclxuICAgICAgICB0aGlzLnNldERpcmVjdGlvbnModGhpcy4jYmlzaG9wRGlyZWN0aW9ucylcclxuICAgIH1cclxufSIsImltcG9ydCBQaWVjZSBmcm9tIFwiLi9QaWVjZVwiO1xyXG5pbXBvcnQgeyBDb2xvciwgUGllY2VUeXBlIH0gZnJvbSBcIi4vZW51bXNcIjtcclxuaW1wb3J0IHsgRHJpZWN0aW9ucyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBLbmlnaHQgZXh0ZW5kcyBQaWVjZSB7XHJcbiAgICAja25pZ2h0RGlyZWN0aW9uczogRHJpZWN0aW9ucyA9IFtbMSwgMl0sIFsxLCAtMl0sIFstMSwgMl0sIFstMSwgLTJdLCBbMiwgMV0sIFsyLCAtMV0sIFstMiwgMV0sIFstMiwgLTFdXVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNvbG9yOiBDb2xvciwgeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICBzdXBlcihjb2xvciwgeCwgeSwgUGllY2VUeXBlLktOSUdIVClcclxuICAgICAgICB0aGlzLnNldERpcmVjdGlvbnModGhpcy4ja25pZ2h0RGlyZWN0aW9ucylcclxuICAgIH1cclxufSIsImltcG9ydCBQaWVjZSBmcm9tIFwiLi9QaWVjZVwiO1xyXG5pbXBvcnQgeyBDb2xvciwgUGllY2VUeXBlIH0gZnJvbSBcIi4vZW51bXNcIjtcclxuaW1wb3J0IHsgRHJpZWN0aW9ucyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb29rIGV4dGVuZHMgUGllY2Uge1xyXG4gICAgI3Jvb2tEaXJlY3Rpb25zOiBEcmllY3Rpb25zID0gW1sxLCAwXSwgWy0xLCAtMF0sIFswLCAxXSwgWzAsIC0xXV1cclxuICAgICNoYXNNb3ZlZCA9IGZhbHNlXHJcblxyXG4gICAgY29uc3RydWN0b3IoY29sb3I6IENvbG9yLCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xyXG4gICAgICAgIHN1cGVyKGNvbG9yLCB4LCB5LCBQaWVjZVR5cGUuUk9PSylcclxuICAgICAgICB0aGlzLnNldERpcmVjdGlvbnModGhpcy4jcm9va0RpcmVjdGlvbnMpXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGhhc01vdmVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNoYXNNb3ZlZFxyXG4gICAgfVxyXG5cclxuICAgIHNldCBoYXNNb3ZlZChfKSB7XHJcbiAgICAgICAgdGhpcy4jaGFzTW92ZWQgPSB0cnVlXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUGllY2UgZnJvbSBcIi4vUGllY2VcIjtcclxuaW1wb3J0IHsgQ29sb3IsIFBpZWNlVHlwZSB9IGZyb20gXCIuL2VudW1zXCI7XHJcbmltcG9ydCB7IERyaWVjdGlvbnMgfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUXVlZW4gZXh0ZW5kcyBQaWVjZSB7XHJcbiAgICAjcXVlZW5EaXJlY3Rpb25zOiBEcmllY3Rpb25zID0gW1swLCAxXSwgWzAsIC0xXSwgWzEsIDBdLCBbMSwgMV0sIFsxLCAtMV0sIFstMSwgMF0sIFstMSwgMV0sIFstMSwgLTFdXVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNvbG9yOiBDb2xvciwgeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICBzdXBlcihjb2xvciwgeCwgeSwgUGllY2VUeXBlLlFVRUVOKVxyXG4gICAgICAgIHRoaXMuc2V0RGlyZWN0aW9ucyh0aGlzLiNxdWVlbkRpcmVjdGlvbnMpXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUGllY2UgZnJvbSBcIi4vUGllY2VcIlxyXG5pbXBvcnQgeyBDb2xvciwgUGllY2VUeXBlIH0gZnJvbSBcIi4vZW51bXNcIlxyXG5pbXBvcnQgeyBEcmllY3Rpb25zIH0gZnJvbSBcIi4vdHlwZXNcIlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgS2luZyBleHRlbmRzIFBpZWNlIHtcclxuICAgICNraW5nRGlyZWN0aW9uczogRHJpZWN0aW9ucyA9IFtbMCwgMV0sIFswLCAtMV0sIFsxLCAwXSwgWzEsIDFdLCBbMSwgLTFdLCBbLTEsIDBdLCBbLTEsIDFdLCBbLTEsIC0xXV1cclxuICAgICNoYXNNb3ZlZCA9IGZhbHNlXHJcblxyXG4gICAgY29uc3RydWN0b3IoY29sb3I6IENvbG9yLCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xyXG4gICAgICAgIHN1cGVyKGNvbG9yLCB4LCB5LCBQaWVjZVR5cGUuS0lORylcclxuICAgICAgICB0aGlzLnNldERpcmVjdGlvbnModGhpcy4ja2luZ0RpcmVjdGlvbnMpXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGhhc01vdmVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNoYXNNb3ZlZFxyXG4gICAgfVxyXG5cclxuICAgIHNldCBoYXNNb3ZlZChfKSB7XHJcbiAgICAgICAgdGhpcy4jaGFzTW92ZWQgPSB0cnVlXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBjcmVhdGVFcnJvckNsYXNzIH0gZnJvbSAnLi9jcmVhdGVFcnJvckNsYXNzJztcbmV4cG9ydCB2YXIgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgPSBjcmVhdGVFcnJvckNsYXNzKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JJbXBsKCkge1xuICAgICAgICBfc3VwZXIodGhpcyk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdPYmplY3RVbnN1YnNjcmliZWRFcnJvcic7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9ICdvYmplY3QgdW5zdWJzY3JpYmVkJztcbiAgICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYmplY3RVbnN1YnNjcmliZWRFcnJvci5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMsIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiwgRU1QVFlfU1VCU0NSSVBUSU9OIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgfSBmcm9tICcuL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3InO1xuaW1wb3J0IHsgYXJyUmVtb3ZlIH0gZnJvbSAnLi91dGlsL2FyclJlbW92ZSc7XG5pbXBvcnQgeyBlcnJvckNvbnRleHQgfSBmcm9tICcuL3V0aWwvZXJyb3JDb250ZXh0JztcbnZhciBTdWJqZWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJqZWN0KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuY3VycmVudE9ic2VydmVycyA9IG51bGw7XG4gICAgICAgIF90aGlzLm9ic2VydmVycyA9IFtdO1xuICAgICAgICBfdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaGFzRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMudGhyb3duRXJyb3IgPSBudWxsO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YmplY3QucHJvdG90eXBlLmxpZnQgPSBmdW5jdGlvbiAob3BlcmF0b3IpIHtcbiAgICAgICAgdmFyIHN1YmplY3QgPSBuZXcgQW5vbnltb3VzU3ViamVjdCh0aGlzLCB0aGlzKTtcbiAgICAgICAgc3ViamVjdC5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICByZXR1cm4gc3ViamVjdDtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLl90aHJvd0lmQ2xvc2VkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGVycm9yQ29udGV4dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgICAgIF90aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuY3VycmVudE9ic2VydmVycykge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jdXJyZW50T2JzZXJ2ZXJzID0gQXJyYXkuZnJvbShfdGhpcy5vYnNlcnZlcnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKF90aGlzLmN1cnJlbnRPYnNlcnZlcnMpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBfYy52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgZXJyb3JDb250ZXh0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmhhc0Vycm9yID0gX3RoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfdGhpcy50aHJvd25FcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gX3RoaXMub2JzZXJ2ZXJzO1xuICAgICAgICAgICAgICAgIHdoaWxlIChvYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVycy5zaGlmdCgpLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBlcnJvckNvbnRleHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgICAgIGlmICghX3RoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gX3RoaXMub2JzZXJ2ZXJzO1xuICAgICAgICAgICAgICAgIHdoaWxlIChvYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVycy5zaGlmdCgpLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSB0aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBudWxsO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN1YmplY3QucHJvdG90eXBlLCBcIm9ic2VydmVkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICByZXR1cm4gKChfYSA9IHRoaXMub2JzZXJ2ZXJzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGVuZ3RoKSA+IDA7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlLmNhbGwodGhpcywgc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICB0aGlzLl9jaGVja0ZpbmFsaXplZFN0YXR1c2VzKHN1YnNjcmliZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5faW5uZXJTdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5faW5uZXJTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBoYXNFcnJvciA9IF9hLmhhc0Vycm9yLCBpc1N0b3BwZWQgPSBfYS5pc1N0b3BwZWQsIG9ic2VydmVycyA9IF9hLm9ic2VydmVycztcbiAgICAgICAgaWYgKGhhc0Vycm9yIHx8IGlzU3RvcHBlZCkge1xuICAgICAgICAgICAgcmV0dXJuIEVNUFRZX1NVQlNDUklQVElPTjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBudWxsO1xuICAgICAgICBvYnNlcnZlcnMucHVzaChzdWJzY3JpYmVyKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuY3VycmVudE9ic2VydmVycyA9IG51bGw7XG4gICAgICAgICAgICBhcnJSZW1vdmUob2JzZXJ2ZXJzLCBzdWJzY3JpYmVyKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fY2hlY2tGaW5hbGl6ZWRTdGF0dXNlcyA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGhhc0Vycm9yID0gX2EuaGFzRXJyb3IsIHRocm93bkVycm9yID0gX2EudGhyb3duRXJyb3IsIGlzU3RvcHBlZCA9IF9hLmlzU3RvcHBlZDtcbiAgICAgICAgaWYgKGhhc0Vycm9yKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKHRocm93bkVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuYXNPYnNlcnZhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgfTtcbiAgICBTdWJqZWN0LmNyZWF0ZSA9IGZ1bmN0aW9uIChkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBuZXcgQW5vbnltb3VzU3ViamVjdChkZXN0aW5hdGlvbiwgc291cmNlKTtcbiAgICB9O1xuICAgIHJldHVybiBTdWJqZWN0O1xufShPYnNlcnZhYmxlKSk7XG5leHBvcnQgeyBTdWJqZWN0IH07XG52YXIgQW5vbnltb3VzU3ViamVjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFub255bW91c1N1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQW5vbnltb3VzU3ViamVjdChkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgIF90aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuZGVzdGluYXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uZXh0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgdmFsdWUpO1xuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuZGVzdGluYXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5lcnJvcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIGVycik7XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5kZXN0aW5hdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvbXBsZXRlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuIChfYiA9IChfYSA9IHRoaXMuc291cmNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3Vic2NyaWJlKHN1YnNjcmliZXIpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBFTVBUWV9TVUJTQ1JJUFRJT047XG4gICAgfTtcbiAgICByZXR1cm4gQW5vbnltb3VzU3ViamVjdDtcbn0oU3ViamVjdCkpO1xuZXhwb3J0IHsgQW5vbnltb3VzU3ViamVjdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3ViamVjdC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuL1N1YmplY3QnO1xudmFyIEJlaGF2aW9yU3ViamVjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJlaGF2aW9yU3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCZWhhdmlvclN1YmplY3QoX3ZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl92YWx1ZSA9IF92YWx1ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZSwgXCJ2YWx1ZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBfc3VwZXIucHJvdG90eXBlLl9zdWJzY3JpYmUuY2FsbCh0aGlzLCBzdWJzY3JpYmVyKTtcbiAgICAgICAgIXN1YnNjcmlwdGlvbi5jbG9zZWQgJiYgc3Vic2NyaWJlci5uZXh0KHRoaXMuX3ZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGhhc0Vycm9yID0gX2EuaGFzRXJyb3IsIHRocm93bkVycm9yID0gX2EudGhyb3duRXJyb3IsIF92YWx1ZSA9IF9hLl92YWx1ZTtcbiAgICAgICAgaWYgKGhhc0Vycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyB0aHJvd25FcnJvcjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgIHJldHVybiBfdmFsdWU7XG4gICAgfTtcbiAgICBCZWhhdmlvclN1YmplY3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5uZXh0LmNhbGwodGhpcywgKHRoaXMuX3ZhbHVlID0gdmFsdWUpKTtcbiAgICB9O1xuICAgIHJldHVybiBCZWhhdmlvclN1YmplY3Q7XG59KFN1YmplY3QpKTtcbmV4cG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmVoYXZpb3JTdWJqZWN0LmpzLm1hcCIsInZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZiwgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlLCBnZXRLZXlzID0gT2JqZWN0LmtleXM7XG5leHBvcnQgZnVuY3Rpb24gYXJnc0FyZ0FycmF5T3JPYmplY3QoYXJncykge1xuICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB2YXIgZmlyc3RfMSA9IGFyZ3NbMF07XG4gICAgICAgIGlmIChpc0FycmF5KGZpcnN0XzEpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBhcmdzOiBmaXJzdF8xLCBrZXlzOiBudWxsIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUE9KTyhmaXJzdF8xKSkge1xuICAgICAgICAgICAgdmFyIGtleXMgPSBnZXRLZXlzKGZpcnN0XzEpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhcmdzOiBrZXlzLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBmaXJzdF8xW2tleV07IH0pLFxuICAgICAgICAgICAgICAgIGtleXM6IGtleXMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IGFyZ3M6IGFyZ3MsIGtleXM6IG51bGwgfTtcbn1cbmZ1bmN0aW9uIGlzUE9KTyhvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIGdldFByb3RvdHlwZU9mKG9iaikgPT09IG9iamVjdFByb3RvO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJnc0FyZ0FycmF5T3JPYmplY3QuanMubWFwIiwiaW1wb3J0IHsgZXhlY3V0ZVNjaGVkdWxlIH0gZnJvbSAnLi4vdXRpbC9leGVjdXRlU2NoZWR1bGUnO1xuaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gb2JzZXJ2ZU9uKHNjaGVkdWxlciwgZGVsYXkpIHtcbiAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5uZXh0KHZhbHVlKTsgfSwgZGVsYXkpOyB9LCBmdW5jdGlvbiAoKSB7IHJldHVybiBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7IHJldHVybiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7IH0sIGRlbGF5KTsgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9LCBkZWxheSk7IH0pKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmVPbi5qcy5tYXAiLCJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmV4cG9ydCBmdW5jdGlvbiBzdWJzY3JpYmVPbihzY2hlZHVsZXIsIGRlbGF5KSB7XG4gICAgaWYgKGRlbGF5ID09PSB2b2lkIDApIHsgZGVsYXkgPSAwOyB9XG4gICAgcmV0dXJuIG9wZXJhdGUoZnVuY3Rpb24gKHNvdXJjZSwgc3Vic2NyaWJlcikge1xuICAgICAgICBzdWJzY3JpYmVyLmFkZChzY2hlZHVsZXIuc2NoZWR1bGUoZnVuY3Rpb24gKCkgeyByZXR1cm4gc291cmNlLnN1YnNjcmliZShzdWJzY3JpYmVyKTsgfSwgZGVsYXkpKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN1YnNjcmliZU9uLmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IGV4ZWN1dGVTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZUFzeW5jSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIGlmICghaW5wdXQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJdGVyYWJsZSBjYW5ub3QgYmUgbnVsbCcpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGl0ZXJhdG9yID0gaW5wdXRbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7XG4gICAgICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaXRlcmF0b3IubmV4dCgpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChyZXN1bHQudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LCAwLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZUFzeW5jSXRlcmFibGUuanMubWFwIiwiaW1wb3J0IHsgc2NoZWR1bGVkIH0gZnJvbSAnLi4vc2NoZWR1bGVkL3NjaGVkdWxlZCc7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuL2lubmVyRnJvbSc7XG5leHBvcnQgZnVuY3Rpb24gZnJvbShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIHNjaGVkdWxlciA/IHNjaGVkdWxlZChpbnB1dCwgc2NoZWR1bGVyKSA6IGlubmVyRnJvbShpbnB1dCk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mcm9tLmpzLm1hcCIsImltcG9ydCB7IHNjaGVkdWxlT2JzZXJ2YWJsZSB9IGZyb20gJy4vc2NoZWR1bGVPYnNlcnZhYmxlJztcbmltcG9ydCB7IHNjaGVkdWxlUHJvbWlzZSB9IGZyb20gJy4vc2NoZWR1bGVQcm9taXNlJztcbmltcG9ydCB7IHNjaGVkdWxlQXJyYXkgfSBmcm9tICcuL3NjaGVkdWxlQXJyYXknO1xuaW1wb3J0IHsgc2NoZWR1bGVJdGVyYWJsZSB9IGZyb20gJy4vc2NoZWR1bGVJdGVyYWJsZSc7XG5pbXBvcnQgeyBzY2hlZHVsZUFzeW5jSXRlcmFibGUgfSBmcm9tICcuL3NjaGVkdWxlQXN5bmNJdGVyYWJsZSc7XG5pbXBvcnQgeyBpc0ludGVyb3BPYnNlcnZhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0ludGVyb3BPYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzUHJvbWlzZSB9IGZyb20gJy4uL3V0aWwvaXNQcm9taXNlJztcbmltcG9ydCB7IGlzQXJyYXlMaWtlIH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5TGlrZSc7XG5pbXBvcnQgeyBpc0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0l0ZXJhYmxlJztcbmltcG9ydCB7IGlzQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNBc3luY0l0ZXJhYmxlJztcbmltcG9ydCB7IGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yIH0gZnJvbSAnLi4vdXRpbC90aHJvd1Vub2JzZXJ2YWJsZUVycm9yJztcbmltcG9ydCB7IGlzUmVhZGFibGVTdHJlYW1MaWtlIH0gZnJvbSAnLi4vdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZSc7XG5pbXBvcnQgeyBzY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZSB9IGZyb20gJy4vc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UnO1xuZXhwb3J0IGZ1bmN0aW9uIHNjaGVkdWxlZChpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVPYnNlcnZhYmxlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5TGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzY2hlZHVsZUFycmF5KGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Byb21pc2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVQcm9taXNlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FzeW5jSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gc2NoZWR1bGVBc3luY0l0ZXJhYmxlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlSXRlcmFibGUoaW5wdXQsIHNjaGVkdWxlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0LCBzY2hlZHVsZXIpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlZC5qcy5tYXAiLCJpbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBvYnNlcnZlT24gfSBmcm9tICcuLi9vcGVyYXRvcnMvb2JzZXJ2ZU9uJztcbmltcG9ydCB7IHN1YnNjcmliZU9uIH0gZnJvbSAnLi4vb3BlcmF0b3JzL3N1YnNjcmliZU9uJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZU9ic2VydmFibGUoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBpbm5lckZyb20oaW5wdXQpLnBpcGUoc3Vic2NyaWJlT24oc2NoZWR1bGVyKSwgb2JzZXJ2ZU9uKHNjaGVkdWxlcikpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVPYnNlcnZhYmxlLmpzLm1hcCIsImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlZHVsZUFycmF5KGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpID09PSBpbnB1dC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoaW5wdXRbaSsrXSk7XG4gICAgICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjaGVkdWxlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlQXJyYXkuanMubWFwIiwiaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgb2JzZXJ2ZU9uIH0gZnJvbSAnLi4vb3BlcmF0b3JzL29ic2VydmVPbic7XG5pbXBvcnQgeyBzdWJzY3JpYmVPbiB9IGZyb20gJy4uL29wZXJhdG9ycy9zdWJzY3JpYmVPbic7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVQcm9taXNlKGlucHV0LCBzY2hlZHVsZXIpIHtcbiAgICByZXR1cm4gaW5uZXJGcm9tKGlucHV0KS5waXBlKHN1YnNjcmliZU9uKHNjaGVkdWxlciksIG9ic2VydmVPbihzY2hlZHVsZXIpKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVkdWxlUHJvbWlzZS5qcy5tYXAiLCJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpdGVyYXRvciBhcyBTeW1ib2xfaXRlcmF0b3IgfSBmcm9tICcuLi9zeW1ib2wvaXRlcmF0b3InO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4uL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBleGVjdXRlU2NoZWR1bGUgfSBmcm9tICcuLi91dGlsL2V4ZWN1dGVTY2hlZHVsZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVJdGVyYWJsZShpbnB1dCwgc2NoZWR1bGVyKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBpdGVyYXRvcjtcbiAgICAgICAgZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXRlcmF0b3IgPSBpbnB1dFtTeW1ib2xfaXRlcmF0b3JdKCk7XG4gICAgICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaWJlciwgc2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgZG9uZTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAoX2EgPSBpdGVyYXRvci5uZXh0KCksIHZhbHVlID0gX2EudmFsdWUsIGRvbmUgPSBfYS5kb25lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAwLCB0cnVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc0Z1bmN0aW9uKGl0ZXJhdG9yID09PSBudWxsIHx8IGl0ZXJhdG9yID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpdGVyYXRvci5yZXR1cm4pICYmIGl0ZXJhdG9yLnJldHVybigpOyB9O1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2NoZWR1bGVJdGVyYWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBzY2hlZHVsZUFzeW5jSXRlcmFibGUgfSBmcm9tICcuL3NjaGVkdWxlQXN5bmNJdGVyYWJsZSc7XG5pbXBvcnQgeyByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIH0gZnJvbSAnLi4vdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZSc7XG5leHBvcnQgZnVuY3Rpb24gc2NoZWR1bGVSZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQsIHNjaGVkdWxlcikge1xuICAgIHJldHVybiBzY2hlZHVsZUFzeW5jSXRlcmFibGUocmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcihpbnB1dCksIHNjaGVkdWxlcik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlZHVsZVJlYWRhYmxlU3RyZWFtTGlrZS5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGlzU2NoZWR1bGVyIH0gZnJvbSAnLi9pc1NjaGVkdWxlcic7XG5mdW5jdGlvbiBsYXN0KGFycikge1xuICAgIHJldHVybiBhcnJbYXJyLmxlbmd0aCAtIDFdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBvcFJlc3VsdFNlbGVjdG9yKGFyZ3MpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihsYXN0KGFyZ3MpKSA/IGFyZ3MucG9wKCkgOiB1bmRlZmluZWQ7XG59XG5leHBvcnQgZnVuY3Rpb24gcG9wU2NoZWR1bGVyKGFyZ3MpIHtcbiAgICByZXR1cm4gaXNTY2hlZHVsZXIobGFzdChhcmdzKSkgPyBhcmdzLnBvcCgpIDogdW5kZWZpbmVkO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBvcE51bWJlcihhcmdzLCBkZWZhdWx0VmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIGxhc3QoYXJncykgPT09ICdudW1iZXInID8gYXJncy5wb3AoKSA6IGRlZmF1bHRWYWx1ZTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyZ3MuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgYXJnc0FyZ0FycmF5T3JPYmplY3QgfSBmcm9tICcuLi91dGlsL2FyZ3NBcmdBcnJheU9yT2JqZWN0JztcbmltcG9ydCB7IGZyb20gfSBmcm9tICcuL2Zyb20nO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi91dGlsL2lkZW50aXR5JztcbmltcG9ydCB7IG1hcE9uZU9yTWFueUFyZ3MgfSBmcm9tICcuLi91dGlsL21hcE9uZU9yTWFueUFyZ3MnO1xuaW1wb3J0IHsgcG9wUmVzdWx0U2VsZWN0b3IsIHBvcFNjaGVkdWxlciB9IGZyb20gJy4uL3V0aWwvYXJncyc7XG5pbXBvcnQgeyBjcmVhdGVPYmplY3QgfSBmcm9tICcuLi91dGlsL2NyZWF0ZU9iamVjdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuLi9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyJztcbmltcG9ydCB7IGV4ZWN1dGVTY2hlZHVsZSB9IGZyb20gJy4uL3V0aWwvZXhlY3V0ZVNjaGVkdWxlJztcbmV4cG9ydCBmdW5jdGlvbiBjb21iaW5lTGF0ZXN0KCkge1xuICAgIHZhciBhcmdzID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICB2YXIgc2NoZWR1bGVyID0gcG9wU2NoZWR1bGVyKGFyZ3MpO1xuICAgIHZhciByZXN1bHRTZWxlY3RvciA9IHBvcFJlc3VsdFNlbGVjdG9yKGFyZ3MpO1xuICAgIHZhciBfYSA9IGFyZ3NBcmdBcnJheU9yT2JqZWN0KGFyZ3MpLCBvYnNlcnZhYmxlcyA9IF9hLmFyZ3MsIGtleXMgPSBfYS5rZXlzO1xuICAgIGlmIChvYnNlcnZhYmxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZyb20oW10sIHNjaGVkdWxlcik7XG4gICAgfVxuICAgIHZhciByZXN1bHQgPSBuZXcgT2JzZXJ2YWJsZShjb21iaW5lTGF0ZXN0SW5pdChvYnNlcnZhYmxlcywgc2NoZWR1bGVyLCBrZXlzXG4gICAgICAgID9cbiAgICAgICAgICAgIGZ1bmN0aW9uICh2YWx1ZXMpIHsgcmV0dXJuIGNyZWF0ZU9iamVjdChrZXlzLCB2YWx1ZXMpOyB9XG4gICAgICAgIDpcbiAgICAgICAgICAgIGlkZW50aXR5KSk7XG4gICAgcmV0dXJuIHJlc3VsdFNlbGVjdG9yID8gcmVzdWx0LnBpcGUobWFwT25lT3JNYW55QXJncyhyZXN1bHRTZWxlY3RvcikpIDogcmVzdWx0O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbWJpbmVMYXRlc3RJbml0KG9ic2VydmFibGVzLCBzY2hlZHVsZXIsIHZhbHVlVHJhbnNmb3JtKSB7XG4gICAgaWYgKHZhbHVlVHJhbnNmb3JtID09PSB2b2lkIDApIHsgdmFsdWVUcmFuc2Zvcm0gPSBpZGVudGl0eTsgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICBtYXliZVNjaGVkdWxlKHNjaGVkdWxlciwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IG9ic2VydmFibGVzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgICAgICAgICAgIHZhciBhY3RpdmUgPSBsZW5ndGg7XG4gICAgICAgICAgICB2YXIgcmVtYWluaW5nRmlyc3RWYWx1ZXMgPSBsZW5ndGg7XG4gICAgICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgICAgbWF5YmVTY2hlZHVsZShzY2hlZHVsZXIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNvdXJjZSA9IGZyb20ob2JzZXJ2YWJsZXNbaV0sIHNjaGVkdWxlcik7XG4gICAgICAgICAgICAgICAgICAgIHZhciBoYXNGaXJzdFZhbHVlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZS5zdWJzY3JpYmUoY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWVzW2ldID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWhhc0ZpcnN0VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNGaXJzdFZhbHVlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1haW5pbmdGaXJzdFZhbHVlcy0tO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZW1haW5pbmdGaXJzdFZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZVRyYW5zZm9ybSh2YWx1ZXMuc2xpY2UoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIS0tYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgfSwgc3Vic2NyaWJlcik7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIF9sb29wXzEoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIHN1YnNjcmliZXIpO1xuICAgIH07XG59XG5mdW5jdGlvbiBtYXliZVNjaGVkdWxlKHNjaGVkdWxlciwgZXhlY3V0ZSwgc3Vic2NyaXB0aW9uKSB7XG4gICAgaWYgKHNjaGVkdWxlcikge1xuICAgICAgICBleGVjdXRlU2NoZWR1bGUoc3Vic2NyaXB0aW9uLCBzY2hlZHVsZXIsIGV4ZWN1dGUpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgZXhlY3V0ZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbWJpbmVMYXRlc3QuanMubWFwIiwiaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNTY2hlZHVsZXIodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5zY2hlZHVsZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc1NjaGVkdWxlci5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlT2JqZWN0KGtleXMsIHZhbHVlcykge1xuICAgIHJldHVybiBrZXlzLnJlZHVjZShmdW5jdGlvbiAocmVzdWx0LCBrZXksIGkpIHsgcmV0dXJuICgocmVzdWx0W2tleV0gPSB2YWx1ZXNbaV0pLCByZXN1bHQpOyB9LCB7fSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVPYmplY3QuanMubWFwIiwiaW1wb3J0IHsgb3BlcmF0ZSB9IGZyb20gJy4uL3V0aWwvbGlmdCc7XG5pbXBvcnQgeyBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIgfSBmcm9tICcuL09wZXJhdG9yU3Vic2NyaWJlcic7XG5leHBvcnQgZnVuY3Rpb24gZmlsdGVyKHByZWRpY2F0ZSwgdGhpc0FyZykge1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBwcmVkaWNhdGUuY2FsbCh0aGlzQXJnLCB2YWx1ZSwgaW5kZXgrKykgJiYgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTsgfSkpO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsdGVyLmpzLm1hcCIsImltcG9ydCB7IGZyb21FdmVudCwgdGFwIH0gZnJvbSBcInJ4anNcIjtcclxuaW1wb3J0IENoZXNzQm9hcmQgZnJvbSBcIi4vY29tcG9uZW50cy9DaGVzc2JvYXJkXCI7XHJcblxyXG5jb25zdCBjaGVzc0JvYXJkID0gbmV3IENoZXNzQm9hcmQoKVxyXG5cclxuZnJvbUV2ZW50KGRvY3VtZW50LCBcImNvbnRleHRtZW51XCIpLnBpcGUoXHJcbiAgICB0YXAoZXZlbnQgPT4gZXZlbnQucHJldmVudERlZmF1bHQoKSlcclxuKS5zdWJzY3JpYmUoKVxyXG5cclxuZnJvbUV2ZW50KGRvY3VtZW50LCBcImRyYWdzdGFydFwiKS5waXBlKFxyXG4gICAgdGFwKGV2ZW50ID0+IGV2ZW50LnByZXZlbnREZWZhdWx0KCkpXHJcbikuc3Vic2NyaWJlKCkiLCJpbXBvcnQgUGF3biBmcm9tICcuL1Bhd24nXHJcbmltcG9ydCBCaXNob3AgZnJvbSAnLi9CaXNob3AnXHJcbmltcG9ydCBLbmlnaHQgZnJvbSAnLi9LbmlnaHQnXHJcbmltcG9ydCBSb29rIGZyb20gJy4vUm9vaydcclxuaW1wb3J0IFF1ZWVuIGZyb20gJy4vUXVlZW4nXHJcbmltcG9ydCBLaW5nIGZyb20gJy4vS2luZydcclxuaW1wb3J0IFBpZWNlIGZyb20gJy4vUGllY2UnXHJcbmltcG9ydCB7IENvbG9yLCBQaWVjZVR5cGUgfSBmcm9tICcuL2VudW1zJ1xyXG5pbXBvcnQgeyBjaGVzc1BpZWNlLCBjaGVzc0JvYXJkLCBMaXN0T2ZBbGxBdmFpbGFibGVTcXVhcmVzIH0gZnJvbSAnLi90eXBlcydcclxuaW1wb3J0IHsgSUxhc3RNb3ZlIH0gZnJvbSAnLi9pbnRlcmZhY2VzJ1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBCZWhhdmlvclN1YmplY3QsIGZyb21FdmVudCwgY29tYmluZUxhdGVzdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBmaWx0ZXIsIG1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hlc3NCb2FyZCB7XHJcbiAgICAjYm9hcmRQb3NpdGlvbjogY2hlc3NCb2FyZFxyXG4gICAgLy8gcmVmZXJlbmNhIG5hIHNhaG92c2thIHBvbGphXHJcbiAgICAjYm9hcmRFbGVtZW50czogSFRNTFRhYmxlQ2VsbEVsZW1lbnRbXVtdID0gQXJyYXkoOCkuZmlsbCgwKS5tYXAoKCkgPT4gQXJyYXkoOCkuZmlsbCgwKSlcclxuICAgICNpc1doaXRlTW92ZSQ6IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPiA9IG5ldyBCZWhhdmlvclN1YmplY3Q8Ym9vbGVhbj4odHJ1ZSlcclxuICAgICNwbGF5ZXJDb2xvciQ6IEJlaGF2aW9yU3ViamVjdDxDb2xvcj4gPSBuZXcgQmVoYXZpb3JTdWJqZWN0PENvbG9yPihDb2xvci5XSElURSlcclxuICAgICNsYXN0TW92ZTogSUxhc3RNb3ZlXHJcblxyXG4gICAgI3NxdWFyZXM6IEhUTUxUYWJsZUNlbGxFbGVtZW50W107XHJcbiAgICAjc3F1YXJlJDogT2JzZXJ2YWJsZTxFdmVudD5cclxuXHJcbiAgICAjZW5hYmxlUGxhY2luZ1BpZWNlJDogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPih0cnVlKVxyXG4gICAgI3dob0lzUGxheWluZyQ6IEJlaGF2aW9yU3ViamVjdDxzdHJpbmc+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxzdHJpbmc+KFwiXCIpXHJcblxyXG4gICAgI3NhZmVNb3ZlcyQ6IEJlaGF2aW9yU3ViamVjdDxMaXN0T2ZBbGxBdmFpbGFibGVTcXVhcmVzPlxyXG5cclxuICAgIC8vIFNpbmdsZXRvbiBvYnJzemFjIGplciB6ZWxpbSBkYSBpbWFtIHNhbW8gamVkbnUgaW5zdGFuY3UsIHBhIG9uZGEgbW9yYW0gZGEgc3RhdmltIGRhIGJ1ZGUgemFwcmF2byBwcml2YXRuaSBrb25zdHJ1a3RvclxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy4jYm9hcmRQb3NpdGlvbiA9IFtcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgbmV3IFJvb2soQ29sb3IuV0hJVEUsIDAsIDApLCBuZXcgS25pZ2h0KENvbG9yLldISVRFLCAwLCAxKSwgbmV3IEJpc2hvcChDb2xvci5XSElURSwgMCwgMiksIG5ldyBRdWVlbihDb2xvci5XSElURSwgMCwgMyksXHJcbiAgICAgICAgICAgICAgICBuZXcgS2luZyhDb2xvci5XSElURSwgMCwgNCksIG5ldyBCaXNob3AoQ29sb3IuV0hJVEUsIDAsIDUpLCBuZXcgS25pZ2h0KENvbG9yLldISVRFLCAwLCA2KSwgbmV3IFJvb2soQ29sb3IuV0hJVEUsIDAsIDcpXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIG5ldyBQYXduKENvbG9yLldISVRFLCAxLCAwKSwgbmV3IFBhd24oQ29sb3IuV0hJVEUsIDEsIDEpLCBuZXcgUGF3bihDb2xvci5XSElURSwgMSwgMiksIG5ldyBQYXduKENvbG9yLldISVRFLCAxLCAzKSxcclxuICAgICAgICAgICAgICAgIG5ldyBQYXduKENvbG9yLldISVRFLCAxLCA0KSwgbmV3IFBhd24oQ29sb3IuV0hJVEUsIDEsIDUpLCBuZXcgUGF3bihDb2xvci5XSElURSwgMSwgNiksIG5ldyBQYXduKENvbG9yLldISVRFLCAxLCA3KVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbF0sXHJcbiAgICAgICAgICAgIFtudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsXSxcclxuICAgICAgICAgICAgW251bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGxdLFxyXG4gICAgICAgICAgICBbbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbF0sXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIG5ldyBQYXduKENvbG9yLkJMQUNLLCA2LCAwKSwgbmV3IFBhd24oQ29sb3IuQkxBQ0ssIDYsIDEpLCBuZXcgUGF3bihDb2xvci5CTEFDSywgNiwgMiksIG5ldyBQYXduKENvbG9yLkJMQUNLLCA2LCAzKSxcclxuICAgICAgICAgICAgICAgIG5ldyBQYXduKENvbG9yLkJMQUNLLCA2LCA0KSwgbmV3IFBhd24oQ29sb3IuQkxBQ0ssIDYsIDUpLCBuZXcgUGF3bihDb2xvci5CTEFDSywgNiwgNiksIG5ldyBQYXduKENvbG9yLkJMQUNLLCA2LCA3KVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICBuZXcgUm9vayhDb2xvci5CTEFDSywgNywgMCksIG5ldyBLbmlnaHQoQ29sb3IuQkxBQ0ssIDcsIDEpLCBuZXcgQmlzaG9wKENvbG9yLkJMQUNLLCA3LCAyKSwgbmV3IFF1ZWVuKENvbG9yLkJMQUNLLCA3LCAzKSxcclxuICAgICAgICAgICAgICAgIG5ldyBLaW5nKENvbG9yLkJMQUNLLCA3LCA0KSwgbmV3IEJpc2hvcChDb2xvci5CTEFDSywgNywgNSksIG5ldyBLbmlnaHQoQ29sb3IuQkxBQ0ssIDcsIDYpLCBuZXcgUm9vayhDb2xvci5CTEFDSywgNywgNylcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICBdXHJcbiAgICAgICAgdGhpcy5jcmVhdGVDaGVzc0JvYXJkKClcclxuICAgICAgICB0aGlzLnN0YXJ0R2FtZSgpXHJcbiAgICB9XHJcblxyXG4gICAgY3JlYXRlQ2hlc3NCb2FyZCgpOiB2b2lkIHtcclxuICAgICAgICBjb25zdCBjaGVzc1RhYmxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRhYmxlXCIpIGFzIEhUTUxUYWJsZUVsZW1lbnRcclxuICAgICAgICBjaGVzc1RhYmxlLmNsYXNzTGlzdC5hZGQoXCJjaGVzcy1ib2FyZFwiKVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpOiBudW1iZXIgPSA3OyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICBjb25zdCByb3cgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidHJcIikgYXMgSFRNTFRhYmxlUm93RWxlbWVudFxyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgajogbnVtYmVyID0gMDsgaiA8IDg7IGorKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3F1YXJlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRoXCIpIGFzIEhUTUxUYWJsZUNlbGxFbGVtZW50XHJcbiAgICAgICAgICAgICAgICBzcXVhcmUuY2xhc3NMaXN0LmFkZCghKGkgJSAyKSAmJiAhKGogJSAyKSB8fCBpICUgMiAmJiBqICUgMiA/IFwiZGFya1wiIDogXCJsaWdodFwiKVxyXG4gICAgICAgICAgICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcInhcIiwgaS50b1N0cmluZygpKVxyXG4gICAgICAgICAgICAgICAgc3F1YXJlLnNldEF0dHJpYnV0ZShcInlcIiwgai50b1N0cmluZygpKVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRQaWVjZTogY2hlc3NQaWVjZSA9IHRoaXMuI2JvYXJkUG9zaXRpb25baV1bal1cclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UGllY2UgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwaWVjZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIikgYXMgSFRNTEltYWdlRWxlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgIHBpZWNlLnNyYyA9IGN1cnJlbnRQaWVjZS5pbWFnZVVSTFxyXG4gICAgICAgICAgICAgICAgICAgIHBpZWNlLmFsdCA9IGN1cnJlbnRQaWVjZS5jb2xvciArIFwiIFwiICsgY3VycmVudFBpZWNlLnBpZWNlVHlwZVxyXG4gICAgICAgICAgICAgICAgICAgIHBpZWNlLnNldEF0dHJpYnV0ZShcImNvbG9yXCIsIGN1cnJlbnRQaWVjZS5jb2xvcilcclxuICAgICAgICAgICAgICAgICAgICBzcXVhcmUuYXBwZW5kQ2hpbGQocGllY2UpXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKHNxdWFyZSlcclxuICAgICAgICAgICAgICAgIHRoaXMuI2JvYXJkRWxlbWVudHNbaV1bal0gPSBzcXVhcmVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjaGVzc1RhYmxlLmFwcGVuZENoaWxkKHJvdylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHdob0lzUGxheWluZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMlwiKSBhcyBIVE1MSGVhZGluZ0VsZW1lbnRcclxuICAgICAgICB3aG9Jc1BsYXlpbmcuY2xhc3NMaXN0LmFkZChcIndob0lzUGxheWluZ1wiKVxyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQod2hvSXNQbGF5aW5nKVxyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY2hlc3NUYWJsZSlcclxuICAgIH1cclxuXHJcbiAgICBpc1NxdWFyZVZhbGlkKHg6IG51bWJlciwgeTogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHggPj0gMCAmJiB5ID49IDAgJiYgeCA8IDggJiYgeSA8IDhcclxuICAgIH1cclxuXHJcbiAgICBzdGFydEdhbWUoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy4jc2FmZU1vdmVzJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8TGlzdE9mQWxsQXZhaWxhYmxlU3F1YXJlcz4odGhpcy5maW5kQXZhaWxhYmxlU3F1YXJlcyhDb2xvci5XSElURSkpXHJcbiAgICAgICAgdGhpcy4jc3F1YXJlcyA9IFsuLi5kb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFwidGhcIildIGFzIEhUTUxUYWJsZUNlbGxFbGVtZW50W11cclxuICAgICAgICB0aGlzLiNzcXVhcmUkID0gZnJvbUV2ZW50KHRoaXMuI3NxdWFyZXMsIFwiY2xpY2tcIilcclxuXHJcbiAgICAgICAgdGhpcy4jd2hvSXNQbGF5aW5nJC5zdWJzY3JpYmUoe1xyXG4gICAgICAgICAgICBuZXh0OiAobWVzc2FnZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53aG9Jc1BsYXlpbmdcIikgYXMgSFRNTEhlYWRpbmdFbGVtZW50KS5pbm5lclRleHQgPSBtZXNzYWdlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICB0aGlzLiNzYWZlTW92ZXMkLnN1YnNjcmliZSh7XHJcbiAgICAgICAgICAgIG5leHQ6IChib2FyZFBvc3Rpb24pID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG9wcG9zaXRlUGxheWVyQ29sb3IgPSB0aGlzLiNwbGF5ZXJDb2xvciQudmFsdWUgPT09IENvbG9yLldISVRFID8gQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNDaGVjazogYm9vbGVhbiA9IHRoaXMuaXNDaGVjayhmYWxzZSwgb3Bwb3NpdGVQbGF5ZXJDb2xvcilcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIU9iamVjdC5rZXlzKGJvYXJkUG9zdGlvbikubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jd2hvSXNQbGF5aW5nJC5uZXh0KGlzQ2hlY2sgPyBvcHBvc2l0ZVBsYXllckNvbG9yLnRvVXBwZXJDYXNlKCkgKyBcIiB3aW4gYnkgY2hlY2ttYXRlXCIgOiBcIlN0YWxlbWF0ZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI3NxdWFyZXMuZm9yRWFjaChzcXVhcmUgPT4gc3F1YXJlLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcIm5vbmVcIilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKGlzQ2hlY2spIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiN3aG9Jc1BsYXlpbmckLm5leHQodGhpcy4jcGxheWVyQ29sb3IkLnZhbHVlLnRvVXBwZXJDYXNlKCkgKyBcIiBpcyBwbGF5aW5nLCBidXQgaXMgaW4gY2hlY2tcIilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI3dob0lzUGxheWluZyQubmV4dCh0aGlzLiNwbGF5ZXJDb2xvciQudmFsdWUudG9VcHBlckNhc2UoKSArIFwiIGlzIHBsYXlpbmdcIilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHRoaXMuI2lzV2hpdGVNb3ZlJC5zdWJzY3JpYmUoe1xyXG4gICAgICAgICAgICBuZXh0OiAoaXNXaGl0ZU1vdmU6IGJvb2xlYW4pID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuI3BsYXllckNvbG9yJC5uZXh0KGlzV2hpdGVNb3ZlID8gQ29sb3IuV0hJVEUgOiBDb2xvci5CTEFDSylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcblxyXG4gICAgICAgIHRoaXMuI3BsYXllckNvbG9yJC5zdWJzY3JpYmUoe1xyXG4gICAgICAgICAgICBuZXh0OiAocGxheWVyQ29sb3I6IENvbG9yKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyBtb3JhbSBkYSBuYWRqZW0gbmVraSBuYWNpbiBkYSBuZSB6b3ZlbSBvdm8gaXogZHZhIHBveml2YVxyXG4gICAgICAgICAgICAgICAgdGhpcy4jc3F1YXJlcy5mb3JFYWNoKHNxdWFyZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3F1YXJlLnN0eWxlLmJhY2tncm91bmQgPSBcIlwiXHJcbiAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuI3NhZmVNb3ZlcyQubmV4dCh0aGlzLmZpbmRBdmFpbGFibGVTcXVhcmVzKHBsYXllckNvbG9yKSlcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLiNzcXVhcmVzLmZvckVhY2goc3F1YXJlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzcXVhcmUuc3R5bGUub3V0bGluZSA9IFwiXCJcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICAvLyBvdm8gamUgZmlyc3RLbGlrLCBvZG5vc25vIGtsaWsga2FkYSB6ZWxpbW8gZGEgc2xla3R1amVtbyBmaWd1cnVcclxuICAgICAgICBjb25zdCBzZWxlY3RQaWVjZSQ6IE9ic2VydmFibGU8SFRNTFRhYmxlQ2VsbEVsZW1lbnQ+ID0gdGhpcy4jc3F1YXJlJFxyXG4gICAgICAgICAgICAucGlwZShcclxuICAgICAgICAgICAgICAgIG1hcChldmVudCA9PiBldmVudC5jdXJyZW50VGFyZ2V0KSxcclxuICAgICAgICAgICAgICAgIGZpbHRlcigoc3F1YXJlOiBIVE1MVGFibGVDZWxsRWxlbWVudCkgPT4gc3F1YXJlLmNoaWxkTm9kZXMubGVuZ3RoID4gMCksXHJcbiAgICAgICAgICAgICAgICBmaWx0ZXIoKHNxdWFyZTogSFRNTFRhYmxlQ2VsbEVsZW1lbnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwaWVjZSA9IHNxdWFyZS5jaGlsZE5vZGVzWzBdIGFzIEhUTUxJbWFnZUVsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGllY2UuZ2V0QXR0cmlidXRlKFwiY29sb3JcIikgPT09IHRoaXMuI3BsYXllckNvbG9yJC52YWx1ZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgKVxyXG5cclxuICAgICAgICAvLyBvdm8gamUgc2Vjb25kQ2xpY2ssIG9kbm9zbm8ga2xpayB1IGtvbWUgcG9zdGF2bGphbW8gc2VsZWt0b3ZhbnUgZmlndXJ1IG5hIGRhdG8gbWVzdG9cclxuICAgICAgICBjb25zdCBwbGFjZVBpZWNlJDogT2JzZXJ2YWJsZTxIVE1MVGFibGVDZWxsRWxlbWVudD4gPSB0aGlzLiNzcXVhcmUkXHJcbiAgICAgICAgICAgIC5waXBlKFxyXG4gICAgICAgICAgICAgICAgbWFwKGV2ZW50ID0+IGV2ZW50LmN1cnJlbnRUYXJnZXQpLFxyXG4gICAgICAgICAgICAgICAgZmlsdGVyKChzcXVhcmU6IEhUTUxUYWJsZUNlbGxFbGVtZW50KSA9PiBzcXVhcmUuc3R5bGUub3V0bGluZUNvbG9yID09PSBcInJlZFwiKSxcclxuICAgICAgICAgICAgICAgIC8vIG92byBqZSBiaXRubyBqZXIgbmFtIG9tb2d1Y3VqZSBkYSBzdGF2aW1vIGZpZ3VydSBwbyBkcnVnaSBwdXQsIG5ha29uIHN0byBzbW8gXCJwcmVraW51bGkgc3Vwc2tyaXBjaWp1XCJcclxuICAgICAgICAgICAgICAgIHRhcCgoKSA9PiB0aGlzLiNlbmFibGVQbGFjaW5nUGllY2UkLm5leHQodHJ1ZSkpLFxyXG4gICAgICAgICAgICApXHJcblxyXG4gICAgICAgIC8vIHByaWthemkgZG9zdHVwbmEgcG9samFcclxuICAgICAgICBjb21iaW5lTGF0ZXN0KFt0aGlzLiNzYWZlTW92ZXMkLCBzZWxlY3RQaWVjZSRdKVxyXG4gICAgICAgICAgICAuc3Vic2NyaWJlKHtcclxuICAgICAgICAgICAgICAgIG5leHQ6IChbc2FmZU1vdmVzLCBjbGlja2VkU3F1YXJlXSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjbGlja2VkU3F1YXJlLnN0eWxlLm91dGxpbmVDb2xvciA9PT0gXCJibHVlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2tlZFNxdWFyZS5zdHlsZS5vdXRsaW5lID0gXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpIHphIG92byBjZSBtb3pkYSBtb2NpIG5la2kgc3ViamVjdCBkYSBzZSBwb3N0YXZpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI3NxdWFyZXMuZm9yRWFjaChzcXVhcmUgPT4gc3F1YXJlLnN0eWxlLm91dGxpbmUgPSBcIlwiKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jc3F1YXJlcy5mb3JFYWNoKHNxdWFyZSA9PiBzcXVhcmUuc3R5bGUub3V0bGluZSA9IFwiXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrZWRTcXVhcmUuc3R5bGUub3V0bGluZSA9IFwiNXB4IHNvbGlkIGJsdWVcIlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3F1YXJlUG9zaXRpb25YOiBudW1iZXIgPSBOdW1iZXIoY2xpY2tlZFNxdWFyZS5nZXRBdHRyaWJ1dGUoXCJ4XCIpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzcXVhcmVQb3NpdGlvblk6IG51bWJlciA9IE51bWJlcihjbGlja2VkU3F1YXJlLmdldEF0dHJpYnV0ZShcInlcIikpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleTogc3RyaW5nID0gc3F1YXJlUG9zaXRpb25YICsgXCIsXCIgKyBzcXVhcmVQb3NpdGlvbllcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGllY2VTYWZlTW92ZXM6IEhUTUxUYWJsZUNlbGxFbGVtZW50W10gPSBzYWZlTW92ZXNba2V5XVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwaWVjZVNhZmVNb3Zlcz8uZm9yRWFjaChzcXVhcmUgPT4gc3F1YXJlLnN0eWxlLm91dGxpbmUgPSBcIjVweCBzb2xpZCByZWRcIilcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgIC8vIHBvc3RhdmkgZmlndXJ1IG5hIGtsaWtudXRvIHBvbGplXHJcbiAgICAgICAgY29tYmluZUxhdGVzdChbc2VsZWN0UGllY2UkLCBwbGFjZVBpZWNlJF0pXHJcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoe1xyXG4gICAgICAgICAgICAgICAgbmV4dDogKFtwcmV2U3F1YXJlLCBuZXh0U3F1YXJlXSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLiNlbmFibGVQbGFjaW5nUGllY2UkLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZTcXVhcmVYOiBudW1iZXIgPSBOdW1iZXIocHJldlNxdWFyZS5nZXRBdHRyaWJ1dGUoXCJ4XCIpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwcmV2U3F1YXJlWTogbnVtYmVyID0gTnVtYmVyKHByZXZTcXVhcmUuZ2V0QXR0cmlidXRlKFwieVwiKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dFNxdWFyZVg6IG51bWJlciA9IE51bWJlcihuZXh0U3F1YXJlLmdldEF0dHJpYnV0ZShcInhcIikpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHRTcXVhcmVZOiBudW1iZXIgPSBOdW1iZXIobmV4dFNxdWFyZS5nZXRBdHRyaWJ1dGUoXCJ5XCIpKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGllY2VUb1BsYWNlOiBQaWVjZSA9IHRoaXMuI2JvYXJkUG9zaXRpb25bcHJldlNxdWFyZVhdW3ByZXZTcXVhcmVZXSBhcyBQaWVjZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb3R2YXJhIHNlIGRpamFsb2cgemEgcHJvbW92aXNhbmplIHBlc2FrYVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGllY2VUb1BsYWNlIGluc3RhbmNlb2YgUGF3biAmJiAobmV4dFNxdWFyZVggPT09IDcgfHwgbmV4dFNxdWFyZVggPT09IDApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dQYXduUHJvbW90aW9uRGlhbG9nKG5leHRTcXVhcmVYLCBuZXh0U3F1YXJlWSwgcHJldlNxdWFyZVgsIHByZXZTcXVhcmVZKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHpuYWNpIGRhIGplIHVzbGVkaWxhIHJva2FkYVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBpZWNlVG9QbGFjZSBpbnN0YW5jZW9mIEtpbmcgJiYgTWF0aC5hYnMobmV4dFNxdWFyZVkgLSBwcmV2U3F1YXJlWSkgPT09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByb29rOiBSb29rID0gdGhpcy4jYm9hcmRQb3NpdGlvbltuZXh0U3F1YXJlWF1bbmV4dFNxdWFyZVkgPT09IDYgPyA3IDogMF0gYXMgUm9va1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvb2tQcmV2WSA9IHJvb2sueVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXh0U3F1YXJlWSA9PT0gNiB6bmFjaSBkYSBqZSB1IHBpdGFuanUga2luZyBzaWRlIHJva2FkYVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb2sueSA9IG5leHRTcXVhcmVZID09PSA2ID8gNSA6IDNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNib2FyZFBvc2l0aW9uW3Jvb2sueF1bcm9vay55XSA9IHJvb2tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNib2FyZFBvc2l0aW9uW25leHRTcXVhcmVYXVtyb29rUHJldlldID0gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI2JvYXJkRWxlbWVudHNbcm9vay54XVtyb29rLnldLmFwcGVuZENoaWxkKHRoaXMuI2JvYXJkRWxlbWVudHNbbmV4dFNxdWFyZVhdW3Jvb2tQcmV2WV0uY2hpbGROb2Rlc1swXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlbiBwYXNzYW50IGplciBpZGUgcGVzYWsgdWt1c28gaSBqZWRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwaWVjZVRvUGxhY2UgaW5zdGFuY2VvZiBQYXduICYmIHRoaXMuI2JvYXJkUG9zaXRpb25bbmV4dFNxdWFyZVhdW25leHRTcXVhcmVZXSA9PT0gbnVsbCAmJiBNYXRoLmFicyhuZXh0U3F1YXJlWSAtIHByZXZTcXVhcmVZKSA9PT0gMSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBrb29yZGluYXRlIHBlc2FrYSBrb2plZyBqZWRlbW8gdSBwcm9sYXp1XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5QYXNzYW50UGF3blggPSBuZXh0U3F1YXJlWCArIChwaWVjZVRvUGxhY2UuY29sb3IgPT09IENvbG9yLldISVRFID8gLTEgOiAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuUGFzc2FudFBhd25ZID0gbmV4dFNxdWFyZVlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jYm9hcmRQb3NpdGlvbltlblBhc3NhbnRQYXduWF1bZW5QYXNzYW50UGF3blldID0gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI2JvYXJkRWxlbWVudHNbZW5QYXNzYW50UGF3blhdW2VuUGFzc2FudFBhd25ZXS5pbm5lckhUTUwgPSBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXp1cmlyYW5qZSBwb3ppY2lqZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jYm9hcmRQb3NpdGlvbltwcmV2U3F1YXJlWF1bcHJldlNxdWFyZVldID0gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jYm9hcmRQb3NpdGlvbltuZXh0U3F1YXJlWF1bbmV4dFNxdWFyZVldID0gcGllY2VUb1BsYWNlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXBkZWp0dWp1IHNlIGtvb3JkaW5hdGUgbmFrb24gcG9tZXJhbmphIGZpZ3VyZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGllY2VUb1BsYWNlLnggPSBuZXh0U3F1YXJlWFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGllY2VUb1BsYWNlLnkgPSBuZXh0U3F1YXJlWVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGF6dWlyYW5qZSBwcmlrYXphIG5ha29uIHN0byB0dSBzdGFuZSBmaWd1cmEga29qb20gc21vIHphcG9jZWxpIGtyZXRhbmplXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0U3F1YXJlLmlubmVySFRNTCA9IFwiXCIgLy8gdSBzbHVjamF1IGRhIHplbGltbyBkYSBwb2plZGVtbyBmaWd1cnVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRTcXVhcmUuYXBwZW5kQ2hpbGQocHJldlNxdWFyZS5jaGlsZE5vZGVzWzBdKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI2xhc3RNb3ZlID0geyBwaWVjZTogcGllY2VUb1BsYWNlLCB4UG9zaXRpb25DaGFuZ2VkOiBNYXRoLmFicyhwcmV2U3F1YXJlWCAtIG5leHRTcXVhcmVYKSB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNpc1doaXRlTW92ZSQubmV4dCghdGhpcy4jaXNXaGl0ZU1vdmUkLnZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jZW5hYmxlUGxhY2luZ1BpZWNlJC5uZXh0KGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGllY2VUb1BsYWNlIGluc3RhbmNlb2YgS2luZyB8fCBwaWVjZVRvUGxhY2UgaW5zdGFuY2VvZiBSb29rIHx8IHBpZWNlVG9QbGFjZSBpbnN0YW5jZW9mIFBhd24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpZWNlVG9QbGFjZS5oYXNNb3ZlZCA9IHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgfVxyXG5cclxuICAgIGNhbktpbmdDYXN0bGUoa2luZ0NvbG9yOiBDb2xvciwga2luZ1NpZGVDYXN0bGU6IGJvb2xlYW4pOiBib29sZWFuIHtcclxuICAgICAgICBjb25zdCBraW5nUG9zaXRpb25YOiBudW1iZXIgPSBraW5nQ29sb3IgPT09IENvbG9yLldISVRFID8gMCA6IDdcclxuICAgICAgICBjb25zdCBraW5nUG9zaXRpb25ZOiBudW1iZXIgPSA0XHJcblxyXG4gICAgICAgIGNvbnN0IHJvb2tQb3NpdGlvblg6IG51bWJlciA9IGtpbmdQb3NpdGlvblhcclxuICAgICAgICBjb25zdCByb29rUG9zaXRpb25ZOiBudW1iZXIgPSBraW5nU2lkZUNhc3RsZSA/IDcgOiAwXHJcblxyXG4gICAgICAgIGNvbnN0IGtpbmc6IGNoZXNzUGllY2UgPSB0aGlzLiNib2FyZFBvc2l0aW9uW2tpbmdQb3NpdGlvblhdW2tpbmdQb3NpdGlvblldXHJcbiAgICAgICAgY29uc3Qgcm9vazogY2hlc3NQaWVjZSA9IHRoaXMuI2JvYXJkUG9zaXRpb25bcm9va1Bvc2l0aW9uWF1bcm9va1Bvc2l0aW9uWV1cclxuXHJcbiAgICAgICAgY29uc3Qgb3Bwb3NpdGVQbGF5ZXJDb2xvciA9IGtpbmdDb2xvciA9PT0gQ29sb3IuV0hJVEUgPyBDb2xvci5CTEFDSyA6IENvbG9yLldISVRFXHJcbiAgICAgICAgY29uc3QgaXNDaGVjazogYm9vbGVhbiA9IHRoaXMuaXNDaGVjayhmYWxzZSwgb3Bwb3NpdGVQbGF5ZXJDb2xvcilcclxuXHJcbiAgICAgICAgaWYgKCEoa2luZyBpbnN0YW5jZW9mIEtpbmcpIHx8IGtpbmcuaGFzTW92ZWQgfHwgaXNDaGVjaykge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghKHJvb2sgaW5zdGFuY2VvZiBSb29rKSB8fCByb29rLmhhc01vdmVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuI2JvYXJkUG9zaXRpb25ba2luZ1Bvc2l0aW9uWF1ba2luZ1Bvc2l0aW9uWSArIChraW5nU2lkZUNhc3RsZSA/IDEgOiAtMSldIHx8XHJcbiAgICAgICAgICAgIHRoaXMuI2JvYXJkUG9zaXRpb25ba2luZ1Bvc2l0aW9uWF1ba2luZ1Bvc2l0aW9uWSArIChraW5nU2lkZUNhc3RsZSA/IDIgOiAtMildKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCFraW5nU2lkZUNhc3RsZSAmJiB0aGlzLiNib2FyZFBvc2l0aW9uW2tpbmdQb3NpdGlvblhdW2tpbmdQb3NpdGlvblkgKyAoa2luZ1NpZGVDYXN0bGUgPyAzIDogLTMpXSlcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmlzU3F1YXJlU2FmZShraW5nUG9zaXRpb25YLCBraW5nUG9zaXRpb25ZLCBraW5nUG9zaXRpb25YLCBraW5nUG9zaXRpb25ZICsgKGtpbmdTaWRlQ2FzdGxlID8gMSA6IC0xKSkgJiZcclxuICAgICAgICAgICAgdGhpcy5pc1NxdWFyZVNhZmUoa2luZ1Bvc2l0aW9uWCwga2luZ1Bvc2l0aW9uWSwga2luZ1Bvc2l0aW9uWCwga2luZ1Bvc2l0aW9uWSArIChraW5nU2lkZUNhc3RsZSA/IDIgOiAtMikpXHJcbiAgICB9XHJcblxyXG4gICAgaXNTcXVhcmVTYWZlKHByZXZYOiBudW1iZXIsIHByZXZZOiBudW1iZXIsIG5ld1g6IG51bWJlciwgbmV3WTogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICAgICAgLy8gcHJvdmVyYXZhIGRhIGxpIGNlIGJpdGkgdSDFoWFodSBha28gc2UgZmlndXJhIHN0YXZpIG5hIHRvIG1lc3RvXHJcbiAgICAgICAgY29uc3Qgb2xkUGllY2U6IFBpZWNlID0gdGhpcy4jYm9hcmRQb3NpdGlvbltwcmV2WF1bcHJldlldIGFzIFBpZWNlXHJcbiAgICAgICAgY29uc3QgbmV3UGllY2U6IGNoZXNzUGllY2UgPSB0aGlzLiNib2FyZFBvc2l0aW9uW25ld1hdW25ld1ldXHJcblxyXG4gICAgICAgIC8vIG5lIG1vemVzIGRhIHN0YXZpcyBmaWd1cnUgbmEgbWVzdG8gZ2RlIHNlIG5hbGF6aSBmaWd1cmEgaXN0ZSBib2plXHJcbiAgICAgICAgaWYgKG5ld1BpZWNlICYmIG5ld1BpZWNlLmNvbG9yID09PSBvbGRQaWVjZS5jb2xvcikgcmV0dXJuIGZhbHNlXHJcblxyXG4gICAgICAgIHRoaXMuI2JvYXJkUG9zaXRpb25bbmV3WF1bbmV3WV0gPSBvbGRQaWVjZVxyXG4gICAgICAgIHRoaXMuI2JvYXJkUG9zaXRpb25bcHJldlhdW3ByZXZZXSA9IG51bGxcclxuXHJcbiAgICAgICAgLy8gdnJzaW1vIHByb3ZlcnUgZGEgaWdyYWMgbmUgc21lIGRhIGJ1ZGUgdSBzYWh1IG5ha29uIHN2b2cgc2xlZGVjZWcgcG90ZXphLCB0aiBuZSBzbWUgZGEgb3RrcmlqZSBzYWhcclxuICAgICAgICBjb25zdCBvcHBvc2l0ZUNvbG9yUGxheWVyID0gdGhpcy4jcGxheWVyQ29sb3IkLnZhbHVlID09PSBDb2xvci5XSElURSA/IENvbG9yLkJMQUNLIDogQ29sb3IuV0hJVEVcclxuICAgICAgICBjb25zdCBpc0NoZWNrOiBib29sZWFuID0gdGhpcy5pc0NoZWNrKHRydWUsIG9wcG9zaXRlQ29sb3JQbGF5ZXIpXHJcbiAgICAgICAgdGhpcy4jYm9hcmRQb3NpdGlvbltwcmV2WF1bcHJldlldID0gb2xkUGllY2VcclxuICAgICAgICB0aGlzLiNib2FyZFBvc2l0aW9uW25ld1hdW25ld1ldID0gbmV3UGllY2VcclxuXHJcbiAgICAgICAgcmV0dXJuICFpc0NoZWNrXHJcbiAgICB9XHJcblxyXG4gICAgLy8gZnVua2NpamEga29qYSBwcm92ZXJhdmEgZGEgbGkgamUgcGxheWVyQ29sb3IgaWdyYWMgZGFvIHNhaCwga2FkYSB6ZWxpbW8gZGEgcHJvdmVyaW1vIGRhIGxpIGplIGRhdGkgaWdyYWMgdSBzYWh1XHJcbiAgICAvLyBtb3JhbW8gZGEgcG9zYWxqZW1vIGJvanUgcG9ydGl2bmlja29nIGlncmFjYSBqZXIgbmFtIG9uZGEgdG8gc2lnbmFsaXppcmEgZGEgbGkgamUgZHJ1Z2kgaWdyYWMgZGFvIHNhaFxyXG5cclxuICAgIGlzQ2hlY2soY2hlY2tpbmdOZXh0UG9zaXRpb246IGJvb2xlYW4gPSBmYWxzZSwgcGxheWVyQ29sb3I6IENvbG9yKTogYm9vbGVhbiB7XHJcblxyXG4gICAgICAgIC8vIGNoZWNraW5nTmV4dFBvc2l0aW9uIG5hbSBzbHV6aSBzYW1vIGRhIG5lIG1hcmtpcmFtbyBwb2xqZSBrb2plIGplIGNydmVubyB1a29saWtvIGplIHBvemljaWphIGtvanUgcHJvdmVyYXZhbW9cclxuICAgICAgICAvLyB0ZXN0IHBvemljaWphIGRhIGJpIHV0dnJpZGxpIGRhIHNlIG5lIG9rdHJpY3ZhIHNhaCB0aSBwb3Rlem9tIGkgZGEgamUgdG8gcG9samUgemFwcmF2byBzbG9ib2Rub1xyXG4gICAgICAgIGZvciAoY29uc3Qgcm93IG9mIHRoaXMuI2JvYXJkUG9zaXRpb24pIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBwaWVjZSBvZiByb3cpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcGllY2UgfHwgcGllY2UuY29sb3IgIT09IHBsYXllckNvbG9yKSBjb250aW51ZVxyXG5cclxuICAgICAgICAgICAgICAgIC8vIHBlc2FrLCBrcmFsaiBpIHNrYWthYyBuZSBtb2d1IGRhIHByZWRqdSB2aXNlIHBvdGV6YSB1bmFwcmVkIG5lZ28gc3RvIGltIGplIGRlZmluaXNhbm8gdSBrb29yZGluYXRhbWFcclxuICAgICAgICAgICAgICAgIC8vIGEgemEgb3N0YWxlIHN1IGRhdGkgc2FtbyBwcmF2Y2kgcGEgXHJcbiAgICAgICAgICAgICAgICBpZiAocGllY2UgaW5zdGFuY2VvZiBQYXduIHx8IHBpZWNlIGluc3RhbmNlb2YgS2luZyB8fCBwaWVjZSBpbnN0YW5jZW9mIEtuaWdodCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2R4LCBkeV0gb2YgcGllY2UuZGlyZWN0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdYID0gcGllY2UueCArIGR4XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1kgPSBwaWVjZS55ICsgZHlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwaWVjZSBpbnN0YW5jZW9mIFBhd24gJiYgZHkgPT09IDApIGNvbnRpbnVlIC8vIHphdG8gc3RvIHBlc2FrIG5lIG5hcGFkYSB1cHJhdm5vIHZlYyB1a29zb1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzU3F1YXJlVmFsaWQobmV3WCwgbmV3WSkpIGNvbnRpbnVlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0UGllY2U6IGNoZXNzUGllY2UgPSB0aGlzLiNib2FyZFBvc2l0aW9uW25ld1hdW25ld1ldXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFBpZWNlIGluc3RhbmNlb2YgS2luZyAmJiBwaWVjZS5jb2xvciAhPT0gbmV4dFBpZWNlLmNvbG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNoZWNraW5nTmV4dFBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jYm9hcmRFbGVtZW50c1tuZXdYXVtuZXdZXS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBbZHgsIGR5XSBvZiBwaWVjZS5kaXJlY3Rpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBuZXdYOiBudW1iZXIgPSBwaWVjZS54ICsgZHhcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5ld1k6IG51bWJlciA9IHBpZWNlLnkgKyBkeVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMuaXNTcXVhcmVWYWxpZChuZXdYLCBuZXdZKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dFBpZWNlOiBjaGVzc1BpZWNlID0gdGhpcy4jYm9hcmRQb3NpdGlvbltuZXdYXVtuZXdZXVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0UGllY2UgaW5zdGFuY2VvZiBLaW5nICYmIHBpZWNlLmNvbG9yICE9PSBuZXh0UGllY2UuY29sb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWNoZWNraW5nTmV4dFBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI2JvYXJkRWxlbWVudHNbbmV3WF1bbmV3WV0uc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJyZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWtvIHNlIG5hIHB1dHUgZmlndXJlIG5hZGplIHBvbGplIGtvamUgbmlqZSBwcmF6bm8gem5hY2kgZGEgbmUgbW96ZW1vIGRhIGlkZW1vIHRvbSBwdXRhbmpvbVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gaSBzaWd1cm5vIG5pamUgc2FoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0aGlzLiNib2FyZFBvc2l0aW9uW25ld1hdW25ld1ldICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ggKz0gZHhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdZICs9IGR5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICB9XHJcblxyXG4gICAgZmluZEF2YWlsYWJsZVNxdWFyZXMoY3VycmVudFBsYXllckNvbG9yOiBDb2xvcik6IExpc3RPZkFsbEF2YWlsYWJsZVNxdWFyZXMge1xyXG4gICAgICAgIGNvbnN0IGxpc3RPZkFsbEF2YWlsYWJsZVNxdWFyZXM6IExpc3RPZkFsbEF2YWlsYWJsZVNxdWFyZXMgPSB7fVxyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IHJvdyBvZiB0aGlzLiNib2FyZFBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgcGllY2Ugb2Ygcm93KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXBpZWNlIHx8IHBpZWNlLmNvbG9yICE9PSBjdXJyZW50UGxheWVyQ29sb3IpIGNvbnRpbnVlXHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3Qgc2FmZVNxdWFyZXM6IEhUTUxUYWJsZUNlbGxFbGVtZW50W10gPSBbXVxyXG4gICAgICAgICAgICAgICAgY29uc3QgWDogbnVtYmVyID0gcGllY2UueFxyXG4gICAgICAgICAgICAgICAgY29uc3QgWTogbnVtYmVyID0gcGllY2UueVxyXG5cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2R4LCBkeV0gb2YgcGllY2UuZGlyZWN0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXdYOiBudW1iZXIgPSBYICsgZHhcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbmV3WTogbnVtYmVyID0gWSArIGR5XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzU3F1YXJlVmFsaWQobmV3WCwgbmV3WSkpIGNvbnRpbnVlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG5leHRQaWVjZSBqZSBmaWd1cmEga29qYSBzZSBuYWxhemkgbmEgbm92aW0ga29vcmRpbmF0YW1hXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5leHRQaWVjZTogY2hlc3NQaWVjZSA9IHRoaXMuI2JvYXJkUG9zaXRpb25bbmV3WF1bbmV3WV1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVndWxpxaFlbW8gbW9ndcSHYSBzbG9ib2RuYSBwb2xqYSB6YSBwZcWhYWtlLCBvdMWhdG8gc21vIGluaWNpamFsbm8gc3RhdmlsaSBkYSBpbWEgc3ZlIDQgb3BjaWplIGtyZXRhbmphXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBpZWNlIGluc3RhbmNlb2YgUGF3bikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvbmVtb2d1Y3VqZW1vIGRhIHNlIHBlc2FrIHBvbWVyaSBkdmUgcG96aWNpamUgdWtvbGlrbyBzZSBpc3ByZWQgbmplZ2EgbmFsYXppIG5la2EgZmlndXJhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkeCA9PT0gMiB8fCBkeCA9PT0gLTIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0UGllY2UgIT09IG51bGwpIGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy4jYm9hcmRQb3NpdGlvbltuZXdYICsgKGR4ID09PSAyID8gLTEgOiAxKV1bbmV3WV0gIT09IG51bGwpIGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb25lbW9ndWN1amVtbyBkYSBzZSBrcmVjZSBqZWRubyBwb2xqZSB1bmFwcmVkIHVrb2xpa28gc2UgaXNwcmVkIG5hbGF6aSBmaWd1cmFcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChkeCA9PT0gMSB8fCBkeCA9PT0gLTEpICYmIGR5ID09PSAwICYmIG5leHRQaWVjZSAhPT0gbnVsbCkgY29udGludWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9uZW1vZ3VjdWplbW8gZGEgamVkZSB1a3VzbyB1a29saWtvIHNlIGlzcHJlZCBuZSBuYWxhemkgZmlndXJhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoZHggPT09IDEgfHwgZHggPT09IC0xKSAmJiBuZXh0UGllY2UgPT09IG51bGwgJiYgKGR5ID09PSAxIHx8IGR5ID09PSAtMSkpIGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAocGllY2UgaW5zdGFuY2VvZiBQYXduIHx8IHBpZWNlIGluc3RhbmNlb2YgS2luZyB8fCBwaWVjZSBpbnN0YW5jZW9mIEtuaWdodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFBpZWNlID09PSBudWxsIHx8IG5leHRQaWVjZS5jb2xvciAhPT0gdGhpcy4jcGxheWVyQ29sb3IkLnZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1NxdWFyZVNhZmUoWCwgWSwgbmV3WCwgbmV3WSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYWZlU3F1YXJlcy5wdXNoKHRoaXMuI2JvYXJkRWxlbWVudHNbbmV3WF1bbmV3WV0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzLmlzU3F1YXJlVmFsaWQobmV3WCwgbmV3WSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5leHRQaWVjZSA9IHRoaXMuI2JvYXJkUG9zaXRpb25bbmV3WF1bbmV3WV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0UGllY2UgPT09IG51bGwgfHwgbmV4dFBpZWNlLmNvbG9yICE9PSB0aGlzLiNwbGF5ZXJDb2xvciQudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1NxdWFyZVNhZmUoWCwgWSwgbmV3WCwgbmV3WSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FmZVNxdWFyZXMucHVzaCh0aGlzLiNib2FyZEVsZW1lbnRzW25ld1hdW25ld1ldKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBibG9raXJhbW8gdHJhemVuamUgcG8gcHV0YW5qaSBpc3ByZWQga29qZSBzZSBuYWxhemkgZmlndXJhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRQaWVjZSAhPT0gbnVsbCkgYnJlYWtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdYICs9IGR4XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3WSArPSBkeVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzYWZlU3F1YXJlcy5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdE9mQWxsQXZhaWxhYmxlU3F1YXJlc1tYLnRvU3RyaW5nKCkgKyBcIixcIiArIFkudG9TdHJpbmcoKV0gPSBzYWZlU3F1YXJlc1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qga2luZ1Bvc2l0aW9uWCA9IGN1cnJlbnRQbGF5ZXJDb2xvciA9PT0gQ29sb3IuV0hJVEUgPyAwIDogN1xyXG4gICAgICAgIGNvbnN0IGtpbmdQb3NpdGlvblkgPSA0XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNhbktpbmdDYXN0bGUoY3VycmVudFBsYXllckNvbG9yLCB0cnVlKSkge1xyXG4gICAgICAgICAgICBsaXN0T2ZBbGxBdmFpbGFibGVTcXVhcmVzW2tpbmdQb3NpdGlvblggKyBcIixcIiArIGtpbmdQb3NpdGlvblldLnB1c2godGhpcy4jYm9hcmRFbGVtZW50c1traW5nUG9zaXRpb25YXVs2XSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNhbktpbmdDYXN0bGUoY3VycmVudFBsYXllckNvbG9yLCBmYWxzZSkpIHtcclxuICAgICAgICAgICAgbGlzdE9mQWxsQXZhaWxhYmxlU3F1YXJlc1traW5nUG9zaXRpb25YICsgXCIsXCIgKyBraW5nUG9zaXRpb25ZXS5wdXNoKHRoaXMuI2JvYXJkRWxlbWVudHNba2luZ1Bvc2l0aW9uWF1bMl0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNhbkNhcHR1cmVFblBhc3NhbnQoY3VycmVudFBsYXllckNvbG9yLCBsaXN0T2ZBbGxBdmFpbGFibGVTcXVhcmVzKVxyXG5cclxuICAgICAgICByZXR1cm4gbGlzdE9mQWxsQXZhaWxhYmxlU3F1YXJlc1xyXG4gICAgfVxyXG5cclxuICAgIGNhbkNhcHR1cmVFblBhc3NhbnQoY3VycmVudFBsYXllckNvbG9yOiBDb2xvciwgbGlzdE9mQWxsQXZhaWxhYmxlU3F1YXJlczogTGlzdE9mQWxsQXZhaWxhYmxlU3F1YXJlcyk6IHZvaWQge1xyXG4gICAgICAgIGZvciAoY29uc3Qgcm93IG9mIHRoaXMuI2JvYXJkUG9zaXRpb24pIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBwaWVjZSBvZiByb3cpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLiNsYXN0TW92ZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHBpZWNlIGluc3RhbmNlb2YgUGF3biAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI2xhc3RNb3ZlLnBpZWNlIGluc3RhbmNlb2YgUGF3biAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHBpZWNlLmNvbG9yID09PSBjdXJyZW50UGxheWVyQ29sb3IgJiZcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiNsYXN0TW92ZS5waWVjZS5jb2xvciAhPT0gcGllY2UuY29sb3IgJiZcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiNsYXN0TW92ZS54UG9zaXRpb25DaGFuZ2VkID09PSAyICYmXHJcbiAgICAgICAgICAgICAgICAgICAgcGllY2UueCA9PT0gdGhpcy4jbGFzdE1vdmUucGllY2UueCAmJlxyXG4gICAgICAgICAgICAgICAgICAgIE1hdGguYWJzKHBpZWNlLnkgLSB0aGlzLiNsYXN0TW92ZS5waWVjZS55KSA9PT0gMVxyXG4gICAgICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3UGF3blBvc2l0aW9uWCA9IHBpZWNlLnggKyAocGllY2UuY29sb3IgPT09IENvbG9yLldISVRFID8gMSA6IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1Bhd25Qb3NpdGlvblkgPSB0aGlzLiNsYXN0TW92ZS5waWVjZS55XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI2JvYXJkUG9zaXRpb25bdGhpcy4jbGFzdE1vdmUucGllY2UueF1bdGhpcy4jbGFzdE1vdmUucGllY2UueV0gPSBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNQb3NpdGlvblNhZmVBZnRlckVuUGFzc2FudCA9IHRoaXMuaXNTcXVhcmVTYWZlKHBpZWNlLngsIHBpZWNlLnksIG5ld1Bhd25Qb3NpdGlvblgsIG5ld1Bhd25Qb3NpdGlvblkpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1Bvc2l0aW9uU2FmZUFmdGVyRW5QYXNzYW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbGlzdE9mQWxsQXZhaWxhYmxlU3F1YXJlc1twaWVjZS54ICsgXCIsXCIgKyBwaWVjZS55XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdE9mQWxsQXZhaWxhYmxlU3F1YXJlc1twaWVjZS54ICsgXCIsXCIgKyBwaWVjZS55XSA9IFtdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdE9mQWxsQXZhaWxhYmxlU3F1YXJlc1twaWVjZS54ICsgXCIsXCIgKyBwaWVjZS55XS5wdXNoKHRoaXMuI2JvYXJkRWxlbWVudHNbbmV3UGF3blBvc2l0aW9uWF1bbmV3UGF3blBvc2l0aW9uWV0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiNib2FyZFBvc2l0aW9uW3RoaXMuI2xhc3RNb3ZlLnBpZWNlLnhdW3RoaXMuI2xhc3RNb3ZlLnBpZWNlLnldID0gdGhpcy4jbGFzdE1vdmUucGllY2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzaG93UGF3blByb21vdGlvbkRpYWxvZyhjdXJyZW50WDogbnVtYmVyLCBjdXJyZW50WTogbnVtYmVyLCBwcmV2WDogbnVtYmVyLCBwcmV2WTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgcGllY2VJbWFnZXM6IHN0cmluZ1tdID0gW1wiYmlzaG9wXCIsIFwia25pZ2h0XCIsIFwicm9va1wiLCBcInF1ZWVuXCJdXHJcbiAgICAgICAgY29uc3QgcGF3blByb21vaXRpb25Qb3BVcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgYXMgSFRNTERpdkVsZW1lbnRcclxuICAgICAgICBwYXduUHJvbW9pdGlvblBvcFVwLmNsYXNzTGlzdC5hZGQoXCJwYXduLXByb21vdGlvbi1wb3B1cFwiKVxyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocGF3blByb21vaXRpb25Qb3BVcClcclxuXHJcbiAgICAgICAgY29uc3QgYnRuQ2xvc2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpIGFzIEhUTUxEaXZFbGVtZW50XHJcbiAgICAgICAgYnRuQ2xvc2UuY2xhc3NMaXN0LmFkZChcImJ0bi1jbG9zZVwiKVxyXG4gICAgICAgIHBhd25Qcm9tb2l0aW9uUG9wVXAuYXBwZW5kQ2hpbGQoYnRuQ2xvc2UpXHJcblxyXG4gICAgICAgIGNvbnN0IGJ0bkNsb3NlJDogT2JzZXJ2YWJsZTxFdmVudD4gPSBmcm9tRXZlbnQoYnRuQ2xvc2UsIFwiY2xpY2tcIilcclxuXHJcbiAgICAgICAgYnRuQ2xvc2UkLnBpcGUoXHJcbiAgICAgICAgICAgIHRhcCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBwYXduUHJvbW9pdGlvblBvcFVwLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIlxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICkuc3Vic2NyaWJlKClcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBwaWVjZUltYWdlIG9mIHBpZWNlSW1hZ2VzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpZ3VyZU9wdGlvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgYXMgSFRNTERpdkVsZW1lbnRcclxuICAgICAgICAgICAgZmlndXJlT3B0aW9uLmNsYXNzTGlzdC5hZGQoXCJmaWd1cmUtb3B0aW9uXCIpXHJcblxyXG4gICAgICAgICAgICBjb25zdCBmaWd1cmVJbWFnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIikgYXMgSFRNTEltYWdlRWxlbWVudFxyXG4gICAgICAgICAgICBmaWd1cmVJbWFnZS5zcmMgPSBgc3JjL2Fzc2V0cy8ke3RoaXMuI3BsYXllckNvbG9yJC52YWx1ZX0gJHtwaWVjZUltYWdlfS5wbmdgXHJcbiAgICAgICAgICAgIGZpZ3VyZUltYWdlLmFsdCA9IHRoaXMuI3BsYXllckNvbG9yJC52YWx1ZSArIFwiIFwiICsgcGllY2VJbWFnZVxyXG5cclxuICAgICAgICAgICAgZmlndXJlSW1hZ2UuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBuZXdQaWVjZTogUGllY2VcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAocGllY2VJbWFnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUGllY2VUeXBlLlFVRUVOOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdQaWVjZSA9IG5ldyBRdWVlbih0aGlzLiNwbGF5ZXJDb2xvciQudmFsdWUsIGN1cnJlbnRYLCBjdXJyZW50WSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFBpZWNlVHlwZS5ST09LOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdQaWVjZSA9IG5ldyBSb29rKHRoaXMuI3BsYXllckNvbG9yJC52YWx1ZSwgY3VycmVudFgsIGN1cnJlbnRZKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUGllY2VUeXBlLkJJU0hPUDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3UGllY2UgPSBuZXcgQmlzaG9wKHRoaXMuI3BsYXllckNvbG9yJC52YWx1ZSwgY3VycmVudFgsIGN1cnJlbnRZKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgUGllY2VUeXBlLktOSUdIVDpcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXdQaWVjZSA9IG5ldyBLbmlnaHQodGhpcy4jcGxheWVyQ29sb3IkLnZhbHVlLCBjdXJyZW50WCwgY3VycmVudFkpXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy4jYm9hcmRQb3NpdGlvbltjdXJyZW50WF1bY3VycmVudFldID0gbmV3UGllY2VcclxuICAgICAgICAgICAgICAgIHRoaXMuI2JvYXJkUG9zaXRpb25bcHJldlhdW3ByZXZZXSA9IG51bGxcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBtb3JhbSBkYSBuYXByYXZpbSBub3ZpIGVsZW1lbnQgc2xpa2UsIGplciBha28gZG9kYW0gZmlndXJlSW1hZ2UgZWxlbWVudCBvbiB6YSBzZWJlXHJcbiAgICAgICAgICAgICAgICAvLyBpbWEgdmV6YW4ga2xpayBldmVudCBzdG8gY2UgZGEgY2luaSBkYSBtb2d1IG9kbWFoIGRhIGtsaWtuZW0gbm92dSBwcm9tb3Zpc2FudSBmaWd1cnUgaSB0aW1lIGRhIG5hcnVzaW0gY2lrbGljbm9zdCBwb3RlemFcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBwcm9tb3RlZFBpZWNlSW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpIGFzIEhUTUxJbWFnZUVsZW1lbnRcclxuICAgICAgICAgICAgICAgIHByb21vdGVkUGllY2VJbWFnZS5zcmMgPSBgc3JjL2Fzc2V0cy8ke3RoaXMuI3BsYXllckNvbG9yJC52YWx1ZX0gJHtwaWVjZUltYWdlfS5wbmdgXHJcbiAgICAgICAgICAgICAgICBwcm9tb3RlZFBpZWNlSW1hZ2UuYWx0ID0gdGhpcy4jcGxheWVyQ29sb3IkLnZhbHVlICsgXCIgXCIgKyBwaWVjZUltYWdlXHJcbiAgICAgICAgICAgICAgICBwcm9tb3RlZFBpZWNlSW1hZ2Uuc2V0QXR0cmlidXRlKFwiY29sb3JcIiwgdGhpcy4jcGxheWVyQ29sb3IkLnZhbHVlKVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuI2JvYXJkRWxlbWVudHNbY3VycmVudFhdW2N1cnJlbnRZXS5pbm5lckhUTUwgPSBcIlwiXHJcbiAgICAgICAgICAgICAgICB0aGlzLiNib2FyZEVsZW1lbnRzW2N1cnJlbnRYXVtjdXJyZW50WV0uYXBwZW5kQ2hpbGQocHJvbW90ZWRQaWVjZUltYWdlKVxyXG4gICAgICAgICAgICAgICAgdGhpcy4jYm9hcmRFbGVtZW50c1twcmV2WF1bcHJldlldLmlubmVySFRNTCA9IFwiXCJcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLiNpc1doaXRlTW92ZSQubmV4dCghdGhpcy4jaXNXaGl0ZU1vdmUkLnZhbHVlKVxyXG4gICAgICAgICAgICAgICAgdGhpcy4jZW5hYmxlUGxhY2luZ1BpZWNlJC5uZXh0KGZhbHNlKVxyXG5cclxuICAgICAgICAgICAgICAgIHBhd25Qcm9tb2l0aW9uUG9wVXAuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiXHJcbiAgICAgICAgICAgIH0pXHJcblxyXG4gICAgICAgICAgICBmaWd1cmVPcHRpb24uYXBwZW5kQ2hpbGQoZmlndXJlSW1hZ2UpXHJcbiAgICAgICAgICAgIHBhd25Qcm9tb2l0aW9uUG9wVXAuYXBwZW5kQ2hpbGQoZmlndXJlT3B0aW9uKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdLCJuYW1lcyI6WyJleHRlbmRTdGF0aWNzIiwiZCIsImIiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl9fZXh0ZW5kcyIsIlR5cGVFcnJvciIsIlN0cmluZyIsIl9fIiwidGhpcyIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiX19nZW5lcmF0b3IiLCJ0aGlzQXJnIiwiYm9keSIsImYiLCJ5IiwidCIsImciLCJfIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsIm5leHQiLCJ2ZXJiIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJuIiwidiIsIm9wIiwiZG9uZSIsInZhbHVlIiwicG9wIiwibGVuZ3RoIiwicHVzaCIsImUiLCJzdGVwIiwiX192YWx1ZXMiLCJvIiwicyIsIm0iLCJpIiwiX19yZWFkIiwiciIsImFyIiwiZXJyb3IiLCJfX3NwcmVhZEFycmF5IiwidG8iLCJmcm9tIiwicGFjayIsImFyZ3VtZW50cyIsImwiLCJzbGljZSIsImNvbmNhdCIsIl9fYXdhaXQiLCJTdXBwcmVzc2VkRXJyb3IiLCJpc0FycmF5TGlrZSIsIngiLCJpc0Z1bmN0aW9uIiwiaXNQcm9taXNlIiwidGhlbiIsImNyZWF0ZUVycm9yQ2xhc3MiLCJjcmVhdGVJbXBsIiwiY3RvckZ1bmMiLCJpbnN0YW5jZSIsIkVycm9yIiwic3RhY2siLCJVbnN1YnNjcmlwdGlvbkVycm9yIiwiX3N1cGVyIiwiZXJyb3JzIiwibWVzc2FnZSIsIm1hcCIsImVyciIsInRvU3RyaW5nIiwiam9pbiIsIm5hbWUiLCJhcnJSZW1vdmUiLCJhcnIiLCJpdGVtIiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiU3Vic2NyaXB0aW9uIiwiaW5pdGlhbFRlYXJkb3duIiwiY2xvc2VkIiwiX3BhcmVudGFnZSIsIl9maW5hbGl6ZXJzIiwiZW1wdHkiLCJ1bnN1YnNjcmliZSIsImVfMSIsIl9hIiwiZV8yIiwiX2IiLCJpc0FycmF5IiwiX3BhcmVudGFnZV8xIiwiX3BhcmVudGFnZV8xXzEiLCJyZW1vdmUiLCJlXzFfMSIsInJldHVybiIsImluaXRpYWxGaW5hbGl6ZXIiLCJfZmluYWxpemVyc18xIiwiX2ZpbmFsaXplcnNfMV8xIiwiZmluYWxpemVyIiwiZXhlY0ZpbmFsaXplciIsImVfMl8xIiwiYWRkIiwidGVhcmRvd24iLCJfaGFzUGFyZW50IiwiX2FkZFBhcmVudCIsInBhcmVudCIsImluY2x1ZGVzIiwiX3JlbW92ZVBhcmVudCIsIkVNUFRZIiwiRU1QVFlfU1VCU0NSSVBUSU9OIiwiaXNTdWJzY3JpcHRpb24iLCJjb25maWciLCJvblVuaGFuZGxlZEVycm9yIiwib25TdG9wcGVkTm90aWZpY2F0aW9uIiwiUHJvbWlzZSIsInVuZGVmaW5lZCIsInVzZURlcHJlY2F0ZWRTeW5jaHJvbm91c0Vycm9ySGFuZGxpbmciLCJ1c2VEZXByZWNhdGVkTmV4dENvbnRleHQiLCJ0aW1lb3V0UHJvdmlkZXIiLCJzZXRUaW1lb3V0IiwiaGFuZGxlciIsInRpbWVvdXQiLCJhcmdzIiwiX2kiLCJkZWxlZ2F0ZSIsImFwcGx5IiwiY2xlYXJUaW1lb3V0IiwiaGFuZGxlIiwicmVwb3J0VW5oYW5kbGVkRXJyb3IiLCJub29wIiwiQ09NUExFVEVfTk9USUZJQ0FUSU9OIiwiY3JlYXRlTm90aWZpY2F0aW9uIiwia2luZCIsImNvbnRleHQiLCJlcnJvckNvbnRleHQiLCJjYiIsImlzUm9vdCIsImVycm9yVGhyb3duIiwiU3Vic2NyaWJlciIsImRlc3RpbmF0aW9uIiwiX3RoaXMiLCJpc1N0b3BwZWQiLCJFTVBUWV9PQlNFUlZFUiIsImNvbXBsZXRlIiwiU2FmZVN1YnNjcmliZXIiLCJoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uIiwibmV4dE5vdGlmaWNhdGlvbiIsIl9uZXh0IiwiX2Vycm9yIiwiX2NvbXBsZXRlIiwiX2JpbmQiLCJGdW5jdGlvbiIsImJpbmQiLCJmbiIsIkNvbnN1bWVyT2JzZXJ2ZXIiLCJwYXJ0aWFsT2JzZXJ2ZXIiLCJoYW5kbGVVbmhhbmRsZWRFcnJvciIsIm9ic2VydmVyT3JOZXh0IiwiY29udGV4dF8xIiwibm90aWZpY2F0aW9uIiwic3Vic2NyaWJlciIsIm9ic2VydmFibGUiLCJpZGVudGl0eSIsIk9ic2VydmFibGUiLCJzdWJzY3JpYmUiLCJfc3Vic2NyaWJlIiwibGlmdCIsIm9wZXJhdG9yIiwic291cmNlIiwiaXNPYnNlcnZlciIsIl90cnlTdWJzY3JpYmUiLCJzaW5rIiwiZm9yRWFjaCIsInByb21pc2VDdG9yIiwiZ2V0UHJvbWlzZUN0b3IiLCJyZXNvbHZlIiwicmVqZWN0IiwicGlwZSIsIm9wZXJhdGlvbnMiLCJmbnMiLCJpbnB1dCIsInJlZHVjZSIsInByZXYiLCJ0b1Byb21pc2UiLCJpc0ludGVyb3BPYnNlcnZhYmxlIiwiaXNBc3luY0l0ZXJhYmxlIiwib2JqIiwiYXN5bmNJdGVyYXRvciIsImNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yIiwiaXNJdGVyYWJsZSIsInJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IiLCJyZWFkYWJsZVN0cmVhbSIsIl9hcmd1bWVudHMiLCJnZW5lcmF0b3IiLCJxIiwiYSIsInJlc3VtZSIsImZ1bGZpbGwiLCJzZXR0bGUiLCJzaGlmdCIsIl9fYXN5bmNHZW5lcmF0b3IiLCJyZWFkZXIiLCJnZXRSZWFkZXIiLCJyZWFkIiwicmVsZWFzZUxvY2siLCJpc1JlYWRhYmxlU3RyZWFtTGlrZSIsImlubmVyRnJvbSIsIm9icyIsImFycmF5IiwicHJvbWlzZSIsImZyb21Bc3luY0l0ZXJhYmxlIiwiaXRlcmFibGUiLCJpdGVyYWJsZV8xIiwiaXRlcmFibGVfMV8xIiwiYXN5bmNJdGVyYWJsZSIsImFzeW5jSXRlcmFibGVfMSIsImFzeW5jSXRlcmFibGVfMV8xIiwiUCIsIl9fYXN5bmNWYWx1ZXMiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInJlc3VsdCIsInByb2Nlc3MiLCJjYXRjaCIsIm9wZXJhdGUiLCJpbml0IiwiaGFzTGlmdCIsImxpZnRlZFNvdXJjZSIsImNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciIsIm9uTmV4dCIsIm9uQ29tcGxldGUiLCJvbkVycm9yIiwib25GaW5hbGl6ZSIsIk9wZXJhdG9yU3Vic2NyaWJlciIsInNob3VsZFVuc3Vic2NyaWJlIiwiY2xvc2VkXzEiLCJwcm9qZWN0IiwiZXhlY3V0ZVNjaGVkdWxlIiwicGFyZW50U3Vic2NyaXB0aW9uIiwic2NoZWR1bGVyIiwid29yayIsImRlbGF5IiwicmVwZWF0Iiwic2NoZWR1bGVTdWJzY3JpcHRpb24iLCJzY2hlZHVsZSIsIm1lcmdlTWFwIiwicmVzdWx0U2VsZWN0b3IiLCJjb25jdXJyZW50IiwiSW5maW5pdHkiLCJpaSIsIm9uQmVmb3JlTmV4dCIsImV4cGFuZCIsImlubmVyU3ViU2NoZWR1bGVyIiwiYWRkaXRpb25hbEZpbmFsaXplciIsImJ1ZmZlciIsImFjdGl2ZSIsImlzQ29tcGxldGUiLCJjaGVja0NvbXBsZXRlIiwib3V0ZXJOZXh0IiwiZG9Jbm5lclN1YiIsImlubmVyQ29tcGxldGUiLCJpbm5lclZhbHVlIiwiYnVmZmVyZWRWYWx1ZSIsIm1lcmdlSW50ZXJuYWxzIiwibWFwT25lT3JNYW55QXJncyIsImNhbGxPckFwcGx5IiwiQ29sb3IiLCJub2RlRXZlbnRFbWl0dGVyTWV0aG9kcyIsImV2ZW50VGFyZ2V0TWV0aG9kcyIsImpxdWVyeU1ldGhvZHMiLCJmcm9tRXZlbnQiLCJ0YXJnZXQiLCJldmVudE5hbWUiLCJvcHRpb25zIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJpc0V2ZW50VGFyZ2V0IiwibWV0aG9kTmFtZSIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJpc05vZGVTdHlsZUV2ZW50RW1pdHRlciIsInRvQ29tbW9uSGFuZGxlclJlZ2lzdHJ5Iiwib24iLCJvZmYiLCJpc0pRdWVyeVN0eWxlRXZlbnRFbWl0dGVyIiwic3ViVGFyZ2V0IiwidGFwIiwidGFwT2JzZXJ2ZXIiLCJpc1Vuc3ViIiwiZmluYWxpemUiLCJQaWVjZSIsImNvbG9yIiwicGllY2VUeXBlIiwiaW1hZ2VVUkwiLCJzZXREaXJlY3Rpb25zIiwiZGlyZWN0aW9ucyIsIlBpZWNlVHlwZSIsInN1cGVyIiwiUEFXTiIsIkJMQUNLIiwiZGlyZWN0aW9uIiwiaGFzTW92ZWQiLCJibGFja1Bhd25EaXJlY3Rpb25zIiwicGF3bkRpcmVjdGlvbnMiLCJCSVNIT1AiLCJLTklHSFQiLCJST09LIiwiUVVFRU4iLCJLSU5HIiwiT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IiLCJTdWJqZWN0IiwiY3VycmVudE9ic2VydmVycyIsIm9ic2VydmVycyIsImhhc0Vycm9yIiwidGhyb3duRXJyb3IiLCJzdWJqZWN0IiwiQW5vbnltb3VzU3ViamVjdCIsIl90aHJvd0lmQ2xvc2VkIiwiX2MiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJfY2hlY2tGaW5hbGl6ZWRTdGF0dXNlcyIsIl9pbm5lclN1YnNjcmliZSIsImFzT2JzZXJ2YWJsZSIsIkJlaGF2aW9yU3ViamVjdCIsIl92YWx1ZSIsImdldFZhbHVlIiwic3Vic2NyaXB0aW9uIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RQcm90byIsImdldEtleXMiLCJrZXlzIiwib2JzZXJ2ZU9uIiwic3Vic2NyaWJlT24iLCJzY2hlZHVsZUFzeW5jSXRlcmFibGUiLCJzY2hlZHVsZU9ic2VydmFibGUiLCJzY2hlZHVsZUFycmF5Iiwic2NoZWR1bGVQcm9taXNlIiwic2NoZWR1bGVJdGVyYWJsZSIsInNjaGVkdWxlUmVhZGFibGVTdHJlYW1MaWtlIiwic2NoZWR1bGVkIiwibGFzdCIsImNvbWJpbmVMYXRlc3QiLCJwb3BTY2hlZHVsZXIiLCJwb3BSZXN1bHRTZWxlY3RvciIsImZpcnN0XzEiLCJrZXkiLCJhcmdzQXJnQXJyYXlPck9iamVjdCIsIm9ic2VydmFibGVzIiwidmFsdWVUcmFuc2Zvcm0iLCJtYXliZVNjaGVkdWxlIiwidmFsdWVzIiwicmVtYWluaW5nRmlyc3RWYWx1ZXMiLCJfbG9vcF8xIiwiaGFzRmlyc3RWYWx1ZSIsImNvbWJpbmVMYXRlc3RJbml0IiwiY3JlYXRlT2JqZWN0IiwiZXhlY3V0ZSIsImZpbHRlciIsInByZWRpY2F0ZSIsImZpbGwiLCJXSElURSIsImNyZWF0ZUNoZXNzQm9hcmQiLCJzdGFydEdhbWUiLCJjaGVzc1RhYmxlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0Iiwicm93IiwiaiIsInNxdWFyZSIsInNldEF0dHJpYnV0ZSIsImN1cnJlbnRQaWVjZSIsInBpZWNlIiwic3JjIiwiYWx0IiwiYXBwZW5kQ2hpbGQiLCJ3aG9Jc1BsYXlpbmciLCJpc1NxdWFyZVZhbGlkIiwiZmluZEF2YWlsYWJsZVNxdWFyZXMiLCJxdWVyeVNlbGVjdG9yQWxsIiwicXVlcnlTZWxlY3RvciIsImlubmVyVGV4dCIsImJvYXJkUG9zdGlvbiIsIm9wcG9zaXRlUGxheWVyQ29sb3IiLCJpc0NoZWNrIiwidG9VcHBlckNhc2UiLCJzdHlsZSIsInBvaW50ZXJFdmVudHMiLCJpc1doaXRlTW92ZSIsInBsYXllckNvbG9yIiwiYmFja2dyb3VuZCIsIm91dGxpbmUiLCJzZWxlY3RQaWVjZSQiLCJldmVudCIsImN1cnJlbnRUYXJnZXQiLCJjaGlsZE5vZGVzIiwiZ2V0QXR0cmlidXRlIiwicGxhY2VQaWVjZSQiLCJvdXRsaW5lQ29sb3IiLCJzYWZlTW92ZXMiLCJjbGlja2VkU3F1YXJlIiwicGllY2VTYWZlTW92ZXMiLCJOdW1iZXIiLCJwcmV2U3F1YXJlIiwibmV4dFNxdWFyZSIsInByZXZTcXVhcmVYIiwicHJldlNxdWFyZVkiLCJuZXh0U3F1YXJlWCIsIm5leHRTcXVhcmVZIiwicGllY2VUb1BsYWNlIiwic2hvd1Bhd25Qcm9tb3Rpb25EaWFsb2ciLCJNYXRoIiwiYWJzIiwicm9vayIsInJvb2tQcmV2WSIsImVuUGFzc2FudFBhd25YIiwiZW5QYXNzYW50UGF3blkiLCJpbm5lckhUTUwiLCJ4UG9zaXRpb25DaGFuZ2VkIiwiY2FuS2luZ0Nhc3RsZSIsImtpbmdDb2xvciIsImtpbmdTaWRlQ2FzdGxlIiwia2luZ1Bvc2l0aW9uWCIsInJvb2tQb3NpdGlvblgiLCJyb29rUG9zaXRpb25ZIiwia2luZyIsImlzU3F1YXJlU2FmZSIsInByZXZYIiwicHJldlkiLCJuZXdYIiwibmV3WSIsIm9sZFBpZWNlIiwibmV3UGllY2UiLCJvcHBvc2l0ZUNvbG9yUGxheWVyIiwiY2hlY2tpbmdOZXh0UG9zaXRpb24iLCJkeCIsImR5IiwibmV4dFBpZWNlIiwiYmFja2dyb3VuZENvbG9yIiwiY3VycmVudFBsYXllckNvbG9yIiwibGlzdE9mQWxsQXZhaWxhYmxlU3F1YXJlcyIsInNhZmVTcXVhcmVzIiwiWCIsIlkiLCJjYW5DYXB0dXJlRW5QYXNzYW50IiwibmV3UGF3blBvc2l0aW9uWCIsIm5ld1Bhd25Qb3NpdGlvblkiLCJjdXJyZW50WCIsImN1cnJlbnRZIiwicGllY2VJbWFnZXMiLCJwYXduUHJvbW9pdGlvblBvcFVwIiwiYnRuQ2xvc2UiLCJkaXNwbGF5IiwicGllY2VJbWFnZSIsImZpZ3VyZU9wdGlvbiIsImZpZ3VyZUltYWdlIiwicHJvbW90ZWRQaWVjZUltYWdlIiwicHJldmVudERlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9