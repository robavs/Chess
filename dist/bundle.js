(()=>{"use strict";var t=function(e,n){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},t(e,n)};function e(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Class extends value "+String(n)+" is not a constructor or null");function r(){this.constructor=e}t(e,n),e.prototype=null===n?Object.create(n):(r.prototype=n.prototype,new r)}function n(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(u){return function(c){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,u[0]&&(s=0)),s;)try{if(n=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return s.label++,{value:u[1],done:!1};case 5:s.label++,r=u[1],u=[0];continue;case 7:u=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){s=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){s.label=u[1];break}if(6===u[0]&&s.label<o[1]){s.label=o[1],o=u;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(u);break}o[2]&&s.ops.pop(),s.trys.pop();continue}u=e.call(t,s)}catch(t){u=[6,t],r=0}finally{n=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}}function r(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,o,i=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)s.push(r.value)}catch(t){o={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return s}function i(t,e,n){if(n||2===arguments.length)for(var r,o=0,i=e.length;o<i;o++)!r&&o in e||(r||(r=Array.prototype.slice.call(e,0,o)),r[o]=e[o]);return t.concat(r||Array.prototype.slice.call(e))}function s(t){return this instanceof s?(this.v=t,this):new s(t)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var u=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function c(t){return"function"==typeof t}function a(t){return c(null==t?void 0:t.then)}function l(t){var e=t((function(t){Error.call(t),t.stack=(new Error).stack}));return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}var f=l((function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}));function h(t,e){if(t){var n=t.indexOf(e);0<=n&&t.splice(n,1)}}var p=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}var e;return t.prototype.unsubscribe=function(){var t,e,n,s,u;if(!this.closed){this.closed=!0;var a=this._parentage;if(a)if(this._parentage=null,Array.isArray(a))try{for(var l=r(a),h=l.next();!h.done;h=l.next())h.value.remove(this)}catch(e){t={error:e}}finally{try{h&&!h.done&&(e=l.return)&&e.call(l)}finally{if(t)throw t.error}}else a.remove(this);var p=this.initialTeardown;if(c(p))try{p()}catch(t){u=t instanceof f?t.errors:[t]}var d=this._finalizers;if(d){this._finalizers=null;try{for(var v=r(d),b=v.next();!b.done;b=v.next()){var w=b.value;try{y(w)}catch(t){u=null!=u?u:[],t instanceof f?u=i(i([],o(u)),o(t.errors)):u.push(t)}}}catch(t){n={error:t}}finally{try{b&&!b.done&&(s=v.return)&&s.call(v)}finally{if(n)throw n.error}}}if(u)throw new f(u)}},t.prototype.add=function(e){var n;if(e&&e!==this)if(this.closed)y(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(n=this._finalizers)&&void 0!==n?n:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&h(e,t)},t.prototype.remove=function(e){var n=this._finalizers;n&&h(n,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t}(),d=p.EMPTY;function v(t){return t instanceof p||t&&"closed"in t&&c(t.remove)&&c(t.add)&&c(t.unsubscribe)}function y(t){c(t)?t():t.unsubscribe()}var b={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},w={setTimeout:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var s=w.delegate;return(null==s?void 0:s.setTimeout)?s.setTimeout.apply(s,i([t,e],o(n))):setTimeout.apply(void 0,i([t,e],o(n)))},clearTimeout:function(t){var e=w.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function m(t){w.setTimeout((function(){var e=b.onUnhandledError;if(!e)throw t;e(t)}))}function g(){}var E=x("C",void 0,void 0);function x(t,e,n){return{kind:t,value:e,error:n}}var T=null;function S(t){if(b.useDeprecatedSynchronousErrorHandling){var e=!T;if(e&&(T={errorThrown:!1,error:null}),t(),e){var n=T,r=n.errorThrown,o=n.error;if(T=null,r)throw o}}else t()}var C=function(t){function n(e){var n=t.call(this)||this;return n.isStopped=!1,e?(n.destination=e,v(e)&&e.add(n)):n.destination=L,n}return e(n,t),n.create=function(t,e,n){return new I(t,e,n)},n.prototype.next=function(t){this.isStopped?W(function(t){return x("N",t,void 0)}(t),this):this._next(t)},n.prototype.error=function(t){this.isStopped?W(x("E",void 0,t),this):(this.isStopped=!0,this._error(t))},n.prototype.complete=function(){this.isStopped?W(E,this):(this.isStopped=!0,this._complete())},n.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},n.prototype._next=function(t){this.destination.next(t)},n.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},n.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},n}(p),_=Function.prototype.bind;function k(t,e){return _.call(t,e)}var A=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var e=this.partialObserver;if(e.next)try{e.next(t)}catch(t){P(t)}},t.prototype.error=function(t){var e=this.partialObserver;if(e.error)try{e.error(t)}catch(t){P(t)}else P(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){P(t)}},t}(),I=function(t){function n(e,n,r){var o,i,s=t.call(this)||this;return c(e)||!e?o={next:null!=e?e:void 0,error:null!=n?n:void 0,complete:null!=r?r:void 0}:s&&b.useDeprecatedNextContext?((i=Object.create(e)).unsubscribe=function(){return s.unsubscribe()},o={next:e.next&&k(e.next,i),error:e.error&&k(e.error,i),complete:e.complete&&k(e.complete,i)}):o=e,s.destination=new A(o),s}return e(n,t),n}(C);function P(t){var e;b.useDeprecatedSynchronousErrorHandling?(e=t,b.useDeprecatedSynchronousErrorHandling&&T&&(T.errorThrown=!0,T.error=e)):m(t)}function W(t,e){var n=b.onStoppedNotification;n&&w.setTimeout((function(){return n(t,e)}))}var L={closed:!0,next:g,error:function(t){throw t},complete:g},H="function"==typeof Symbol&&Symbol.observable||"@@observable";function O(t){return t}var M=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r,o=this,i=(r=t)&&r instanceof C||function(t){return t&&c(t.next)&&c(t.error)&&c(t.complete)}(r)&&v(r)?t:new I(t,e,n);return S((function(){var t=o,e=t.operator,n=t.source;i.add(e?e.call(i,n):n?o._subscribe(i):o._trySubscribe(i))})),i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=K(e))((function(e,r){var o=new I({next:function(e){try{t(e)}catch(t){r(t),o.unsubscribe()}},error:r,complete:e});n.subscribe(o)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[H]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return(0===(n=t).length?O:1===n.length?n[0]:function(t){return n.reduce((function(t,e){return e(t)}),t)})(this);var n},t.prototype.toPromise=function(t){var e=this;return new(t=K(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function K(t){var e;return null!==(e=null!=t?t:b.Promise)&&void 0!==e?e:Promise}function j(t){return c(t[H])}function B(t){return Symbol.asyncIterator&&c(null==t?void 0:t[Symbol.asyncIterator])}function N(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var D="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function q(t){return c(null==t?void 0:t[D])}function U(t){return function(t,e,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(t,e||[]),i=[];return r={},u("next"),u("throw"),u("return"),r[Symbol.asyncIterator]=function(){return this},r;function u(t){o[t]&&(r[t]=function(e){return new Promise((function(n,r){i.push([t,e,n,r])>1||c(t,e)}))})}function c(t,e){try{(n=o[t](e)).value instanceof s?Promise.resolve(n.value.v).then(a,l):f(i[0][2],n)}catch(t){f(i[0][3],t)}var n}function a(t){c("next",t)}function l(t){c("throw",t)}function f(t,e){t(e),i.shift(),i.length&&c(i[0][0],i[0][1])}}(this,arguments,(function(){var e,r,o;return n(this,(function(n){switch(n.label){case 0:e=t.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,s(e.read())];case 3:return r=n.sent(),o=r.value,r.done?[4,s(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,s(o)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function z(t){return c(null==t?void 0:t.getReader)}function G(t){if(t instanceof M)return t;if(null!=t){if(j(t))return i=t,new M((function(t){var e=i[H]();if(c(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(u(t))return o=t,new M((function(t){for(var e=0;e<o.length&&!t.closed;e++)t.next(o[e]);t.complete()}));if(a(t))return n=t,new M((function(t){n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,m)}));if(B(t))return R(t);if(q(t))return e=t,new M((function(t){var n,o;try{for(var i=r(e),s=i.next();!s.done;s=i.next()){var u=s.value;if(t.next(u),t.closed)return}}catch(t){n={error:t}}finally{try{s&&!s.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}t.complete()}));if(z(t))return R(U(t))}var e,n,o,i;throw N(t)}function R(t){return new M((function(e){(function(t,e){var o,i,s,u,c,a,l,f;return c=this,a=void 0,f=function(){var c,a;return n(this,(function(n){switch(n.label){case 0:n.trys.push([0,5,6,11]),o=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t=r(t),e={},o("next"),o("throw"),o("return"),e[Symbol.asyncIterator]=function(){return this},e);function o(n){e[n]=t[n]&&function(e){return new Promise((function(r,o){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,o,(e=t[n](e)).done,e.value)}))}}}(t),n.label=1;case 1:return[4,o.next()];case 2:if((i=n.sent()).done)return[3,4];if(c=i.value,e.next(c),e.closed)return[2];n.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=n.sent(),s={error:a},[3,11];case 6:return n.trys.push([6,,9,10]),i&&!i.done&&(u=o.return)?[4,u.call(o)]:[3,8];case 7:n.sent(),n.label=8;case 8:return[3,10];case 9:if(s)throw s.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,e){function n(t){try{o(f.next(t))}catch(t){e(t)}}function r(t){try{o(f.throw(t))}catch(t){e(t)}}function o(e){var o;e.done?t(e.value):(o=e.value,o instanceof l?o:new l((function(t){t(o)}))).then(n,r)}o((f=f.apply(c,a||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}function V(t){return function(e){if(function(t){return c(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function $(t,e,n,r,o){return new F(t,e,n,r,o)}var F=function(t){function n(e,n,r,o,i,s){var u=t.call(this,e)||this;return u.onFinalize=i,u.shouldUnsubscribe=s,u._next=n?function(t){try{n(t)}catch(t){e.error(t)}}:t.prototype._next,u._error=o?function(t){try{o(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,u._complete=r?function(){try{r()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,u}return e(n,t),n.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var n=this.closed;t.prototype.unsubscribe.call(this),!n&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},n}(C);function Y(t,e){return V((function(n,r){var o=0;n.subscribe($(r,(function(n){r.next(t.call(e,n,o++))})))}))}function Q(t,e,n,r,o){void 0===r&&(r=0),void 0===o&&(o=!1);var i=e.schedule((function(){n(),o?t.add(this.schedule(null,r)):this.unsubscribe()}),r);if(t.add(i),!o)return i}function J(t,e,n){return void 0===n&&(n=1/0),c(e)?J((function(n,r){return Y((function(t,o){return e(n,t,r,o)}))(G(t(n,r)))}),n):("number"==typeof e&&(n=e),V((function(e,r){return function(t,e,n,r,o,i,s,u){var c=[],a=0,l=0,f=!1,h=function(){!f||c.length||a||e.complete()},p=function(t){return a<r?d(t):c.push(t)},d=function(t){a++;var o=!1;G(n(t,l++)).subscribe($(e,(function(t){e.next(t)}),(function(){o=!0}),void 0,(function(){if(o)try{a--;for(;c.length&&a<r;)t=void 0,t=c.shift(),d(t);h()}catch(t){e.error(t)}var t})))};return t.subscribe($(e,p,(function(){f=!0,h()}))),function(){}}(e,r,t,n)})))}var X=Array.isArray;function Z(t){return Y((function(e){return function(t,e){return X(e)?t.apply(void 0,i([],o(e))):t(e)}(t,e)}))}var tt,et=["addListener","removeListener"],nt=["addEventListener","removeEventListener"],rt=["on","off"];function ot(t,e,n,r){if(c(n)&&(r=n,n=void 0),r)return ot(t,e,n).pipe(Z(r));var i=o(function(t){return c(t.addEventListener)&&c(t.removeEventListener)}(t)?nt.map((function(r){return function(o){return t[r](e,o,n)}})):function(t){return c(t.addListener)&&c(t.removeListener)}(t)?et.map(it(t,e)):function(t){return c(t.on)&&c(t.off)}(t)?rt.map(it(t,e)):[],2),s=i[0],a=i[1];if(!s&&u(t))return J((function(t){return ot(t,e,n)}))(G(t));if(!s)throw new TypeError("Invalid event target");return new M((function(t){var e=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];return t.next(1<e.length?e:e[0])};return s(e),function(){return a(e)}}))}function it(t,e){return function(n){return function(r){return t[n](e,r)}}}function st(t,e,n){var r=c(t)||e||n?{next:t,error:e,complete:n}:t;return r?V((function(t,e){var n;null===(n=r.subscribe)||void 0===n||n.call(r);var o=!0;t.subscribe($(e,(function(t){var n;null===(n=r.next)||void 0===n||n.call(r,t),e.next(t)}),(function(){var t;o=!1,null===(t=r.complete)||void 0===t||t.call(r),e.complete()}),(function(t){var n;o=!1,null===(n=r.error)||void 0===n||n.call(r,t),e.error(t)}),(function(){var t,e;o&&(null===(t=r.unsubscribe)||void 0===t||t.call(r)),null===(e=r.finalize)||void 0===e||e.call(r)})))})):O}class ut{constructor(t,e,n,r){this.color=t,this.x=e,this.y=n,this.pieceType=r,this.imageURL=`src/assets/${t} ${r}.png`}setDirections(t){this.directions=t}}!function(t){t.WHITE="white",t.BLACK="black"}(tt||(tt={}));const ct=tt;var at;!function(t){t.PAWN="pawn",t.KNIGHT="knight",t.BISHOP="bishop",t.ROOK="rook",t.QUEEN="queen",t.KING="king"}(at||(at={}));const lt=at;var ft,ht,pt=function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)},dt=function(t,e,n,r,o){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?o.call(t,n):o?o.value=n:e.set(t,n),n};ft=new WeakMap,ht=new WeakMap;const vt=class extends ut{constructor(t,e,n){super(t,e,n,lt.PAWN),ft.set(this,[[1,0],[2,0],[1,1],[1,-1]]),ht.set(this,!1),t===ct.BLACK&&dt(this,ft,pt(this,ft,"f").map((t=>[-1*t[0],t[1]])),"f"),this.setDirections(pt(this,ft,"f"))}get hasMoved(){return pt(this,ht,"f")}set hasMoved(t){dt(this,ht,!0,"f"),dt(this,ft,[[1,0],[1,1],[1,-1]],"f"),this.color===ct.BLACK&&dt(this,ft,this.blackPawnDirections(pt(this,ft,"f")),"f"),this.setDirections(pt(this,ft,"f"))}blackPawnDirections(t){return t.map((t=>[-1*t[0],t[1]]))}};var yt;yt=new WeakMap;const bt=class extends ut{constructor(t,e,n){super(t,e,n,lt.BISHOP),yt.set(this,[[1,1],[1,-1],[-1,1],[-1,-1]]),this.setDirections(function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)}(this,yt,"f"))}};var wt;wt=new WeakMap;const mt=class extends ut{constructor(t,e,n){super(t,e,n,lt.KNIGHT),wt.set(this,[[1,2],[1,-2],[-1,2],[-1,-2],[2,1],[2,-1],[-2,1],[-2,-1]]),this.setDirections(function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)}(this,wt,"f"))}};var gt,Et,xt=function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)};gt=new WeakMap,Et=new WeakMap;const Tt=class extends ut{constructor(t,e,n){super(t,e,n,lt.ROOK),gt.set(this,[[1,0],[-1,-0],[0,1],[0,-1]]),Et.set(this,!1),this.setDirections(xt(this,gt,"f"))}get hasMoved(){return xt(this,Et,"f")}set hasMoved(t){!function(t,e,n,r,o){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===r?o.call(t,n):o?o.value=n:e.set(t,n)}(this,Et,!0,"f")}};var St;St=new WeakMap;const Ct=class extends ut{constructor(t,e,n){super(t,e,n,lt.QUEEN),St.set(this,[[0,1],[0,-1],[1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1]]),this.setDirections(function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)}(this,St,"f"))}};var _t,kt,At=function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)};_t=new WeakMap,kt=new WeakMap;const It=class extends ut{constructor(t,e,n){super(t,e,n,lt.KING),_t.set(this,[[0,1],[0,-1],[1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1]]),kt.set(this,!1),this.setDirections(At(this,_t,"f"))}get hasMoved(){return At(this,kt,"f")}set hasMoved(t){!function(t,e,n,r,o){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===r?o.call(t,n):o?o.value=n:e.set(t,n)}(this,kt,!0,"f")}};var Pt=l((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),Wt=function(t){function n(){var e=t.call(this)||this;return e.closed=!1,e.currentObservers=null,e.observers=[],e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return e(n,t),n.prototype.lift=function(t){var e=new Lt(this,this);return e.operator=t,e},n.prototype._throwIfClosed=function(){if(this.closed)throw new Pt},n.prototype.next=function(t){var e=this;S((function(){var n,o;if(e._throwIfClosed(),!e.isStopped){e.currentObservers||(e.currentObservers=Array.from(e.observers));try{for(var i=r(e.currentObservers),s=i.next();!s.done;s=i.next())s.value.next(t)}catch(t){n={error:t}}finally{try{s&&!s.done&&(o=i.return)&&o.call(i)}finally{if(n)throw n.error}}}}))},n.prototype.error=function(t){var e=this;S((function(){if(e._throwIfClosed(),!e.isStopped){e.hasError=e.isStopped=!0,e.thrownError=t;for(var n=e.observers;n.length;)n.shift().error(t)}}))},n.prototype.complete=function(){var t=this;S((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var e=t.observers;e.length;)e.shift().complete()}}))},n.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(n.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),n.prototype._trySubscribe=function(e){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,e)},n.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},n.prototype._innerSubscribe=function(t){var e=this,n=this,r=n.hasError,o=n.isStopped,i=n.observers;return r||o?d:(this.currentObservers=null,i.push(t),new p((function(){e.currentObservers=null,h(i,t)})))},n.prototype._checkFinalizedStatuses=function(t){var e=this,n=e.hasError,r=e.thrownError,o=e.isStopped;n?t.error(r):o&&t.complete()},n.prototype.asObservable=function(){var t=new M;return t.source=this,t},n.create=function(t,e){return new Lt(t,e)},n}(M),Lt=function(t){function n(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return e(n,t),n.prototype.next=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.next)||void 0===n||n.call(e,t)},n.prototype.error=function(t){var e,n;null===(n=null===(e=this.destination)||void 0===e?void 0:e.error)||void 0===n||n.call(e,t)},n.prototype.complete=function(){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===e||e.call(t)},n.prototype._subscribe=function(t){var e,n;return null!==(n=null===(e=this.source)||void 0===e?void 0:e.subscribe(t))&&void 0!==n?n:d},n}(Wt),Ht=function(t){function n(e){var n=t.call(this)||this;return n._value=e,n}return e(n,t),Object.defineProperty(n.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),n.prototype._subscribe=function(e){var n=t.prototype._subscribe.call(this,e);return!n.closed&&e.next(this._value),n},n.prototype.getValue=function(){var t=this,e=t.hasError,n=t.thrownError,r=t._value;if(e)throw n;return this._throwIfClosed(),r},n.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},n}(Wt),Ot=Array.isArray,Mt=Object.getPrototypeOf,Kt=Object.prototype,jt=Object.keys;function Bt(t,e){return void 0===e&&(e=0),V((function(n,r){n.subscribe($(r,(function(n){return Q(r,t,(function(){return r.next(n)}),e)}),(function(){return Q(r,t,(function(){return r.complete()}),e)}),(function(n){return Q(r,t,(function(){return r.error(n)}),e)})))}))}function Nt(t,e){return void 0===e&&(e=0),V((function(n,r){r.add(t.schedule((function(){return n.subscribe(r)}),e))}))}function Dt(t,e){if(!t)throw new Error("Iterable cannot be null");return new M((function(n){Q(n,e,(function(){var r=t[Symbol.asyncIterator]();Q(n,e,(function(){r.next().then((function(t){t.done?n.complete():n.next(t.value)}))}),0,!0)}))}))}function qt(t,e){return e?function(t,e){if(null!=t){if(j(t))return function(t,e){return G(t).pipe(Nt(e),Bt(e))}(t,e);if(u(t))return function(t,e){return new M((function(n){var r=0;return e.schedule((function(){r===t.length?n.complete():(n.next(t[r++]),n.closed||this.schedule())}))}))}(t,e);if(a(t))return function(t,e){return G(t).pipe(Nt(e),Bt(e))}(t,e);if(B(t))return Dt(t,e);if(q(t))return function(t,e){return new M((function(n){var r;return Q(n,e,(function(){r=t[D](),Q(n,e,(function(){var t,e,o;try{e=(t=r.next()).value,o=t.done}catch(t){return void n.error(t)}o?n.complete():n.next(e)}),0,!0)})),function(){return c(null==r?void 0:r.return)&&r.return()}}))}(t,e);if(z(t))return function(t,e){return Dt(U(t),e)}(t,e)}throw N(t)}(t,e):G(t)}function Ut(t){return t[t.length-1]}function zt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=function(t){return(e=Ut(t))&&c(e.schedule)?t.pop():void 0;var e}(t),r=function(t){return c(Ut(t))?t.pop():void 0}(t),o=function(t){if(1===t.length){var e=t[0];if(Ot(e))return{args:e,keys:null};if((r=e)&&"object"==typeof r&&Mt(r)===Kt){var n=jt(e);return{args:n.map((function(t){return e[t]})),keys:n}}}var r;return{args:t,keys:null}}(t),i=o.args,s=o.keys;if(0===i.length)return qt([],n);var u=new M(function(t,e,n){return void 0===n&&(n=O),function(r){Gt(e,(function(){for(var o=t.length,i=new Array(o),s=o,u=o,c=function(o){Gt(e,(function(){var c=qt(t[o],e),a=!1;c.subscribe($(r,(function(t){i[o]=t,a||(a=!0,u--),u||r.next(n(i.slice()))}),(function(){--s||r.complete()})))}),r)},a=0;a<o;a++)c(a)}),r)}}(i,n,s?function(t){return function(t,e){return t.reduce((function(t,n,r){return t[n]=e[r],t}),{})}(s,t)}:O));return r?u.pipe(Z(r)):u}function Gt(t,e,n){t?Q(n,t,e):e()}function Rt(t,e){return V((function(n,r){var o=0;n.subscribe($(r,(function(n){return t.call(e,n,o++)&&r.next(n)})))}))}var Vt,$t,Ft,Yt,Qt,Jt,Xt,Zt,te,ee,ne,re=function(t,e,n,r,o){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?o.call(t,n):o?o.value=n:e.set(t,n),n},oe=function(t,e,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!r:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(t):r?r.value:e.get(t)};Vt=new WeakMap,$t=new WeakMap,Ft=new WeakMap,Yt=new WeakMap,Qt=new WeakMap,Jt=new WeakMap,Xt=new WeakMap,Zt=new WeakMap,te=new WeakMap,ee=new WeakMap,ne=new WeakMap,new class{constructor(){Vt.set(this,void 0),$t.set(this,Array(8).fill(0).map((()=>Array(8).fill(0)))),Ft.set(this,new Ht(!0)),Yt.set(this,new Ht(ct.WHITE)),Qt.set(this,void 0),Jt.set(this,void 0),Xt.set(this,void 0),Zt.set(this,new Ht(!0)),te.set(this,new Ht("")),ee.set(this,void 0),ne.set(this,void 0),re(this,Vt,[[new Tt(ct.WHITE,0,0),new mt(ct.WHITE,0,1),new bt(ct.WHITE,0,2),new Ct(ct.WHITE,0,3),new It(ct.WHITE,0,4),new bt(ct.WHITE,0,5),new mt(ct.WHITE,0,6),new Tt(ct.WHITE,0,7)],[new vt(ct.WHITE,1,0),new vt(ct.WHITE,1,1),new vt(ct.WHITE,1,2),new vt(ct.WHITE,1,3),new vt(ct.WHITE,1,4),new vt(ct.WHITE,1,5),new vt(ct.WHITE,1,6),new vt(ct.WHITE,1,7)],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[new vt(ct.BLACK,6,0),new vt(ct.BLACK,6,1),new vt(ct.BLACK,6,2),new vt(ct.BLACK,6,3),new vt(ct.BLACK,6,4),new vt(ct.BLACK,6,5),new vt(ct.BLACK,6,6),new vt(ct.BLACK,6,7)],[new Tt(ct.BLACK,7,0),new mt(ct.BLACK,7,1),new bt(ct.BLACK,7,2),new Ct(ct.BLACK,7,3),new It(ct.BLACK,7,4),new bt(ct.BLACK,7,5),new mt(ct.BLACK,7,6),new Tt(ct.BLACK,7,7)]],"f"),this.createChessBoard(),this.startGame()}createChessBoard(){const t=document.createElement("table");t.classList.add("chess-board");for(let e=7;e>=0;e--){const n=document.createElement("tr");for(let t=0;t<8;t++){const r=document.createElement("th");r.classList.add(!(e%2||t%2)||e%2&&t%2?"dark":"light"),r.setAttribute("x",e.toString()),r.setAttribute("y",t.toString());const o=oe(this,Vt,"f")[e][t];if(null!==o){const t=document.createElement("img");t.src=o.imageURL,t.alt=o.color+" "+o.pieceType,t.setAttribute("color",o.color),r.appendChild(t)}n.appendChild(r),oe(this,$t,"f")[e][t]=r}t.appendChild(n)}const e=document.createElement("h2");e.classList.add("whoIsPlaying"),document.body.appendChild(e),document.body.appendChild(t)}isSquareValid(t,e){return t>=0&&e>=0&&t<8&&e<8}startGame(){re(this,ee,new Ht(this.findAvailableSquares(ct.WHITE)),"f"),re(this,Jt,[...document.querySelectorAll("th")],"f"),re(this,Xt,ot(oe(this,Jt,"f"),"click"),"f"),oe(this,te,"f").subscribe({next:t=>{document.querySelector(".whoIsPlaying").innerText=t}}),oe(this,ee,"f").subscribe({next:t=>{const e=oe(this,Yt,"f").value===ct.WHITE?ct.BLACK:ct.WHITE,n=this.isCheck(!1,e);Object.keys(t).length?n?oe(this,te,"f").next(oe(this,Yt,"f").value.toUpperCase()+" is playing, but is in check"):oe(this,te,"f").next(oe(this,Yt,"f").value.toUpperCase()+" is playing"):(oe(this,te,"f").next(n?e.toUpperCase()+" win by checkmate":"Stalemate"),oe(this,Jt,"f").forEach((t=>t.style.pointerEvents="none")))}}),oe(this,Ft,"f").subscribe({next:t=>{oe(this,Yt,"f").next(t?ct.WHITE:ct.BLACK)}}),oe(this,Yt,"f").subscribe({next:t=>{oe(this,Jt,"f").forEach((t=>{t.style.background=""})),oe(this,ee,"f").next(this.findAvailableSquares(t)),oe(this,Jt,"f").forEach((t=>{t.style.outline=""}))}});const t=oe(this,Xt,"f").pipe(Y((t=>t.currentTarget)),Rt((t=>t.childNodes.length>0)),Rt((t=>t.childNodes[0].getAttribute("color")===oe(this,Yt,"f").value))),e=oe(this,Xt,"f").pipe(Y((t=>t.currentTarget)),Rt((t=>"red"===t.style.outlineColor)),st((()=>oe(this,Zt,"f").next(!0))));zt([oe(this,ee,"f"),t]).subscribe({next:([t,e])=>{if("blue"===e.style.outlineColor)e.style.outline="",oe(this,Jt,"f").forEach((t=>t.style.outline=""));else{oe(this,Jt,"f").forEach((t=>t.style.outline="")),e.style.outline="5px solid blue";const n=t[Number(e.getAttribute("x"))+","+Number(e.getAttribute("y"))];null==n||n.forEach((t=>t.style.outline="5px solid red"))}}}),zt([t,e]).subscribe({next:([t,e])=>{if(oe(this,Zt,"f").value){const n=Number(t.getAttribute("x")),r=Number(t.getAttribute("y")),o=Number(e.getAttribute("x")),i=Number(e.getAttribute("y")),s=oe(this,Vt,"f")[n][r];if(s instanceof vt&&(7===o||0===o))this.showPawnPromotionDialog(o,i,n,r);else{if(s instanceof It&&2===Math.abs(i-r)){const t=oe(this,Vt,"f")[o][6===i?7:0],e=t.y;t.y=6===i?5:3,oe(this,Vt,"f")[t.x][t.y]=t,oe(this,Vt,"f")[o][e]=null,oe(this,$t,"f")[t.x][t.y].appendChild(oe(this,$t,"f")[o][e].childNodes[0])}else if(s instanceof vt&&null===oe(this,Vt,"f")[o][i]&&1===Math.abs(i-r)){const t=o+(s.color===ct.WHITE?-1:1),e=i;oe(this,Vt,"f")[t][e]=null,oe(this,$t,"f")[t][e].innerHTML=""}oe(this,Vt,"f")[n][r]=null,oe(this,Vt,"f")[o][i]=s,s.x=o,s.y=i,e.innerHTML="",e.appendChild(t.childNodes[0]),re(this,Qt,{piece:s,xPositionChanged:Math.abs(n-o)},"f"),oe(this,Ft,"f").next(!oe(this,Ft,"f").value),oe(this,Zt,"f").next(!1)}(s instanceof It||s instanceof Tt||s instanceof vt)&&(s.hasMoved=!0)}}})}canKingCastle(t,e){const n=t===ct.WHITE?0:7,r=n,o=e?7:0,i=oe(this,Vt,"f")[n][4],s=oe(this,Vt,"f")[r][o],u=t===ct.WHITE?ct.BLACK:ct.WHITE,c=this.isCheck(!1,u);return i instanceof It&&!i.hasMoved&&!c&&s instanceof Tt&&!s.hasMoved&&!oe(this,Vt,"f")[n][4+(e?1:-1)]&&!oe(this,Vt,"f")[n][4+(e?2:-2)]&&!(!e&&oe(this,Vt,"f")[n][4+(e?3:-3)])&&this.isSquareSafe(n,4,n,4+(e?1:-1))&&this.isSquareSafe(n,4,n,4+(e?2:-2))}isSquareSafe(t,e,n,r){const o=oe(this,Vt,"f")[t][e],i=oe(this,Vt,"f")[n][r];if(i&&i.color===o.color)return!1;oe(this,Vt,"f")[n][r]=o,oe(this,Vt,"f")[t][e]=null;const s=oe(this,Yt,"f").value===ct.WHITE?ct.BLACK:ct.WHITE,u=this.isCheck(!0,s);return oe(this,Vt,"f")[t][e]=o,oe(this,Vt,"f")[n][r]=i,!u}isCheck(t=!1,e){for(const n of oe(this,Vt,"f"))for(const r of n)if(r&&r.color===e)if(r instanceof vt||r instanceof It||r instanceof mt)for(const[e,n]of r.directions){const o=r.x+e,i=r.y+n;if(r instanceof vt&&0===n)continue;if(!this.isSquareValid(o,i))continue;const s=oe(this,Vt,"f")[o][i];if(s instanceof It&&r.color!==s.color)return t||(oe(this,$t,"f")[o][i].style.backgroundColor="red"),!0}else for(const[e,n]of r.directions){let o=r.x+e,i=r.y+n;for(;this.isSquareValid(o,i);){const s=oe(this,Vt,"f")[o][i];if(s instanceof It&&r.color!==s.color)return t||(oe(this,$t,"f")[o][i].style.backgroundColor="red"),!0;if(null!==oe(this,Vt,"f")[o][i])break;o+=e,i+=n}}return!1}findAvailableSquares(t){const e={};for(const n of oe(this,Vt,"f"))for(const r of n){if(!r||r.color!==t)continue;const n=[],o=r.x,i=r.y;for(const[t,s]of r.directions){let u=o+t,c=i+s;if(!this.isSquareValid(u,c))continue;let a=oe(this,Vt,"f")[u][c];if(r instanceof vt){if(2===t||-2===t){if(null!==a)continue;if(null!==oe(this,Vt,"f")[u+(2===t?-1:1)][c])continue}if((1===t||-1===t)&&0===s&&null!==a)continue;if(!(1!==t&&-1!==t||null!==a||1!==s&&-1!==s))continue}if(r instanceof vt||r instanceof It||r instanceof mt)null!==a&&a.color===oe(this,Yt,"f").value||this.isSquareSafe(o,i,u,c)&&n.push(oe(this,$t,"f")[u][c]);else for(;this.isSquareValid(u,c)&&(a=oe(this,Vt,"f")[u][c],null===a||a.color!==oe(this,Yt,"f").value)&&(this.isSquareSafe(o,i,u,c)&&n.push(oe(this,$t,"f")[u][c]),null===a);)u+=t,c+=s;0!==n.length&&(e[o.toString()+","+i.toString()]=n)}}const n=t===ct.WHITE?0:7;return this.canKingCastle(t,!0)&&e[n+",4"].push(oe(this,$t,"f")[n][6]),this.canKingCastle(t,!1)&&e[n+",4"].push(oe(this,$t,"f")[n][2]),this.canCaptureEnPassant(t,e),e}canCaptureEnPassant(t,e){for(const n of oe(this,Vt,"f"))for(const r of n)if(oe(this,Qt,"f")&&r instanceof vt&&oe(this,Qt,"f").piece instanceof vt&&r.color===t&&oe(this,Qt,"f").piece.color!==r.color&&2===oe(this,Qt,"f").xPositionChanged&&r.x===oe(this,Qt,"f").piece.x&&1===Math.abs(r.y-oe(this,Qt,"f").piece.y)){const t=r.x+(r.color===ct.WHITE?1:-1),n=oe(this,Qt,"f").piece.y;oe(this,Vt,"f")[oe(this,Qt,"f").piece.x][oe(this,Qt,"f").piece.y]=null,this.isSquareSafe(r.x,r.y,t,n)&&(e[r.x+","+r.y]||(e[r.x+","+r.y]=[]),e[r.x+","+r.y].push(oe(this,$t,"f")[t][n])),oe(this,Vt,"f")[oe(this,Qt,"f").piece.x][oe(this,Qt,"f").piece.y]=oe(this,Qt,"f").piece}}showPawnPromotionDialog(t,e,n,r){const o=["bishop","knight","rook","queen"],i=document.createElement("div");i.classList.add("pawn-promotion-popup"),document.body.appendChild(i);const s=document.createElement("div");s.classList.add("btn-close"),i.appendChild(s),re(this,ne,ot(s,"click"),"f"),oe(this,ne,"f").pipe(st((()=>{i.style.display="none",oe(this,Zt,"f").next(!1)}))).subscribe();for(const s of o){const o=document.createElement("div");o.classList.add("figure-option");const u=document.createElement("img");u.src=`src/assets/${oe(this,Yt,"f").value} ${s}.png`,u.alt=oe(this,Yt,"f").value+" "+s,u.addEventListener("click",(()=>{let o;switch(s){case lt.QUEEN:o=new Ct(oe(this,Yt,"f").value,t,e);break;case lt.ROOK:o=new Tt(oe(this,Yt,"f").value,t,e);break;case lt.BISHOP:o=new bt(oe(this,Yt,"f").value,t,e);break;case lt.KNIGHT:default:o=new mt(oe(this,Yt,"f").value,t,e)}oe(this,Vt,"f")[t][e]=o,oe(this,Vt,"f")[n][r]=null;const u=document.createElement("img");u.src=`src/assets/${oe(this,Yt,"f").value} ${s}.png`,u.alt=oe(this,Yt,"f").value+" "+s,u.setAttribute("color",oe(this,Yt,"f").value),oe(this,$t,"f")[t][e].innerHTML="",oe(this,$t,"f")[t][e].appendChild(u),oe(this,$t,"f")[n][r].innerHTML="",oe(this,Ft,"f").next(!oe(this,Ft,"f").value),oe(this,Zt,"f").next(!1),i.style.display="none"})),o.appendChild(u),i.appendChild(o)}}},ot(document,"contextmenu").pipe(st((t=>t.preventDefault()))).subscribe(),ot(document,"dragstart").pipe(st((t=>t.preventDefault()))).subscribe()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,