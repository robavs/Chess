(()=>{"use strict";var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};function e(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}function r(t,e){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(a){return function(c){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;i&&(i=0,a[0]&&(s=0)),s;)try{if(r=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],n=0}finally{r=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}function n(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,i=r.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(n=i.next()).done;)s.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return s}function i(t,e,r){if(r||2===arguments.length)for(var n,o=0,i=e.length;o<i;o++)!n&&o in e||(n||(n=Array.prototype.slice.call(e,0,o)),n[o]=e[o]);return t.concat(n||Array.prototype.slice.call(e))}function s(t){return this instanceof s?(this.v=t,this):new s(t)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var a=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function c(t){return"function"==typeof t}function u(t){var e=t((function(t){Error.call(t),t.stack=(new Error).stack}));return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}var l=u((function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}));function f(t,e){if(t){var r=t.indexOf(e);0<=r&&t.splice(r,1)}}var h=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}var e;return t.prototype.unsubscribe=function(){var t,e,r,s,a;if(!this.closed){this.closed=!0;var u=this._parentage;if(u)if(this._parentage=null,Array.isArray(u))try{for(var f=n(u),h=f.next();!h.done;h=f.next())h.value.remove(this)}catch(e){t={error:e}}finally{try{h&&!h.done&&(e=f.return)&&e.call(f)}finally{if(t)throw t.error}}else u.remove(this);var p=this.initialTeardown;if(c(p))try{p()}catch(t){a=t instanceof l?t.errors:[t]}var d=this._finalizers;if(d){this._finalizers=null;try{for(var y=n(d),b=y.next();!b.done;b=y.next()){var w=b.value;try{v(w)}catch(t){a=null!=a?a:[],t instanceof l?a=i(i([],o(a)),o(t.errors)):a.push(t)}}}catch(t){r={error:t}}finally{try{b&&!b.done&&(s=y.return)&&s.call(y)}finally{if(r)throw r.error}}}if(a)throw new l(a)}},t.prototype.add=function(e){var r;if(e&&e!==this)if(this.closed)v(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(r=this._finalizers)&&void 0!==r?r:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&f(e,t)},t.prototype.remove=function(e){var r=this._finalizers;r&&f(r,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t}(),p=h.EMPTY;function d(t){return t instanceof h||t&&"closed"in t&&c(t.remove)&&c(t.add)&&c(t.unsubscribe)}function v(t){c(t)?t():t.unsubscribe()}var y={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},b={setTimeout:function(t,e){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];var s=b.delegate;return(null==s?void 0:s.setTimeout)?s.setTimeout.apply(s,i([t,e],o(r))):setTimeout.apply(void 0,i([t,e],o(r)))},clearTimeout:function(t){var e=b.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function w(t){b.setTimeout((function(){var e=y.onUnhandledError;if(!e)throw t;e(t)}))}function m(){}var E=g("C",void 0,void 0);function g(t,e,r){return{kind:t,value:e,error:r}}var S=null;function x(t){if(y.useDeprecatedSynchronousErrorHandling){var e=!S;if(e&&(S={errorThrown:!1,error:null}),t(),e){var r=S,n=r.errorThrown,o=r.error;if(S=null,n)throw o}}else t()}var T=function(t){function r(e){var r=t.call(this)||this;return r.isStopped=!1,e?(r.destination=e,d(e)&&e.add(r)):r.destination=W,r}return e(r,t),r.create=function(t,e,r){return new k(t,e,r)},r.prototype.next=function(t){this.isStopped?A(function(t){return g("N",t,void 0)}(t),this):this._next(t)},r.prototype.error=function(t){this.isStopped?A(g("E",void 0,t),this):(this.isStopped=!0,this._error(t))},r.prototype.complete=function(){this.isStopped?A(E,this):(this.isStopped=!0,this._complete())},r.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},r.prototype._next=function(t){this.destination.next(t)},r.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},r.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},r}(h),C=Function.prototype.bind;function _(t,e){return C.call(t,e)}var P=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var e=this.partialObserver;if(e.next)try{e.next(t)}catch(t){I(t)}},t.prototype.error=function(t){var e=this.partialObserver;if(e.error)try{e.error(t)}catch(t){I(t)}else I(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){I(t)}},t}(),k=function(t){function r(e,r,n){var o,i,s=t.call(this)||this;return c(e)||!e?o={next:null!=e?e:void 0,error:null!=r?r:void 0,complete:null!=n?n:void 0}:s&&y.useDeprecatedNextContext?((i=Object.create(e)).unsubscribe=function(){return s.unsubscribe()},o={next:e.next&&_(e.next,i),error:e.error&&_(e.error,i),complete:e.complete&&_(e.complete,i)}):o=e,s.destination=new P(o),s}return e(r,t),r}(T);function I(t){var e;y.useDeprecatedSynchronousErrorHandling?(e=t,y.useDeprecatedSynchronousErrorHandling&&S&&(S.errorThrown=!0,S.error=e)):w(t)}function A(t,e){var r=y.onStoppedNotification;r&&b.setTimeout((function(){return r(t,e)}))}var W={closed:!0,next:m,error:function(t){throw t},complete:m},L="function"==typeof Symbol&&Symbol.observable||"@@observable";function H(t){return t}var O=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var r=new t;return r.source=this,r.operator=e,r},t.prototype.subscribe=function(t,e,r){var n,o=this,i=(n=t)&&n instanceof T||function(t){return t&&c(t.next)&&c(t.error)&&c(t.complete)}(n)&&d(n)?t:new k(t,e,r);return x((function(){var t=o,e=t.operator,r=t.source;i.add(e?e.call(i,r):r?o._subscribe(i):o._trySubscribe(i))})),i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var r=this;return new(e=M(e))((function(e,n){var o=new k({next:function(e){try{t(e)}catch(t){n(t),o.unsubscribe()}},error:n,complete:e});r.subscribe(o)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[L]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return(0===(r=t).length?H:1===r.length?r[0]:function(t){return r.reduce((function(t,e){return e(t)}),t)})(this);var r},t.prototype.toPromise=function(t){var e=this;return new(t=M(t))((function(t,r){var n;e.subscribe((function(t){return n=t}),(function(t){return r(t)}),(function(){return t(n)}))}))},t.create=function(e){return new t(e)},t}();function M(t){var e;return null!==(e=null!=t?t:y.Promise)&&void 0!==e?e:Promise}var K="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function q(t){if(t instanceof O)return t;if(null!=t){if(function(t){return c(t[L])}(t))return l=t,new O((function(t){var e=l[L]();if(c(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(a(t))return u=t,new O((function(t){for(var e=0;e<u.length&&!t.closed;e++)t.next(u[e]);t.complete()}));if(c(null==(i=t)?void 0:i.then))return o=t,new O((function(t){o.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,w)}));if(function(t){return Symbol.asyncIterator&&c(null==t?void 0:t[Symbol.asyncIterator])}(t))return B(t);if(function(t){return c(null==t?void 0:t[K])}(t))return e=t,new O((function(t){var r,o;try{for(var i=n(e),s=i.next();!s.done;s=i.next()){var a=s.value;if(t.next(a),t.closed)return}}catch(t){r={error:t}}finally{try{s&&!s.done&&(o=i.return)&&o.call(i)}finally{if(r)throw r.error}}t.complete()}));if(function(t){return c(null==t?void 0:t.getReader)}(t))return B(function(t){return function(t,e,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,o=r.apply(t,e||[]),i=[];return n={},a("next"),a("throw"),a("return"),n[Symbol.asyncIterator]=function(){return this},n;function a(t){o[t]&&(n[t]=function(e){return new Promise((function(r,n){i.push([t,e,r,n])>1||c(t,e)}))})}function c(t,e){try{(r=o[t](e)).value instanceof s?Promise.resolve(r.value.v).then(u,l):f(i[0][2],r)}catch(t){f(i[0][3],t)}var r}function u(t){c("next",t)}function l(t){c("throw",t)}function f(t,e){t(e),i.shift(),i.length&&c(i[0][0],i[0][1])}}(this,arguments,(function(){var e,n,o;return r(this,(function(r){switch(r.label){case 0:e=t.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,s(e.read())];case 3:return n=r.sent(),o=n.value,n.done?[4,s(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,s(o)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}(t))}var e,o,i,u,l;throw function(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}(t)}function B(t){return new O((function(e){(function(t,e){var o,i,s,a,c,u,l,f;return c=this,u=void 0,f=function(){var c,u;return r(this,(function(r){switch(r.label){case 0:r.trys.push([0,5,6,11]),o=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,r=t[Symbol.asyncIterator];return r?r.call(t):(t=n(t),e={},o("next"),o("throw"),o("return"),e[Symbol.asyncIterator]=function(){return this},e);function o(r){e[r]=t[r]&&function(e){return new Promise((function(n,o){!function(t,e,r,n){Promise.resolve(n).then((function(e){t({value:e,done:r})}),e)}(n,o,(e=t[r](e)).done,e.value)}))}}}(t),r.label=1;case 1:return[4,o.next()];case 2:if((i=r.sent()).done)return[3,4];if(c=i.value,e.next(c),e.closed)return[2];r.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return u=r.sent(),s={error:u},[3,11];case 6:return r.trys.push([6,,9,10]),i&&!i.done&&(a=o.return)?[4,a.call(o)]:[3,8];case 7:r.sent(),r.label=8;case 8:return[3,10];case 9:if(s)throw s.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,e){function r(t){try{o(f.next(t))}catch(t){e(t)}}function n(t){try{o(f.throw(t))}catch(t){e(t)}}function o(e){var o;e.done?t(e.value):(o=e.value,o instanceof l?o:new l((function(t){t(o)}))).then(r,n)}o((f=f.apply(c,u||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}function j(t){return function(e){if(function(t){return c(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function N(t,e,r,n,o){return new D(t,e,r,n,o)}var D=function(t){function r(e,r,n,o,i,s){var a=t.call(this,e)||this;return a.onFinalize=i,a.shouldUnsubscribe=s,a._next=r?function(t){try{r(t)}catch(t){e.error(t)}}:t.prototype._next,a._error=o?function(t){try{o(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,a._complete=n?function(){try{n()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,a}return e(r,t),r.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var r=this.closed;t.prototype.unsubscribe.call(this),!r&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},r}(T);function U(t,e){return j((function(r,n){var o=0;r.subscribe(N(n,(function(r){n.next(t.call(e,r,o++))})))}))}function z(t,e,r){return void 0===r&&(r=1/0),c(e)?z((function(r,n){return U((function(t,o){return e(r,t,n,o)}))(q(t(r,n)))}),r):("number"==typeof e&&(r=e),j((function(e,n){return function(t,e,r,n,o,i,s,a){var c=[],u=0,l=0,f=!1,h=function(){!f||c.length||u||e.complete()},p=function(t){return u<n?d(t):c.push(t)},d=function(t){u++;var o=!1;q(r(t,l++)).subscribe(N(e,(function(t){e.next(t)}),(function(){o=!0}),void 0,(function(){if(o)try{u--;for(var t=function(){var t=c.shift();d(t)};c.length&&u<n;)t();h()}catch(t){e.error(t)}})))};return t.subscribe(N(e,p,(function(){f=!0,h()}))),function(){}}(e,n,t,r)})))}var F=Array.isArray;var G,R=["addListener","removeListener"],V=["addEventListener","removeEventListener"],Y=["on","off"];function $(t,e,r,n){if(c(r)&&(n=r,r=void 0),n)return $(t,e,r).pipe((s=n,U((function(t){return function(t,e){return F(e)?t.apply(void 0,i([],o(e))):t(e)}(s,t)}))));var s,u=o(function(t){return c(t.addEventListener)&&c(t.removeEventListener)}(t)?V.map((function(n){return function(o){return t[n](e,o,r)}})):function(t){return c(t.addListener)&&c(t.removeListener)}(t)?R.map(Q(t,e)):function(t){return c(t.on)&&c(t.off)}(t)?Y.map(Q(t,e)):[],2),l=u[0],f=u[1];if(!l&&a(t))return z((function(t){return $(t,e,r)}))(q(t));if(!l)throw new TypeError("Invalid event target");return new O((function(t){var e=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return t.next(1<e.length?e:e[0])};return l(e),function(){return f(e)}}))}function Q(t,e){return function(r){return function(n){return t[r](e,n)}}}function J(t,e,r){var n=c(t)||e||r?{next:t,error:e,complete:r}:t;return n?j((function(t,e){var r;null===(r=n.subscribe)||void 0===r||r.call(n);var o=!0;t.subscribe(N(e,(function(t){var r;null===(r=n.next)||void 0===r||r.call(n,t),e.next(t)}),(function(){var t;o=!1,null===(t=n.complete)||void 0===t||t.call(n),e.complete()}),(function(t){var r;o=!1,null===(r=n.error)||void 0===r||r.call(n,t),e.error(t)}),(function(){var t,e;o&&(null===(t=n.unsubscribe)||void 0===t||t.call(n)),null===(e=n.finalize)||void 0===e||e.call(n)})))})):H}class X{constructor(t,e,r,n){this.color=t,this.x=e,this.y=r,this.imageURL=`src/assets/${t} ${n}.png`}setDirections(t){this.directions=t}}!function(t){t.WHITE="white",t.BLACK="black"}(G||(G={}));const Z=G;var tt;!function(t){t.PAWN="pawn",t.KNIGHT="knight",t.BISHOP="bishop",t.ROOK="rook",t.QUEEN="queen",t.KING="king"}(tt||(tt={}));const et=tt;var rt,nt,ot=function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)},it=function(t,e,r,n,o){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?o.call(t,r):o?o.value=r:e.set(t,r),r};rt=new WeakMap,nt=new WeakMap;const st=class extends X{constructor(t,e,r){super(t,e,r,et.PAWN),rt.set(this,[[1,0],[2,0],[1,1],[1,-1]]),nt.set(this,!1),t===Z.BLACK&&it(this,rt,ot(this,rt,"f").map((t=>[-1*t[0],t[1]])),"f"),this.setDirections(ot(this,rt,"f"))}get hasMoved(){return ot(this,nt,"f")}set hasMoved(t){it(this,nt,!0,"f"),it(this,rt,[[1,0],[1,1],[1,-1]],"f"),this.color===Z.BLACK&&it(this,rt,this.blackPawnDirections(ot(this,rt,"f")),"f"),this.setDirections(ot(this,rt,"f"))}blackPawnDirections(t){return t.map((t=>[-1*t[0],t[1]]))}};var at;at=new WeakMap;const ct=class extends X{constructor(t,e,r){super(t,e,r,et.BISHOP),at.set(this,[[1,1],[1,-1],[-1,1],[-1,-1]]),this.setDirections(function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)}(this,at,"f"))}};var ut;ut=new WeakMap;const lt=class extends X{constructor(t,e,r){super(t,e,r,et.KNIGHT),ut.set(this,[[1,2],[1,-2],[-1,2],[-1,-2],[2,1],[2,-1],[-2,1],[-2,-1]]),this.setDirections(function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)}(this,ut,"f"))}};var ft,ht,pt=function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)};ft=new WeakMap,ht=new WeakMap;const dt=class extends X{constructor(t,e,r){super(t,e,r,et.ROOK),ft.set(this,[[1,0],[-1,-0],[0,1],[0,-1]]),ht.set(this,!1),this.setDirections(pt(this,ft,"f"))}get hasMoved(){return pt(this,ht,"f")}set hasMoved(t){!function(t,e,r,n,o){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===n?o.call(t,r):o?o.value=r:e.set(t,r)}(this,ht,!0,"f")}};var vt;vt=new WeakMap;const yt=class extends X{constructor(t,e,r){super(t,e,r,et.QUEEN),vt.set(this,[[0,1],[0,-1],[1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1]]),this.setDirections(function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)}(this,vt,"f"))}};var bt,wt,mt=function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)};bt=new WeakMap,wt=new WeakMap;const Et=class extends X{constructor(t,e,r){super(t,e,r,et.KING),bt.set(this,[[0,1],[0,-1],[1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1]]),wt.set(this,!1),this.setDirections(mt(this,bt,"f"))}get hasMoved(){return mt(this,wt,"f")}set hasMoved(t){!function(t,e,r,n,o){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===n?o.call(t,r):o?o.value=r:e.set(t,r)}(this,wt,!0,"f")}};var gt,St,xt,Tt,Ct,_t,Pt,kt,It,At=u((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),Wt=function(t){function r(){var e=t.call(this)||this;return e.closed=!1,e.currentObservers=null,e.observers=[],e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return e(r,t),r.prototype.lift=function(t){var e=new Lt(this,this);return e.operator=t,e},r.prototype._throwIfClosed=function(){if(this.closed)throw new At},r.prototype.next=function(t){var e=this;x((function(){var r,o;if(e._throwIfClosed(),!e.isStopped){e.currentObservers||(e.currentObservers=Array.from(e.observers));try{for(var i=n(e.currentObservers),s=i.next();!s.done;s=i.next())s.value.next(t)}catch(t){r={error:t}}finally{try{s&&!s.done&&(o=i.return)&&o.call(i)}finally{if(r)throw r.error}}}}))},r.prototype.error=function(t){var e=this;x((function(){if(e._throwIfClosed(),!e.isStopped){e.hasError=e.isStopped=!0,e.thrownError=t;for(var r=e.observers;r.length;)r.shift().error(t)}}))},r.prototype.complete=function(){var t=this;x((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var e=t.observers;e.length;)e.shift().complete()}}))},r.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(r.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),r.prototype._trySubscribe=function(e){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,e)},r.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},r.prototype._innerSubscribe=function(t){var e=this,r=this,n=r.hasError,o=r.isStopped,i=r.observers;return n||o?p:(this.currentObservers=null,i.push(t),new h((function(){e.currentObservers=null,f(i,t)})))},r.prototype._checkFinalizedStatuses=function(t){var e=this,r=e.hasError,n=e.thrownError,o=e.isStopped;r?t.error(n):o&&t.complete()},r.prototype.asObservable=function(){var t=new O;return t.source=this,t},r.create=function(t,e){return new Lt(t,e)},r}(O),Lt=function(t){function r(e,r){var n=t.call(this)||this;return n.destination=e,n.source=r,n}return e(r,t),r.prototype.next=function(t){var e,r;null===(r=null===(e=this.destination)||void 0===e?void 0:e.next)||void 0===r||r.call(e,t)},r.prototype.error=function(t){var e,r;null===(r=null===(e=this.destination)||void 0===e?void 0:e.error)||void 0===r||r.call(e,t)},r.prototype.complete=function(){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===e||e.call(t)},r.prototype._subscribe=function(t){var e,r;return null!==(r=null===(e=this.source)||void 0===e?void 0:e.subscribe(t))&&void 0!==r?r:p},r}(Wt),Ht=function(t){function r(e){var r=t.call(this)||this;return r._value=e,r}return e(r,t),Object.defineProperty(r.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),r.prototype._subscribe=function(e){var r=t.prototype._subscribe.call(this,e);return!r.closed&&e.next(this._value),r},r.prototype.getValue=function(){var t=this,e=t.hasError,r=t.thrownError,n=t._value;if(e)throw r;return this._throwIfClosed(),n},r.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},r}(Wt),Ot=function(t,e,r,n,o){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?o.call(t,r):o?o.value=r:e.set(t,r),r},Mt=function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)};gt=new WeakMap,St=new WeakMap,xt=new WeakMap,Tt=new WeakMap,Ct=new WeakMap,_t=new WeakMap,Pt=new WeakMap,kt=new WeakMap,It=new WeakMap,new class{constructor(){gt.set(this,void 0),St.set(this,void 0),xt.set(this,Array(8).fill(0).map((()=>Array(8).fill(0)))),Tt.set(this,null),Ct.set(this,null),_t.set(this,[]),Pt.set(this,!0),kt.set(this,Z.WHITE),It.set(this,null),Ot(this,St,[[new dt(Z.WHITE,0,0),new lt(Z.WHITE,0,1),new ct(Z.WHITE,0,2),new yt(Z.WHITE,0,3),new Et(Z.WHITE,0,4),new ct(Z.WHITE,0,5),new lt(Z.WHITE,0,6),new dt(Z.WHITE,0,7)],[new st(Z.WHITE,1,0),new st(Z.WHITE,1,1),new st(Z.WHITE,1,2),new st(Z.WHITE,1,3),new st(Z.WHITE,1,4),new st(Z.WHITE,1,5),new st(Z.WHITE,1,6),new st(Z.WHITE,1,7)],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[new st(Z.BLACK,6,0),new st(Z.BLACK,6,1),new st(Z.BLACK,6,2),new st(Z.BLACK,6,3),new st(Z.BLACK,6,4),new st(Z.BLACK,6,5),new st(Z.BLACK,6,6),new st(Z.BLACK,6,7)],[new dt(Z.BLACK,7,0),new lt(Z.BLACK,7,1),new ct(Z.BLACK,7,2),new yt(Z.BLACK,7,3),new Et(Z.BLACK,7,4),new ct(Z.BLACK,7,5),new lt(Z.BLACK,7,6),new dt(Z.BLACK,7,7)]],"f"),Ot(this,gt,new Ht(Mt(this,St,"f")),"f"),this.createChessBoard(),this.startGame()}createChessBoard(){const t=document.createElement("table");t.classList.add("chess-board");for(let e=7;e>=0;e--){const r=document.createElement("tr");for(let t=0;t<8;t++){const n=document.createElement("th");n.classList.add(!(e%2||t%2)||e%2&&t%2?"light":"dark"),n.setAttribute("x",e.toString()),n.setAttribute("y",t.toString());const o=Mt(this,St,"f")[e][t];if(null!==o){const t=document.createElement("img");t.src=o.imageURL,t.alt=o.color+" "+o.constructor.name.toLowerCase(),n.appendChild(t)}r.appendChild(n),Mt(this,xt,"f")[e][t]=n}t.appendChild(r)}const e=document.createElement("h2");e.innerText="White's move",e.classList.add("whoIsPlaying"),document.body.appendChild(e),document.body.appendChild(t)}isSquareValid(t,e){return t>=0&&e>=0&&t<8&&e<8}changePlayer(){Mt(this,xt,"f").forEach((t=>{t.forEach((t=>{if(1===t.childNodes.length){const e=Mt(this,Pt,"f")?Z.BLACK:Z.WHITE,r=t.childNodes[0].src.includes(e);t.style.pointerEvents=r?"none":"auto",t.style.cursor=r?"arrow":"pointer"}}))}))}removeCursorsFromUnavailableSquares(){Mt(this,_t,"f").forEach((t=>{t.style.cursor="arrow",t.style.pointerEvents="none",t.style.outline=""}))}startGame(){this.changePlayer(),Mt(this,xt,"f").forEach((e=>{e.forEach((e=>{e.addEventListener("click",(()=>{t(e)}))}))}));const t=t=>{var r,n;const o=Number(t.getAttribute("x")),i=Number(t.getAttribute("y"));Ot(this,kt,Mt(this,Pt,"f")?Z.WHITE:Z.BLACK,"f");const s=this.findAvailableSquares(Mt(this,kt,"f"));if(console.log("clicked",s),1===t.childNodes.length&&t.childNodes[0].src.includes(Mt(this,kt,"f")))if(Ot(this,Tt,null!==Mt(this,Ct,"f")?Object.assign({},Mt(this,Ct,"f")):null,"f"),Ot(this,Ct,{square:t,x:o,y:i},"f"),Mt(this,Ct,"f").square.style.outline="5px solid red",null!==Mt(this,Tt,"f")&&(Mt(this,Tt,"f").square.style.outline="",this.removeCursorsFromUnavailableSquares(),Ot(this,_t,[],"f")),(null===(r=Mt(this,Tt,"f"))||void 0===r?void 0:r.square)===(null===(n=Mt(this,Ct,"f"))||void 0===n?void 0:n.square))Mt(this,Ct,"f").square.style.outline="",Ot(this,Ct,Ot(this,Tt,null,"f"),"f"),this.removeCursorsFromUnavailableSquares(),Ot(this,_t,[],"f");else{Ot(this,_t,s[o+","+i]||[],"f");let t=Mt(this,St,"f")[o][i];const e=Mt(this,kt,"f")===Z.WHITE?Z.BLACK:Z.WHITE;if(null!==Mt(this,It,"f")&&Object.keys(Mt(this,It,"f")).length>0&&t instanceof st&&Mt(this,It,"f").piece instanceof st&&2===Mt(this,It,"f").xPositionChanged&&t.x===Mt(this,It,"f").piece.x&&1===Math.abs(i-Mt(this,It,"f").piece.y)){const r=Mt(this,It,"f").piece.x,n=Mt(this,It,"f").piece.y,i=o+("white"===Mt(this,kt,"f")?1:-1),s=n,a=t,c=Mt(this,It,"f").piece;t=null,Mt(this,St,"f")[r][n]=null,Mt(this,St,"f")[i][s]=a,this.isCheck(!0,e)||Mt(this,_t,"f").push(Mt(this,xt,"f")[i][s]),t=a,Mt(this,St,"f")[r][Mt(this,It,"f").piece.y]=c,Mt(this,St,"f")[i][s]=null}if(t instanceof Et&&!t.hasMoved){const r="white"===Mt(this,kt,"f")?0:7,n=t.x,o=t.y,i=t=>{const e=Mt(this,St,"f")[r][t?7:0];if(!(e instanceof dt))return!1;if(t){if(null!==Mt(this,St,"f")[n][o+1]||null!==Mt(this,St,"f")[n][o+2])return!1}else if(null!==Mt(this,St,"f")[n][o-1]||null!==Mt(this,St,"f")[n][o-2]||null!==Mt(this,St,"f")[n][o-3])return!1;const i=o+(t?1:-1),s=o+(t?2:-2);return this.isSquareSafe(n,o,n,i)&&this.isSquareSafe(n,o,n,s)&&!e.hasMoved};this.isCheck(!0,e)||(i(!0)&&Mt(this,_t,"f").push(Mt(this,xt,"f")[n][o+2]),i(!1)&&Mt(this,_t,"f").push(Mt(this,xt,"f")[n][o-2]))}Mt(this,_t,"f").forEach((t=>{t.style.outline="5px solid blue",t.style.cursor="pointer",t.style.pointerEvents="auto"}))}else if(null!==Mt(this,Ct,"f")&&Mt(this,_t,"f").some((t=>t.contains(Mt(this,xt,"f")[o][i])))){const t=Mt(this,Ct,"f").x,r=Mt(this,Ct,"f").y,n=Mt(this,St,"f")[t][r];if(Mt(this,xt,"f").forEach((t=>{t.forEach((t=>t.style.backgroundColor=""))})),(n instanceof st||n instanceof dt||n instanceof Et)&&(n.hasMoved=!0),n instanceof st&&1===Math.abs(o-t)&&1===Math.abs(i-r)&&null===Mt(this,St,"f")[o][i]){const t=o+("white"===Mt(this,kt,"f")?-1:1),r=i;Mt(this,xt,"f")[t][r].innerHTML="",Mt(this,St,"f")[t][r]=null,e(o,i)}else if(n instanceof Et&&2===Math.abs(i-r)){const t=6===i?i-1:i+1,r=6===i?7:0;Mt(this,St,"f")[o][t]=Mt(this,St,"f")[o][r],Mt(this,xt,"f")[o][t].appendChild(Mt(this,xt,"f")[o][r].childNodes[0]),Mt(this,St,"f")[o][t].y=t,Mt(this,St,"f")[o][t].hasMoved=!0,Mt(this,St,"f")[o][r]=null,e(o,i)}else n instanceof st&&(0===o||7===o)?this.showPawnPromotionDialog(o,i,e):e(o,i)}},e=(t,e,r={element:null,img:null})=>{const n=Mt(this,Ct,"f").x,o=Mt(this,Ct,"f").y,i=t,s=e;Ot(this,It,{piece:Mt(this,St,"f")[n][o],xPositionChanged:Math.abs(n-i),yPositionChanged:Math.abs(o-s)},"f"),null!==r.element&&(Mt(this,xt,"f")[n][o].innerHTML=""),1===Mt(this,xt,"f")[i][s].childNodes.length&&(Mt(this,xt,"f")[i][s].innerHTML=""),Mt(this,St,"f")[i][s]=r.element||Mt(this,St,"f")[n][o],Mt(this,St,"f")[n][o]=null;const a=Mt(this,St,"f")[i][s];a instanceof X&&(a.x=i,a.y=s),Mt(this,xt,"f")[i][s].appendChild(null!==r.element?r.img:Mt(this,Ct,"f").square.childNodes[0]),Mt(this,Ct,"f").square.style.pointerEvents="none",Mt(this,Ct,"f").square.style.cursor="arrow",Mt(this,Ct,"f").square.style.outline="",Ot(this,Ct,Ot(this,Tt,null,"f"),"f"),this.removeCursorsFromUnavailableSquares(),Ot(this,_t,[],"f"),Ot(this,Pt,!Mt(this,Pt,"f"),"f"),this.changePlayer(),document.querySelector(".whoIsPlaying").innerText=Mt(this,Pt,"f")?"White's move":"Black's move";const c=this.isCheck(!1,Mt(this,kt,"f"));Ot(this,kt,Mt(this,Pt,"f")?Z.WHITE:Z.BLACK,"f");const u=this.findAvailableSquares(Mt(this,kt,"f"));if(!Object.keys(u).length){if(c){const t=(Mt(this,kt,"f")===Z.WHITE?Z.BLACK:Z.WHITE).toUpperCase();document.querySelector(".whoIsPlaying").innerText=t+" win by checkmate"}else document.querySelector(".whoIsPlaying").innerText="Stalemate";Mt(this,xt,"f").forEach((t=>{t.forEach((t=>{t.style.pointerEvents="none"}))}))}}}isSquareSafe(t,e,r,n){const o=Mt(this,St,"f")[t][e],i=Mt(this,St,"f")[r][n];if(i&&i.color===o.color)return!1;Mt(this,St,"f")[r][n]=o,Mt(this,St,"f")[t][e]=null;const s=Mt(this,kt,"f")===Z.WHITE?Z.BLACK:Z.WHITE,a=this.isCheck(!0,s);return Mt(this,St,"f")[t][e]=o,Mt(this,St,"f")[r][n]=i,!a}findAvailableSquares(t){const e={};for(const r of Mt(this,St,"f"))for(const n of r){if(!n||n.color!==t)continue;const r=[],o=n.x,i=n.y;for(const[t,s]of n.directions){let a=o+t,c=i+s;if(!this.isSquareValid(a,c))continue;let u=Mt(this,St,"f")[a][c];if(n instanceof st){if(2===t||-2===t){if(null!==u)continue;if(null!==Mt(this,St,"f")[a+(2===t?-1:1)][c])continue}if((1===t||-1===t)&&0===s&&null!==u)continue;if(!(1!==t&&-1!==t||null!==u||1!==s&&-1!==s))continue}if(n instanceof st||n instanceof Et||n instanceof lt)null!==u&&u.color===Mt(this,kt,"f")||this.isSquareSafe(o,i,a,c)&&r.push(Mt(this,xt,"f")[a][c]);else for(;this.isSquareValid(a,c)&&(u=Mt(this,St,"f")[a][c],null===u||u.color!==Mt(this,kt,"f"))&&(this.isSquareSafe(o,i,a,c)&&r.push(Mt(this,xt,"f")[a][c]),null===u);)a+=t,c+=s;0!==r.length&&(e[o.toString()+","+i.toString()]=r)}}return e}isCheck(t=!1,e){for(const r of Mt(this,St,"f"))for(const n of r)if(n&&n.color===e)if(n instanceof st||n instanceof Et||n instanceof lt)for(const[e,r]of n.directions){const o=n.x+e,i=n.y+r;if(n instanceof st&&0===r)continue;if(!this.isSquareValid(o,i))continue;const s=Mt(this,St,"f")[o][i];if(s instanceof Et&&n.color!==s.color)return t||(Mt(this,xt,"f")[o][i].style.backgroundColor="red"),!0}else for(const[e,r]of n.directions){let o=n.x+e,i=n.y+r;for(;this.isSquareValid(o,i);){const s=Mt(this,St,"f")[o][i];if(s instanceof Et&&n.color!==s.color)return t||(Mt(this,xt,"f")[o][i].style.backgroundColor="red"),!0;if(null!==Mt(this,St,"f")[o][i])break;o+=e,i+=r}}return!1}showPawnPromotionDialog(t,e,r){const n=["bishop","knight","rook","queen"],o=document.createElement("div");o.classList.add("pawn-promotion-popup"),document.body.appendChild(o);const i=document.createElement("div");i.classList.add("btn-close"),o.appendChild(i),$(i,"click").pipe(J((()=>{o.style.display="none"})));for(const i of n){const n=document.createElement("div");n.classList.add("figure-option");const s=document.createElement("img");s.src=`src/assets/${Mt(this,kt,"f")} ${i}.png`,s.alt=Mt(this,kt,"f")+" "+i,s.addEventListener("click",(()=>{let n;switch(i){case et.QUEEN:n=new yt(Mt(this,kt,"f"),t,e);break;case et.ROOK:n=new dt(Mt(this,kt,"f"),t,e);break;case et.BISHOP:n=new ct(Mt(this,kt,"f"),t,e);break;case et.KNIGHT:default:n=new lt(Mt(this,kt,"f"),t,e)}s.style.pointerEvents="none",r(t,e,{element:n,img:s}),o.style.display="none"})),n.appendChild(s),o.appendChild(n)}}},$(document,"contextmenu").pipe(J((t=>t.preventDefault()))).subscribe(),$(document,"dragstart").pipe(J((t=>t.preventDefault()))).subscribe()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,