(()=>{"use strict";var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};function e(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}function r(t,e){var r,n,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(a){return function(c){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;i&&(i=0,a[0]&&(s=0)),s;)try{if(r=1,n&&(o=2&a[0]?n.return:a[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,a[1])).done)return o;switch(n=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){s.label=a[1];break}if(6===a[0]&&s.label<o[1]){s.label=o[1],o=a;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(a);break}o[2]&&s.ops.pop(),s.trys.pop();continue}a=e.call(t,s)}catch(t){a=[6,t],n=0}finally{r=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}function n(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function o(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,o,i=r.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(n=i.next()).done;)s.push(n.value)}catch(t){o={error:t}}finally{try{n&&!n.done&&(r=i.return)&&r.call(i)}finally{if(o)throw o.error}}return s}function i(t,e,r){if(r||2===arguments.length)for(var n,o=0,i=e.length;o<i;o++)!n&&o in e||(n||(n=Array.prototype.slice.call(e,0,o)),n[o]=e[o]);return t.concat(n||Array.prototype.slice.call(e))}function s(t){return this instanceof s?(this.v=t,this):new s(t)}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var a=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function c(t){return"function"==typeof t}function u(t){var e=t((function(t){Error.call(t),t.stack=(new Error).stack}));return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}var l=u((function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}));function f(t,e){if(t){var r=t.indexOf(e);0<=r&&t.splice(r,1)}}var h=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._finalizers=null}var e;return t.prototype.unsubscribe=function(){var t,e,r,s,a;if(!this.closed){this.closed=!0;var u=this._parentage;if(u)if(this._parentage=null,Array.isArray(u))try{for(var f=n(u),h=f.next();!h.done;h=f.next())h.value.remove(this)}catch(e){t={error:e}}finally{try{h&&!h.done&&(e=f.return)&&e.call(f)}finally{if(t)throw t.error}}else u.remove(this);var p=this.initialTeardown;if(c(p))try{p()}catch(t){a=t instanceof l?t.errors:[t]}var d=this._finalizers;if(d){this._finalizers=null;try{for(var y=n(d),b=y.next();!b.done;b=y.next()){var w=b.value;try{v(w)}catch(t){a=null!=a?a:[],t instanceof l?a=i(i([],o(a)),o(t.errors)):a.push(t)}}}catch(t){r={error:t}}finally{try{b&&!b.done&&(s=y.return)&&s.call(y)}finally{if(r)throw r.error}}}if(a)throw new l(a)}},t.prototype.add=function(e){var r;if(e&&e!==this)if(this.closed)v(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._finalizers=null!==(r=this._finalizers)&&void 0!==r?r:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&f(e,t)},t.prototype.remove=function(e){var r=this._finalizers;r&&f(r,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t}(),p=h.EMPTY;function d(t){return t instanceof h||t&&"closed"in t&&c(t.remove)&&c(t.add)&&c(t.unsubscribe)}function v(t){c(t)?t():t.unsubscribe()}var y={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},b={setTimeout:function(t,e){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];var s=b.delegate;return(null==s?void 0:s.setTimeout)?s.setTimeout.apply(s,i([t,e],o(r))):setTimeout.apply(void 0,i([t,e],o(r)))},clearTimeout:function(t){var e=b.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function w(t){b.setTimeout((function(){var e=y.onUnhandledError;if(!e)throw t;e(t)}))}function m(){}var E=g("C",void 0,void 0);function g(t,e,r){return{kind:t,value:e,error:r}}var S=null;function x(t){if(y.useDeprecatedSynchronousErrorHandling){var e=!S;if(e&&(S={errorThrown:!1,error:null}),t(),e){var r=S,n=r.errorThrown,o=r.error;if(S=null,n)throw o}}else t()}var T=function(t){function r(e){var r=t.call(this)||this;return r.isStopped=!1,e?(r.destination=e,d(e)&&e.add(r)):r.destination=W,r}return e(r,t),r.create=function(t,e,r){return new I(t,e,r)},r.prototype.next=function(t){this.isStopped?A(function(t){return g("N",t,void 0)}(t),this):this._next(t)},r.prototype.error=function(t){this.isStopped?A(g("E",void 0,t),this):(this.isStopped=!0,this._error(t))},r.prototype.complete=function(){this.isStopped?A(E,this):(this.isStopped=!0,this._complete())},r.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},r.prototype._next=function(t){this.destination.next(t)},r.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},r.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},r}(h),C=Function.prototype.bind;function _(t,e){return C.call(t,e)}var P=function(){function t(t){this.partialObserver=t}return t.prototype.next=function(t){var e=this.partialObserver;if(e.next)try{e.next(t)}catch(t){k(t)}},t.prototype.error=function(t){var e=this.partialObserver;if(e.error)try{e.error(t)}catch(t){k(t)}else k(t)},t.prototype.complete=function(){var t=this.partialObserver;if(t.complete)try{t.complete()}catch(t){k(t)}},t}(),I=function(t){function r(e,r,n){var o,i,s=t.call(this)||this;return c(e)||!e?o={next:null!=e?e:void 0,error:null!=r?r:void 0,complete:null!=n?n:void 0}:s&&y.useDeprecatedNextContext?((i=Object.create(e)).unsubscribe=function(){return s.unsubscribe()},o={next:e.next&&_(e.next,i),error:e.error&&_(e.error,i),complete:e.complete&&_(e.complete,i)}):o=e,s.destination=new P(o),s}return e(r,t),r}(T);function k(t){var e;y.useDeprecatedSynchronousErrorHandling?(e=t,y.useDeprecatedSynchronousErrorHandling&&S&&(S.errorThrown=!0,S.error=e)):w(t)}function A(t,e){var r=y.onStoppedNotification;r&&b.setTimeout((function(){return r(t,e)}))}var W={closed:!0,next:m,error:function(t){throw t},complete:m},L="function"==typeof Symbol&&Symbol.observable||"@@observable";function H(t){return t}var O=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var r=new t;return r.source=this,r.operator=e,r},t.prototype.subscribe=function(t,e,r){var n,o=this,i=(n=t)&&n instanceof T||function(t){return t&&c(t.next)&&c(t.error)&&c(t.complete)}(n)&&d(n)?t:new I(t,e,r);return x((function(){var t=o,e=t.operator,r=t.source;i.add(e?e.call(i,r):r?o._subscribe(i):o._trySubscribe(i))})),i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var r=this;return new(e=M(e))((function(e,n){var o=new I({next:function(e){try{t(e)}catch(t){n(t),o.unsubscribe()}},error:n,complete:e});r.subscribe(o)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[L]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return(0===(r=t).length?H:1===r.length?r[0]:function(t){return r.reduce((function(t,e){return e(t)}),t)})(this);var r},t.prototype.toPromise=function(t){var e=this;return new(t=M(t))((function(t,r){var n;e.subscribe((function(t){return n=t}),(function(t){return r(t)}),(function(){return t(n)}))}))},t.create=function(e){return new t(e)},t}();function M(t){var e;return null!==(e=null!=t?t:y.Promise)&&void 0!==e?e:Promise}var q="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function K(t){if(t instanceof O)return t;if(null!=t){if(function(t){return c(t[L])}(t))return l=t,new O((function(t){var e=l[L]();if(c(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(a(t))return u=t,new O((function(t){for(var e=0;e<u.length&&!t.closed;e++)t.next(u[e]);t.complete()}));if(c(null==(i=t)?void 0:i.then))return o=t,new O((function(t){o.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,w)}));if(function(t){return Symbol.asyncIterator&&c(null==t?void 0:t[Symbol.asyncIterator])}(t))return B(t);if(function(t){return c(null==t?void 0:t[q])}(t))return e=t,new O((function(t){var r,o;try{for(var i=n(e),s=i.next();!s.done;s=i.next()){var a=s.value;if(t.next(a),t.closed)return}}catch(t){r={error:t}}finally{try{s&&!s.done&&(o=i.return)&&o.call(i)}finally{if(r)throw r.error}}t.complete()}));if(function(t){return c(null==t?void 0:t.getReader)}(t))return B(function(t){return function(t,e,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,o=r.apply(t,e||[]),i=[];return n={},a("next"),a("throw"),a("return"),n[Symbol.asyncIterator]=function(){return this},n;function a(t){o[t]&&(n[t]=function(e){return new Promise((function(r,n){i.push([t,e,r,n])>1||c(t,e)}))})}function c(t,e){try{(r=o[t](e)).value instanceof s?Promise.resolve(r.value.v).then(u,l):f(i[0][2],r)}catch(t){f(i[0][3],t)}var r}function u(t){c("next",t)}function l(t){c("throw",t)}function f(t,e){t(e),i.shift(),i.length&&c(i[0][0],i[0][1])}}(this,arguments,(function(){var e,n,o;return r(this,(function(r){switch(r.label){case 0:e=t.getReader(),r.label=1;case 1:r.trys.push([1,,9,10]),r.label=2;case 2:return[4,s(e.read())];case 3:return n=r.sent(),o=n.value,n.done?[4,s(void 0)]:[3,5];case 4:return[2,r.sent()];case 5:return[4,s(o)];case 6:return[4,r.sent()];case 7:return r.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}(t))}var e,o,i,u,l;throw function(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}(t)}function B(t){return new O((function(e){(function(t,e){var o,i,s,a,c,u,l,f;return c=this,u=void 0,f=function(){var c,u;return r(this,(function(r){switch(r.label){case 0:r.trys.push([0,5,6,11]),o=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,r=t[Symbol.asyncIterator];return r?r.call(t):(t=n(t),e={},o("next"),o("throw"),o("return"),e[Symbol.asyncIterator]=function(){return this},e);function o(r){e[r]=t[r]&&function(e){return new Promise((function(n,o){!function(t,e,r,n){Promise.resolve(n).then((function(e){t({value:e,done:r})}),e)}(n,o,(e=t[r](e)).done,e.value)}))}}}(t),r.label=1;case 1:return[4,o.next()];case 2:if((i=r.sent()).done)return[3,4];if(c=i.value,e.next(c),e.closed)return[2];r.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return u=r.sent(),s={error:u},[3,11];case 6:return r.trys.push([6,,9,10]),i&&!i.done&&(a=o.return)?[4,a.call(o)]:[3,8];case 7:r.sent(),r.label=8;case 8:return[3,10];case 9:if(s)throw s.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((l=void 0)||(l=Promise))((function(t,e){function r(t){try{o(f.next(t))}catch(t){e(t)}}function n(t){try{o(f.throw(t))}catch(t){e(t)}}function o(e){var o;e.done?t(e.value):(o=e.value,o instanceof l?o:new l((function(t){t(o)}))).then(r,n)}o((f=f.apply(c,u||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}function j(t){return function(e){if(function(t){return c(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}function N(t,e,r,n,o){return new D(t,e,r,n,o)}var D=function(t){function r(e,r,n,o,i,s){var a=t.call(this,e)||this;return a.onFinalize=i,a.shouldUnsubscribe=s,a._next=r?function(t){try{r(t)}catch(t){e.error(t)}}:t.prototype._next,a._error=o?function(t){try{o(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,a._complete=n?function(){try{n()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,a}return e(r,t),r.prototype.unsubscribe=function(){var e;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var r=this.closed;t.prototype.unsubscribe.call(this),!r&&(null===(e=this.onFinalize)||void 0===e||e.call(this))}},r}(T);function U(t,e){return j((function(r,n){var o=0;r.subscribe(N(n,(function(r){n.next(t.call(e,r,o++))})))}))}function z(t,e,r){return void 0===r&&(r=1/0),c(e)?z((function(r,n){return U((function(t,o){return e(r,t,n,o)}))(K(t(r,n)))}),r):("number"==typeof e&&(r=e),j((function(e,n){return function(t,e,r,n,o,i,s,a){var c=[],u=0,l=0,f=!1,h=function(){!f||c.length||u||e.complete()},p=function(t){return u<n?d(t):c.push(t)},d=function(t){u++;var o=!1;K(r(t,l++)).subscribe(N(e,(function(t){e.next(t)}),(function(){o=!0}),void 0,(function(){if(o)try{u--;for(var t=function(){var t=c.shift();d(t)};c.length&&u<n;)t();h()}catch(t){e.error(t)}})))};return t.subscribe(N(e,p,(function(){f=!0,h()}))),function(){}}(e,n,t,r)})))}var F=Array.isArray;var G,R=["addListener","removeListener"],V=["addEventListener","removeEventListener"],Y=["on","off"];function $(t,e,r,n){if(c(r)&&(n=r,r=void 0),n)return $(t,e,r).pipe((s=n,U((function(t){return function(t,e){return F(e)?t.apply(void 0,i([],o(e))):t(e)}(s,t)}))));var s,u=o(function(t){return c(t.addEventListener)&&c(t.removeEventListener)}(t)?V.map((function(n){return function(o){return t[n](e,o,r)}})):function(t){return c(t.addListener)&&c(t.removeListener)}(t)?R.map(Q(t,e)):function(t){return c(t.on)&&c(t.off)}(t)?Y.map(Q(t,e)):[],2),l=u[0],f=u[1];if(!l&&a(t))return z((function(t){return $(t,e,r)}))(K(t));if(!l)throw new TypeError("Invalid event target");return new O((function(t){var e=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return t.next(1<e.length?e:e[0])};return l(e),function(){return f(e)}}))}function Q(t,e){return function(r){return function(n){return t[r](e,n)}}}function J(t,e,r){var n=c(t)||e||r?{next:t,error:e,complete:r}:t;return n?j((function(t,e){var r;null===(r=n.subscribe)||void 0===r||r.call(n);var o=!0;t.subscribe(N(e,(function(t){var r;null===(r=n.next)||void 0===r||r.call(n,t),e.next(t)}),(function(){var t;o=!1,null===(t=n.complete)||void 0===t||t.call(n),e.complete()}),(function(t){var r;o=!1,null===(r=n.error)||void 0===r||r.call(n,t),e.error(t)}),(function(){var t,e;o&&(null===(t=n.unsubscribe)||void 0===t||t.call(n)),null===(e=n.finalize)||void 0===e||e.call(n)})))})):H}class X{constructor(t,e,r,n){this.color=t,this.x=e,this.y=r,this.imageURL=`src/assets/${t} ${n}.png`}setDirections(t){this.directions=t}}!function(t){t.WHITE="white",t.BLACK="black"}(G||(G={}));const Z=G;var tt;!function(t){t.PAWN="pawn",t.KNIGHT="knight",t.BISHOP="bishop",t.ROOK="rook",t.QUEEN="queen",t.KING="king"}(tt||(tt={}));const et=tt;var rt,nt,ot=function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)},it=function(t,e,r,n,o){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?o.call(t,r):o?o.value=r:e.set(t,r),r};rt=new WeakMap,nt=new WeakMap;const st=class extends X{constructor(t,e,r){super(t,e,r,et.PAWN),rt.set(this,[[1,0],[2,0],[1,1],[1,-1]]),nt.set(this,!1),t===Z.BLACK&&it(this,rt,ot(this,rt,"f").map((t=>[-1*t[0],t[1]])),"f"),this.setDirections(ot(this,rt,"f"))}get hasMoved(){return ot(this,nt,"f")}set hasMoved(t){it(this,nt,!0,"f"),it(this,rt,[[1,0],[1,1],[1,-1]],"f"),this.color===Z.BLACK&&it(this,rt,this.blackPawnDirections(ot(this,rt,"f")),"f"),this.setDirections(ot(this,rt,"f"))}blackPawnDirections(t){return t.map((t=>[-1*t[0],t[1]]))}};var at;at=new WeakMap;const ct=class extends X{constructor(t,e,r){super(t,e,r,et.BISHOP),at.set(this,[[1,1],[1,-1],[-1,1],[-1,-1]]),this.setDirections(function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)}(this,at,"f"))}};var ut;ut=new WeakMap;const lt=class extends X{constructor(t,e,r){super(t,e,r,et.KNIGHT),ut.set(this,[[1,2],[1,-2],[-1,2],[-1,-2],[2,1],[2,-1],[-2,1],[-2,-1]]),this.setDirections(function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)}(this,ut,"f"))}};var ft,ht,pt=function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)};ft=new WeakMap,ht=new WeakMap;const dt=class extends X{constructor(t,e,r){super(t,e,r,et.ROOK),ft.set(this,[[1,0],[-1,-0],[0,1],[0,-1]]),ht.set(this,!1),this.setDirections(pt(this,ft,"f"))}get hasMoved(){return pt(this,ht,"f")}set hasMoved(t){!function(t,e,r,n,o){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===n?o.call(t,r):o?o.value=r:e.set(t,r)}(this,ht,!0,"f")}};var vt;vt=new WeakMap;const yt=class extends X{constructor(t,e,r){super(t,e,r,et.QUEEN),vt.set(this,[[0,1],[0,-1],[1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1]]),this.setDirections(function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)}(this,vt,"f"))}};var bt,wt,mt=function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)};bt=new WeakMap,wt=new WeakMap;const Et=class extends X{constructor(t,e,r){super(t,e,r,et.KING),bt.set(this,[[0,1],[0,-1],[1,0],[1,1],[1,-1],[-1,0],[-1,1],[-1,-1]]),wt.set(this,!1),this.setDirections(mt(this,bt,"f"))}get hasMoved(){return mt(this,wt,"f")}set hasMoved(t){!function(t,e,r,n,o){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");"a"===n?o.call(t,r):o?o.value=r:e.set(t,r)}(this,wt,!0,"f")}};var gt,St,xt,Tt,Ct,_t,Pt,It,kt,At=u((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),Wt=function(t){function r(){var e=t.call(this)||this;return e.closed=!1,e.currentObservers=null,e.observers=[],e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return e(r,t),r.prototype.lift=function(t){var e=new Lt(this,this);return e.operator=t,e},r.prototype._throwIfClosed=function(){if(this.closed)throw new At},r.prototype.next=function(t){var e=this;x((function(){var r,o;if(e._throwIfClosed(),!e.isStopped){e.currentObservers||(e.currentObservers=Array.from(e.observers));try{for(var i=n(e.currentObservers),s=i.next();!s.done;s=i.next())s.value.next(t)}catch(t){r={error:t}}finally{try{s&&!s.done&&(o=i.return)&&o.call(i)}finally{if(r)throw r.error}}}}))},r.prototype.error=function(t){var e=this;x((function(){if(e._throwIfClosed(),!e.isStopped){e.hasError=e.isStopped=!0,e.thrownError=t;for(var r=e.observers;r.length;)r.shift().error(t)}}))},r.prototype.complete=function(){var t=this;x((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var e=t.observers;e.length;)e.shift().complete()}}))},r.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(r.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),r.prototype._trySubscribe=function(e){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,e)},r.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},r.prototype._innerSubscribe=function(t){var e=this,r=this,n=r.hasError,o=r.isStopped,i=r.observers;return n||o?p:(this.currentObservers=null,i.push(t),new h((function(){e.currentObservers=null,f(i,t)})))},r.prototype._checkFinalizedStatuses=function(t){var e=this,r=e.hasError,n=e.thrownError,o=e.isStopped;r?t.error(n):o&&t.complete()},r.prototype.asObservable=function(){var t=new O;return t.source=this,t},r.create=function(t,e){return new Lt(t,e)},r}(O),Lt=function(t){function r(e,r){var n=t.call(this)||this;return n.destination=e,n.source=r,n}return e(r,t),r.prototype.next=function(t){var e,r;null===(r=null===(e=this.destination)||void 0===e?void 0:e.next)||void 0===r||r.call(e,t)},r.prototype.error=function(t){var e,r;null===(r=null===(e=this.destination)||void 0===e?void 0:e.error)||void 0===r||r.call(e,t)},r.prototype.complete=function(){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===e||e.call(t)},r.prototype._subscribe=function(t){var e,r;return null!==(r=null===(e=this.source)||void 0===e?void 0:e.subscribe(t))&&void 0!==r?r:p},r}(Wt),Ht=function(t){function r(e){var r=t.call(this)||this;return r._value=e,r}return e(r,t),Object.defineProperty(r.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),r.prototype._subscribe=function(e){var r=t.prototype._subscribe.call(this,e);return!r.closed&&e.next(this._value),r},r.prototype.getValue=function(){var t=this,e=t.hasError,r=t.thrownError,n=t._value;if(e)throw r;return this._throwIfClosed(),n},r.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},r}(Wt),Ot=function(t,e,r,n,o){if("m"===n)throw new TypeError("Private method is not writable");if("a"===n&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof e?t!==e||!o:!e.has(t))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===n?o.call(t,r):o?o.value=r:e.set(t,r),r},Mt=function(t,e,r,n){if("a"===r&&!n)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof e?t!==e||!n:!e.has(t))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===r?n:"a"===r?n.call(t):n?n.value:e.get(t)};gt=new WeakMap,St=new WeakMap,xt=new WeakMap,Tt=new WeakMap,Ct=new WeakMap,_t=new WeakMap,Pt=new WeakMap,It=new WeakMap,kt=new WeakMap,new class{constructor(){gt.set(this,void 0),St.set(this,void 0),xt.set(this,Array(8).fill(0).map((()=>Array(8).fill(0)))),Tt.set(this,null),Ct.set(this,null),_t.set(this,[]),Pt.set(this,!0),It.set(this,Z.WHITE),kt.set(this,null),this.updatePosition=(t,e,r={element:null,img:null})=>{const n=Mt(this,Ct,"f").x,o=Mt(this,Ct,"f").y,i=t,s=e;Ot(this,kt,{piece:Mt(this,St,"f")[n][o],xPositionChanged:Math.abs(n-i),yPositionChanged:Math.abs(o-s)},"f"),null!==r.element&&(Mt(this,xt,"f")[n][o].innerHTML=""),1===Mt(this,xt,"f")[i][s].childNodes.length&&(Mt(this,xt,"f")[i][s].innerHTML=""),Mt(this,St,"f")[i][s]=r.element||Mt(this,St,"f")[n][o],Mt(this,St,"f")[n][o]=null;const a=Mt(this,St,"f")[i][s];a instanceof X&&(a.x=i,a.y=s),Mt(this,xt,"f")[i][s].appendChild(null!==r.element?r.img:Mt(this,Ct,"f").square.childNodes[0]),Mt(this,Ct,"f").square.style.pointerEvents="none",Mt(this,Ct,"f").square.style.cursor="arrow",Mt(this,Ct,"f").square.style.outline="",Ot(this,Ct,Ot(this,Tt,null,"f"),"f"),this.removeCursorsFromUnavailableSquares(),Ot(this,_t,[],"f"),Ot(this,Pt,!Mt(this,Pt,"f"),"f"),this.changePlayer(),document.querySelector(".whoIsPlaying").innerText=Mt(this,Pt,"f")?"White's move":"Black's move";const c=this.isCheck(!1,Mt(this,It,"f"));Ot(this,It,Mt(this,Pt,"f")?Z.WHITE:Z.BLACK,"f");const u=this.findAvailableSquares(Mt(this,It,"f"));if(!Object.keys(u).length){if(c){const t=(Mt(this,It,"f")===Z.WHITE?Z.BLACK:Z.WHITE).toUpperCase();document.querySelector(".whoIsPlaying").innerText=t+" win by checkmate"}else document.querySelector(".whoIsPlaying").innerText="Stalemate";Mt(this,xt,"f").forEach((t=>{t.forEach((t=>{t.style.pointerEvents="none"}))}))}},Ot(this,St,[[new dt(Z.WHITE,0,0),new lt(Z.WHITE,0,1),new ct(Z.WHITE,0,2),new yt(Z.WHITE,0,3),new Et(Z.WHITE,0,4),new ct(Z.WHITE,0,5),new lt(Z.WHITE,0,6),new dt(Z.WHITE,0,7)],[new st(Z.WHITE,1,0),new st(Z.WHITE,1,1),new st(Z.WHITE,1,2),new st(Z.WHITE,1,3),new st(Z.WHITE,1,4),new st(Z.WHITE,1,5),new st(Z.WHITE,1,6),new st(Z.WHITE,1,7)],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[null,null,null,null,null,null,null,null],[new st(Z.BLACK,6,0),new st(Z.BLACK,6,1),new st(Z.BLACK,6,2),new st(Z.BLACK,6,3),new st(Z.BLACK,6,4),new st(Z.BLACK,6,5),new st(Z.BLACK,6,6),new st(Z.BLACK,6,7)],[new dt(Z.BLACK,7,0),new lt(Z.BLACK,7,1),new ct(Z.BLACK,7,2),new yt(Z.BLACK,7,3),new Et(Z.BLACK,7,4),new ct(Z.BLACK,7,5),new lt(Z.BLACK,7,6),new dt(Z.BLACK,7,7)]],"f"),Ot(this,gt,new Ht(Mt(this,St,"f")),"f"),this.createChessBoard(),this.startGame()}createChessBoard(){const t=document.createElement("table");t.classList.add("chess-board");for(let e=7;e>=0;e--){const r=document.createElement("tr");for(let t=0;t<8;t++){const n=document.createElement("th");n.classList.add(!(e%2||t%2)||e%2&&t%2?"light":"dark"),n.setAttribute("x",e.toString()),n.setAttribute("y",t.toString());const o=Mt(this,St,"f")[e][t];if(null!==o){const t=document.createElement("img");t.src=o.imageURL,t.alt=o.color+" "+o.constructor.name.toLowerCase(),n.appendChild(t)}r.appendChild(n),Mt(this,xt,"f")[e][t]=n}t.appendChild(r)}const e=document.createElement("h2");e.innerText="White's move",e.classList.add("whoIsPlaying"),document.body.appendChild(e),document.body.appendChild(t)}isSquareValid(t,e){return t>=0&&e>=0&&t<8&&e<8}changePlayer(){Mt(this,xt,"f").forEach((t=>{t.forEach((t=>{if(1===t.childNodes.length){const e=Mt(this,Pt,"f")?Z.BLACK:Z.WHITE,r=t.childNodes[0].src.includes(e);t.style.pointerEvents=r?"none":"auto",t.style.cursor=r?"arrow":"pointer"}}))}))}removeCursorsFromUnavailableSquares(){Mt(this,_t,"f").forEach((t=>{t.style.cursor="arrow",t.style.pointerEvents="none",t.style.outline=""}))}startGame(){let t;this.changePlayer(),Mt(this,xt,"f").forEach((t=>{t.forEach((t=>{$(t,"click").pipe(J((()=>e(t)))).subscribe()}))}));const e=e=>{var r,n,o;const i=Number(e.getAttribute("x")),s=Number(e.getAttribute("y"));if(Ot(this,It,Mt(this,Pt,"f")?Z.WHITE:Z.BLACK,"f"),void 0===(null===(r=Mt(this,Ct,"f"))||void 0===r?void 0:r.square.childNodes[0])&&(console.log("ovo se izvrsava"),t=this.findAvailableSquares(Mt(this,It,"f"))),1===e.childNodes.length&&e.childNodes[0].src.includes(Mt(this,It,"f")))if(Ot(this,Tt,null!==Mt(this,Ct,"f")?Object.assign({},Mt(this,Ct,"f")):null,"f"),Ot(this,Ct,{square:e,x:i,y:s},"f"),Mt(this,Ct,"f").square.style.outline="5px solid red",null!==Mt(this,Tt,"f")&&(Mt(this,Tt,"f").square.style.outline="",this.removeCursorsFromUnavailableSquares(),Ot(this,_t,[],"f")),(null===(n=Mt(this,Tt,"f"))||void 0===n?void 0:n.square)===(null===(o=Mt(this,Ct,"f"))||void 0===o?void 0:o.square))Mt(this,Ct,"f").square.style.outline="",Ot(this,Ct,Ot(this,Tt,null,"f"),"f"),this.removeCursorsFromUnavailableSquares(),Ot(this,_t,[],"f");else{Ot(this,_t,t[i+","+s]||[],"f");let e=Mt(this,St,"f")[i][s];const r=Mt(this,It,"f")===Z.WHITE?Z.BLACK:Z.WHITE;if(null!==Mt(this,kt,"f")&&Object.keys(Mt(this,kt,"f")).length>0&&e instanceof st&&Mt(this,kt,"f").piece instanceof st&&2===Mt(this,kt,"f").xPositionChanged&&e.x===Mt(this,kt,"f").piece.x&&1===Math.abs(s-Mt(this,kt,"f").piece.y)){const t=Mt(this,kt,"f").piece.x,n=Mt(this,kt,"f").piece.y,o=i+("white"===Mt(this,It,"f")?1:-1),s=n,a=e,c=Mt(this,kt,"f").piece;e=null,Mt(this,St,"f")[t][n]=null,Mt(this,St,"f")[o][s]=a,this.isCheck(!0,r)||Mt(this,_t,"f").push(Mt(this,xt,"f")[o][s]),e=a,Mt(this,St,"f")[t][Mt(this,kt,"f").piece.y]=c,Mt(this,St,"f")[o][s]=null}if(e instanceof Et&&!e.hasMoved){const t="white"===Mt(this,It,"f")?0:7,n=e.x,o=e.y,i=e=>{const r=Mt(this,St,"f")[t][e?7:0];if(!(r instanceof dt))return!1;if(e){if(null!==Mt(this,St,"f")[n][o+1]||null!==Mt(this,St,"f")[n][o+2])return!1}else if(null!==Mt(this,St,"f")[n][o-1]||null!==Mt(this,St,"f")[n][o-2]||null!==Mt(this,St,"f")[n][o-3])return!1;const i=o+(e?1:-1),s=o+(e?2:-2);return this.isSquareSafe(n,o,n,i)&&this.isSquareSafe(n,o,n,s)&&!r.hasMoved};this.isCheck(!0,r)||(i(!0)&&Mt(this,_t,"f").push(Mt(this,xt,"f")[n][o+2]),i(!1)&&Mt(this,_t,"f").push(Mt(this,xt,"f")[n][o-2]))}Mt(this,_t,"f").forEach((t=>{t.style.outline="5px solid blue",t.style.cursor="pointer",t.style.pointerEvents="auto"}))}else if(null!==Mt(this,Ct,"f")&&Mt(this,_t,"f").some((t=>t.contains(Mt(this,xt,"f")[i][s])))){const t=Mt(this,Ct,"f").x,e=Mt(this,Ct,"f").y,r=Mt(this,St,"f")[t][e];if(Mt(this,xt,"f").forEach((t=>{t.forEach((t=>t.style.backgroundColor=""))})),(r instanceof st||r instanceof dt||r instanceof Et)&&(r.hasMoved=!0),r instanceof st&&1===Math.abs(i-t)&&1===Math.abs(s-e)&&null===Mt(this,St,"f")[i][s]){const t=i+("white"===Mt(this,It,"f")?-1:1),e=s;Mt(this,xt,"f")[t][e].innerHTML="",Mt(this,St,"f")[t][e]=null,this.updatePosition(i,s)}else if(r instanceof Et&&2===Math.abs(s-e)){const t=6===s?s-1:s+1,e=6===s?7:0;Mt(this,St,"f")[i][t]=Mt(this,St,"f")[i][e],Mt(this,xt,"f")[i][t].appendChild(Mt(this,xt,"f")[i][e].childNodes[0]),Mt(this,St,"f")[i][t].y=t,Mt(this,St,"f")[i][t].hasMoved=!0,Mt(this,St,"f")[i][e]=null,this.updatePosition(i,s)}else r instanceof st&&(0===i||7===i)?this.showPawnPromotionDialog(i,s):this.updatePosition(i,s)}}}isSquareSafe(t,e,r,n){const o=Mt(this,St,"f")[t][e],i=Mt(this,St,"f")[r][n];if(i&&i.color===o.color)return!1;Mt(this,St,"f")[r][n]=o,Mt(this,St,"f")[t][e]=null;const s=Mt(this,It,"f")===Z.WHITE?Z.BLACK:Z.WHITE,a=this.isCheck(!0,s);return Mt(this,St,"f")[t][e]=o,Mt(this,St,"f")[r][n]=i,!a}findAvailableSquares(t){const e={};for(const r of Mt(this,St,"f"))for(const n of r){if(!n||n.color!==t)continue;const r=[],o=n.x,i=n.y;for(const[t,s]of n.directions){let a=o+t,c=i+s;if(!this.isSquareValid(a,c))continue;let u=Mt(this,St,"f")[a][c];if(n instanceof st){if(2===t||-2===t){if(null!==u)continue;if(null!==Mt(this,St,"f")[a+(2===t?-1:1)][c])continue}if((1===t||-1===t)&&0===s&&null!==u)continue;if(!(1!==t&&-1!==t||null!==u||1!==s&&-1!==s))continue}if(n instanceof st||n instanceof Et||n instanceof lt)null!==u&&u.color===Mt(this,It,"f")||this.isSquareSafe(o,i,a,c)&&r.push(Mt(this,xt,"f")[a][c]);else for(;this.isSquareValid(a,c)&&(u=Mt(this,St,"f")[a][c],null===u||u.color!==Mt(this,It,"f"))&&(this.isSquareSafe(o,i,a,c)&&r.push(Mt(this,xt,"f")[a][c]),null===u);)a+=t,c+=s;0!==r.length&&(e[o.toString()+","+i.toString()]=r)}}return e}isCheck(t=!1,e){for(const r of Mt(this,St,"f"))for(const n of r)if(n&&n.color===e)if(n instanceof st||n instanceof Et||n instanceof lt)for(const[e,r]of n.directions){const o=n.x+e,i=n.y+r;if(n instanceof st&&0===r)continue;if(!this.isSquareValid(o,i))continue;const s=Mt(this,St,"f")[o][i];if(s instanceof Et&&n.color!==s.color)return t||(Mt(this,xt,"f")[o][i].style.backgroundColor="red"),!0}else for(const[e,r]of n.directions){let o=n.x+e,i=n.y+r;for(;this.isSquareValid(o,i);){const s=Mt(this,St,"f")[o][i];if(s instanceof Et&&n.color!==s.color)return t||(Mt(this,xt,"f")[o][i].style.backgroundColor="red"),!0;if(null!==Mt(this,St,"f")[o][i])break;o+=e,i+=r}}return!1}showPawnPromotionDialog(t,e){const r=["bishop","knight","rook","queen"],n=document.createElement("div");n.classList.add("pawn-promotion-popup"),document.body.appendChild(n);const o=document.createElement("div");o.classList.add("btn-close"),n.appendChild(o),$(o,"click").pipe(J((()=>{n.style.display="none"}))).subscribe();for(const o of r){const r=document.createElement("div");r.classList.add("figure-option");const i=document.createElement("img");i.src=`src/assets/${Mt(this,It,"f")} ${o}.png`,i.alt=Mt(this,It,"f")+" "+o,$(i,"click").pipe(J((()=>{let r;switch(o){case et.QUEEN:r=new yt(Mt(this,It,"f"),t,e);break;case et.ROOK:r=new dt(Mt(this,It,"f"),t,e);break;case et.BISHOP:r=new ct(Mt(this,It,"f"),t,e);break;case et.KNIGHT:default:r=new lt(Mt(this,It,"f"),t,e)}i.style.pointerEvents="none";const s={element:r,img:i};this.updatePosition(t,e,s),n.style.display="none"}))).subscribe(),r.appendChild(i),n.appendChild(r)}}},$(document,"contextmenu").pipe(J((t=>t.preventDefault()))).subscribe(),$(document,"dragstart").pipe(J((t=>t.preventDefault()))).subscribe()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QSxNQUFPLEVBQUcsR0FBSSxJQUFJLEdBQU8sRUFBTUEsTUFBTyxFQUFHLEdBQUksSUFBSSxHQUFLLEVBQU1BLE1BQU8sRUFBRyxJQUV4SCxDQUNJLElBQUksR0FBSyxFQUFNQSxNQUFPLEVBQUcsR0FBSSxJQUFJLEdBQUssRUFBTUEsTUFBTyxFQUFHLEdBQUksSUFBSSxHQUFLLEVBQU1BLE1BQU8sRUFBRyxHQUFJLElBQUksR0FBSyxFQUFNQSxNQUFPLEVBQUcsR0FDaEgsSUFBSSxHQUFLLEVBQU1BLE1BQU8sRUFBRyxHQUFJLElBQUksR0FBSyxFQUFNQSxNQUFPLEVBQUcsR0FBSSxJQUFJLEdBQUssRUFBTUEsTUFBTyxFQUFHLEdBQUksSUFBSSxHQUFLLEVBQU1BLE1BQU8sRUFBRyxJQUVwSCxDQUFDLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFDM0MsQ0FBQyxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLE1BQzNDLENBQUMsS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxNQUMzQyxDQUFDLEtBQU0sS0FBTSxLQUFNLEtBQU0sS0FBTSxLQUFNLEtBQU0sTUFDM0MsQ0FDSSxJQUFJLEdBQUssRUFBTWhDLE1BQU8sRUFBRyxHQUFJLElBQUksR0FBSyxFQUFNQSxNQUFPLEVBQUcsR0FBSSxJQUFJLEdBQUssRUFBTUEsTUFBTyxFQUFHLEdBQUksSUFBSSxHQUFLLEVBQU1BLE1BQU8sRUFBRyxHQUNoSCxJQUFJLEdBQUssRUFBTUEsTUFBTyxFQUFHLEdBQUksSUFBSSxHQUFLLEVBQU1BLE1BQU8sRUFBRyxHQUFJLElBQUksR0FBSyxFQUFNQSxNQUFPLEVBQUcsR0FBSSxJQUFJLEdBQUssRUFBTUEsTUFBTyxFQUFHLElBRXBILENBQ0ksSUFBSSxHQUFLLEVBQU1BLE1BQU8sRUFBRyxHQUFJLElBQUksR0FBTyxFQUFNQSxNQUFPLEVBQUcsR0FBSSxJQUFJLEdBQU8sRUFBTUEsTUFBTyxFQUFHLEdBQUksSUFBSSxHQUFNLEVBQU1BLE1BQU8sRUFBRyxH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LEdBRzNEc0YsRUFBWTNFLE1BQU1DLGNBQWdCLE9BQ2xDLE1BQU1sQixFQUFnQyxDQUFFQyxRQUFTOEUsRUFBVTdFLElBQUswRixHQUNoRTlaLEtBQUsrVCxlQUFlUSxFQUFVQyxFQUFVTixHQUN4Q3VGLEVBQW9CdEUsTUFBTXdFLFFBQVUsTUFBTSxLQUVoRDdQLFlBRUYrUCxFQUFhNUUsWUFBWTZFLEdBQ3pCTCxFQUFvQnhFLFlBQVk0RSxFLENBRXhDLEdEcm1CSjdKLEVBQVV5RixTQUFVLGVBQWU5SyxLQUMvQnNHLEdBQUk4SSxHQUFTQSxFQUFNQyxvQkFDckJsUSxZQUVGa0csRUFBVXlGLFNBQVUsYUFBYTlLLEtBQzdCc0csR0FBSThJLEdBQVNBLEVBQU1DLG9CQUNyQmxRLFciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2Lm1qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0FycmF5TGlrZS5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2NyZWF0ZUVycm9yQ2xhc3MuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvVW5zdWJzY3JpcHRpb25FcnJvci5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9hcnJSZW1vdmUuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvY29uZmlnLmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyLmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yLmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL25vb3AuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL05vdGlmaWNhdGlvbkZhY3Rvcmllcy5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9lcnJvckNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL1N1YnNjcmliZXIuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3N5bWJvbC9vYnNlcnZhYmxlLmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lkZW50aXR5LmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9PYnNlcnZhYmxlLmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL3BpcGUuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3N5bWJvbC9pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9pbm5lckZyb20uanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc1Byb21pc2UuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNBc3luY0l0ZXJhYmxlLmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzSXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNSZWFkYWJsZVN0cmVhbUxpa2UuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvci5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9saWZ0LmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyLmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWFwLmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvbWVyZ2VNYXAuanMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9tZXJnZUludGVybmFscy5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9tYXBPbmVPck1hbnlBcmdzLmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vYnNlcnZhYmxlL2Zyb21FdmVudC5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9zcmMvY29tcG9uZW50cy9lbnVtcy9Db2xvci50cyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL3RhcC5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9zcmMvY29tcG9uZW50cy9QaWVjZS50cyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9zcmMvY29tcG9uZW50cy9lbnVtcy9QaWVjZVR5cGUudHMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vc3JjL2NvbXBvbmVudHMvUGF3bi50cyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9zcmMvY29tcG9uZW50cy9CaXNob3AudHMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vc3JjL2NvbXBvbmVudHMvS25pZ2h0LnRzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL3NyYy9jb21wb25lbnRzL1Jvb2sudHMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vc3JjL2NvbXBvbmVudHMvUXVlZW4udHMiLCJ3ZWJwYWNrOi8vZWNvbW1lcmNlLy4vc3JjL2NvbXBvbmVudHMvS2luZy50cyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvci5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3ViamVjdC5qcyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvQmVoYXZpb3JTdWJqZWN0LmpzIiwid2VicGFjazovL2Vjb21tZXJjZS8uL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly9lY29tbWVyY2UvLi9zcmMvY29tcG9uZW50cy9DaGVzc2JvYXJkLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxuXG5QZXJtaXNzaW9uIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBhbmQvb3IgZGlzdHJpYnV0ZSB0aGlzIHNvZnR3YXJlIGZvciBhbnlcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiBBTkQgVEhFIEFVVEhPUiBESVNDTEFJTVMgQUxMIFdBUlJBTlRJRVMgV0lUSFxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXG5JTkRJUkVDVCwgT1IgQ09OU0VRVUVOVElBTCBEQU1BR0VTIE9SIEFOWSBEQU1BR0VTIFdIQVRTT0VWRVIgUkVTVUxUSU5HIEZST01cbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXG5QRVJGT1JNQU5DRSBPRiBUSElTIFNPRlRXQVJFLlxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlLCBTdXBwcmVzc2VkRXJyb3IsIFN5bWJvbCAqL1xuXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcbiAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxuICAgICAgKHsgX19wcm90b19fOiBbXSB9IGluc3RhbmNlb2YgQXJyYXkgJiYgZnVuY3Rpb24gKGQsIGIpIHsgZC5fX3Byb3RvX18gPSBiOyB9KSB8fFxuICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcbiAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcbiAgaWYgKHR5cGVvZiBiICE9PSBcImZ1bmN0aW9uXCIgJiYgYiAhPT0gbnVsbClcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcbiAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcbiAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbn1cblxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xuICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xuICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHQ7XG4gIH1cbiAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3Jlc3QocywgZSkge1xuICB2YXIgdCA9IHt9O1xuICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcbiAgICAgIHRbcF0gPSBzW3BdO1xuICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgaWYgKGUuaW5kZXhPZihwW2ldKSA8IDAgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHMsIHBbaV0pKVxuICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcbiAgICAgIH1cbiAgcmV0dXJuIHQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2RlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xuICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXNEZWNvcmF0ZShjdG9yLCBkZXNjcmlwdG9ySW4sIGRlY29yYXRvcnMsIGNvbnRleHRJbiwgaW5pdGlhbGl6ZXJzLCBleHRyYUluaXRpYWxpemVycykge1xuICBmdW5jdGlvbiBhY2NlcHQoZikgeyBpZiAoZiAhPT0gdm9pZCAwICYmIHR5cGVvZiBmICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJGdW5jdGlvbiBleHBlY3RlZFwiKTsgcmV0dXJuIGY7IH1cbiAgdmFyIGtpbmQgPSBjb250ZXh0SW4ua2luZCwga2V5ID0ga2luZCA9PT0gXCJnZXR0ZXJcIiA/IFwiZ2V0XCIgOiBraW5kID09PSBcInNldHRlclwiID8gXCJzZXRcIiA6IFwidmFsdWVcIjtcbiAgdmFyIHRhcmdldCA9ICFkZXNjcmlwdG9ySW4gJiYgY3RvciA/IGNvbnRleHRJbltcInN0YXRpY1wiXSA/IGN0b3IgOiBjdG9yLnByb3RvdHlwZSA6IG51bGw7XG4gIHZhciBkZXNjcmlwdG9yID0gZGVzY3JpcHRvckluIHx8ICh0YXJnZXQgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgY29udGV4dEluLm5hbWUpIDoge30pO1xuICB2YXIgXywgZG9uZSA9IGZhbHNlO1xuICBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgdmFyIGNvbnRleHQgPSB7fTtcbiAgICAgIGZvciAodmFyIHAgaW4gY29udGV4dEluKSBjb250ZXh0W3BdID0gcCA9PT0gXCJhY2Nlc3NcIiA/IHt9IDogY29udGV4dEluW3BdO1xuICAgICAgZm9yICh2YXIgcCBpbiBjb250ZXh0SW4uYWNjZXNzKSBjb250ZXh0LmFjY2Vzc1twXSA9IGNvbnRleHRJbi5hY2Nlc3NbcF07XG4gICAgICBjb250ZXh0LmFkZEluaXRpYWxpemVyID0gZnVuY3Rpb24gKGYpIHsgaWYgKGRvbmUpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgYWRkIGluaXRpYWxpemVycyBhZnRlciBkZWNvcmF0aW9uIGhhcyBjb21wbGV0ZWRcIik7IGV4dHJhSW5pdGlhbGl6ZXJzLnB1c2goYWNjZXB0KGYgfHwgbnVsbCkpOyB9O1xuICAgICAgdmFyIHJlc3VsdCA9ICgwLCBkZWNvcmF0b3JzW2ldKShraW5kID09PSBcImFjY2Vzc29yXCIgPyB7IGdldDogZGVzY3JpcHRvci5nZXQsIHNldDogZGVzY3JpcHRvci5zZXQgfSA6IGRlc2NyaXB0b3Jba2V5XSwgY29udGV4dCk7XG4gICAgICBpZiAoa2luZCA9PT0gXCJhY2Nlc3NvclwiKSB7XG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gdm9pZCAwKSBjb250aW51ZTtcbiAgICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsIHx8IHR5cGVvZiByZXN1bHQgIT09IFwib2JqZWN0XCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3QgZXhwZWN0ZWRcIik7XG4gICAgICAgICAgaWYgKF8gPSBhY2NlcHQocmVzdWx0LmdldCkpIGRlc2NyaXB0b3IuZ2V0ID0gXztcbiAgICAgICAgICBpZiAoXyA9IGFjY2VwdChyZXN1bHQuc2V0KSkgZGVzY3JpcHRvci5zZXQgPSBfO1xuICAgICAgICAgIGlmIChfID0gYWNjZXB0KHJlc3VsdC5pbml0KSkgaW5pdGlhbGl6ZXJzLnVuc2hpZnQoXyk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChfID0gYWNjZXB0KHJlc3VsdCkpIHtcbiAgICAgICAgICBpZiAoa2luZCA9PT0gXCJmaWVsZFwiKSBpbml0aWFsaXplcnMudW5zaGlmdChfKTtcbiAgICAgICAgICBlbHNlIGRlc2NyaXB0b3Jba2V5XSA9IF87XG4gICAgICB9XG4gIH1cbiAgaWYgKHRhcmdldCkgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgY29udGV4dEluLm5hbWUsIGRlc2NyaXB0b3IpO1xuICBkb25lID0gdHJ1ZTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3J1bkluaXRpYWxpemVycyh0aGlzQXJnLCBpbml0aWFsaXplcnMsIHZhbHVlKSB7XG4gIHZhciB1c2VWYWx1ZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGluaXRpYWxpemVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFsdWUgPSB1c2VWYWx1ZSA/IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcsIHZhbHVlKSA6IGluaXRpYWxpemVyc1tpXS5jYWxsKHRoaXNBcmcpO1xuICB9XG4gIHJldHVybiB1c2VWYWx1ZSA/IHZhbHVlIDogdm9pZCAwO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fcHJvcEtleSh4KSB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gXCJzeW1ib2xcIiA/IHggOiBcIlwiLmNvbmNhdCh4KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX3NldEZ1bmN0aW9uTmFtZShmLCBuYW1lLCBwcmVmaXgpIHtcbiAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN5bWJvbFwiKSBuYW1lID0gbmFtZS5kZXNjcmlwdGlvbiA/IFwiW1wiLmNvbmNhdChuYW1lLmRlc2NyaXB0aW9uLCBcIl1cIikgOiBcIlwiO1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGYsIFwibmFtZVwiLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHByZWZpeCA/IFwiXCIuY29uY2F0KHByZWZpeCwgXCIgXCIsIG5hbWUpIDogbmFtZSB9KTtcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XG4gIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxuICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2dlbmVyYXRvcih0aGlzQXJnLCBib2R5KSB7XG4gIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xuICBmdW5jdGlvbiB2ZXJiKG4pIHsgcmV0dXJuIGZ1bmN0aW9uICh2KSB7IHJldHVybiBzdGVwKFtuLCB2XSk7IH07IH1cbiAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xuICAgICAgd2hpbGUgKGcgJiYgKGcgPSAwLCBvcFswXSAmJiAoXyA9IDApKSwgXykgdHJ5IHtcbiAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XG4gICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcbiAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XG4gICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XG4gICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxuICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XG4gICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xuICB9XG59XG5cbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICB9XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICBvW2syXSA9IG1ba107XG59KTtcblxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XG4gIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobywgcCkpIF9fY3JlYXRlQmluZGluZyhvLCBtLCBwKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcbiAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcbiAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XG4gIGlmIChvICYmIHR5cGVvZiBvLmxlbmd0aCA9PT0gXCJudW1iZXJcIikgcmV0dXJuIHtcbiAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xuICAgICAgICAgIHJldHVybiB7IHZhbHVlOiBvICYmIG9baSsrXSwgZG9uZTogIW8gfTtcbiAgICAgIH1cbiAgfTtcbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihzID8gXCJPYmplY3QgaXMgbm90IGl0ZXJhYmxlLlwiIDogXCJTeW1ib2wuaXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19yZWFkKG8sIG4pIHtcbiAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xuICBpZiAoIW0pIHJldHVybiBvO1xuICB2YXIgaSA9IG0uY2FsbChvKSwgciwgYXIgPSBbXSwgZTtcbiAgdHJ5IHtcbiAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xuICB9XG4gIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxuICBmaW5hbGx5IHtcbiAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XG4gICAgICB9XG4gICAgICBmaW5hbGx5IHsgaWYgKGUpIHRocm93IGUuZXJyb3I7IH1cbiAgfVxuICByZXR1cm4gYXI7XG59XG5cbi8qKiBAZGVwcmVjYXRlZCAqL1xuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xuICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcbiAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcbiAgcmV0dXJuIGFyO1xufVxuXG4vKiogQGRlcHJlY2F0ZWQgKi9cbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5cygpIHtcbiAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XG4gIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcbiAgICAgIGZvciAodmFyIGEgPSBhcmd1bWVudHNbaV0sIGogPSAwLCBqbCA9IGEubGVuZ3RoOyBqIDwgamw7IGorKywgaysrKVxuICAgICAgICAgIHJba10gPSBhW2pdO1xuICByZXR1cm4gcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcbiAgaWYgKHBhY2sgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gMikgZm9yICh2YXIgaSA9IDAsIGwgPSBmcm9tLmxlbmd0aCwgYXI7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcbiAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xuICAgICAgICAgIGFyW2ldID0gZnJvbVtpXTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gdG8uY29uY2F0KGFyIHx8IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20pKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXdhaXQodikge1xuICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XG4gIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XG4gIHZhciBnID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pLCBpLCBxID0gW107XG4gIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcbiAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XG4gIGZ1bmN0aW9uIHJlc3VtZShuLCB2KSB7IHRyeSB7IHN0ZXAoZ1tuXSh2KSk7IH0gY2F0Y2ggKGUpIHsgc2V0dGxlKHFbMF1bM10sIGUpOyB9IH1cbiAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XG4gIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cbiAgZnVuY3Rpb24gcmVqZWN0KHZhbHVlKSB7IHJlc3VtZShcInRocm93XCIsIHZhbHVlKTsgfVxuICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcbiAgdmFyIGksIHA7XG4gIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiwgZnVuY3Rpb24gKGUpIHsgdGhyb3cgZTsgfSksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGk7XG4gIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IGZhbHNlIH0gOiBmID8gZih2KSA6IHY7IH0gOiBmOyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jVmFsdWVzKG8pIHtcbiAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcbiAgcmV0dXJuIG0gPyBtLmNhbGwobykgOiAobyA9IHR5cGVvZiBfX3ZhbHVlcyA9PT0gXCJmdW5jdGlvblwiID8gX192YWx1ZXMobykgOiBvW1N5bWJvbC5pdGVyYXRvcl0oKSwgaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIpLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0sIGkpO1xuICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XG4gIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XG4gIGlmIChPYmplY3QuZGVmaW5lUHJvcGVydHkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvb2tlZCwgXCJyYXdcIiwgeyB2YWx1ZTogcmF3IH0pOyB9IGVsc2UgeyBjb29rZWQucmF3ID0gcmF3OyB9XG4gIHJldHVybiBjb29rZWQ7XG59O1xuXG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xuICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9faW1wb3J0RGVmYXVsdChtb2QpIHtcbiAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XG4gIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIGdldHRlclwiKTtcbiAgaWYgKHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgIT09IHN0YXRlIHx8ICFmIDogIXN0YXRlLmhhcyhyZWNlaXZlcikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcmVhZCBwcml2YXRlIG1lbWJlciBmcm9tIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcbiAgaWYgKGtpbmQgPT09IFwibVwiKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiUHJpdmF0ZSBtZXRob2QgaXMgbm90IHdyaXRhYmxlXCIpO1xuICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBzZXR0ZXJcIik7XG4gIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XG4gIHJldHVybiAoa2luZCA9PT0gXCJhXCIgPyBmLmNhbGwocmVjZWl2ZXIsIHZhbHVlKSA6IGYgPyBmLnZhbHVlID0gdmFsdWUgOiBzdGF0ZS5zZXQocmVjZWl2ZXIsIHZhbHVlKSksIHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZEluKHN0YXRlLCByZWNlaXZlcikge1xuICBpZiAocmVjZWl2ZXIgPT09IG51bGwgfHwgKHR5cGVvZiByZWNlaXZlciAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgcmVjZWl2ZXIgIT09IFwiZnVuY3Rpb25cIikpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgdXNlICdpbicgb3BlcmF0b3Igb24gbm9uLW9iamVjdFwiKTtcbiAgcmV0dXJuIHR5cGVvZiBzdGF0ZSA9PT0gXCJmdW5jdGlvblwiID8gcmVjZWl2ZXIgPT09IHN0YXRlIDogc3RhdGUuaGFzKHJlY2VpdmVyKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9fYWRkRGlzcG9zYWJsZVJlc291cmNlKGVudiwgdmFsdWUsIGFzeW5jKSB7XG4gIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB2YWx1ZSAhPT0gdm9pZCAwKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdmFsdWUgIT09IFwiZnVuY3Rpb25cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBleHBlY3RlZC5cIik7XG4gICAgdmFyIGRpc3Bvc2U7XG4gICAgaWYgKGFzeW5jKSB7XG4gICAgICAgIGlmICghU3ltYm9sLmFzeW5jRGlzcG9zZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0Rpc3Bvc2UgaXMgbm90IGRlZmluZWQuXCIpO1xuICAgICAgICBkaXNwb3NlID0gdmFsdWVbU3ltYm9sLmFzeW5jRGlzcG9zZV07XG4gICAgfVxuICAgIGlmIChkaXNwb3NlID09PSB2b2lkIDApIHtcbiAgICAgICAgaWYgKCFTeW1ib2wuZGlzcG9zZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5kaXNwb3NlIGlzIG5vdCBkZWZpbmVkLlwiKTtcbiAgICAgICAgZGlzcG9zZSA9IHZhbHVlW1N5bWJvbC5kaXNwb3NlXTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkaXNwb3NlICE9PSBcImZ1bmN0aW9uXCIpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJPYmplY3Qgbm90IGRpc3Bvc2FibGUuXCIpO1xuICAgIGVudi5zdGFjay5wdXNoKHsgdmFsdWU6IHZhbHVlLCBkaXNwb3NlOiBkaXNwb3NlLCBhc3luYzogYXN5bmMgfSk7XG4gIH1cbiAgZWxzZSBpZiAoYXN5bmMpIHtcbiAgICBlbnYuc3RhY2sucHVzaCh7IGFzeW5jOiB0cnVlIH0pO1xuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxudmFyIF9TdXBwcmVzc2VkRXJyb3IgPSB0eXBlb2YgU3VwcHJlc3NlZEVycm9yID09PSBcImZ1bmN0aW9uXCIgPyBTdXBwcmVzc2VkRXJyb3IgOiBmdW5jdGlvbiAoZXJyb3IsIHN1cHByZXNzZWQsIG1lc3NhZ2UpIHtcbiAgdmFyIGUgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gIHJldHVybiBlLm5hbWUgPSBcIlN1cHByZXNzZWRFcnJvclwiLCBlLmVycm9yID0gZXJyb3IsIGUuc3VwcHJlc3NlZCA9IHN1cHByZXNzZWQsIGU7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gX19kaXNwb3NlUmVzb3VyY2VzKGVudikge1xuICBmdW5jdGlvbiBmYWlsKGUpIHtcbiAgICBlbnYuZXJyb3IgPSBlbnYuaGFzRXJyb3IgPyBuZXcgX1N1cHByZXNzZWRFcnJvcihlLCBlbnYuZXJyb3IsIFwiQW4gZXJyb3Igd2FzIHN1cHByZXNzZWQgZHVyaW5nIGRpc3Bvc2FsLlwiKSA6IGU7XG4gICAgZW52Lmhhc0Vycm9yID0gdHJ1ZTtcbiAgfVxuICBmdW5jdGlvbiBuZXh0KCkge1xuICAgIHdoaWxlIChlbnYuc3RhY2subGVuZ3RoKSB7XG4gICAgICB2YXIgcmVjID0gZW52LnN0YWNrLnBvcCgpO1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlYy5kaXNwb3NlICYmIHJlYy5kaXNwb3NlLmNhbGwocmVjLnZhbHVlKTtcbiAgICAgICAgaWYgKHJlYy5hc3luYykgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpLnRoZW4obmV4dCwgZnVuY3Rpb24oZSkgeyBmYWlsKGUpOyByZXR1cm4gbmV4dCgpOyB9KTtcbiAgICAgIH1cbiAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgZmFpbChlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGVudi5oYXNFcnJvcikgdGhyb3cgZW52LmVycm9yO1xuICB9XG4gIHJldHVybiBuZXh0KCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgX19leHRlbmRzLFxuICBfX2Fzc2lnbixcbiAgX19yZXN0LFxuICBfX2RlY29yYXRlLFxuICBfX3BhcmFtLFxuICBfX21ldGFkYXRhLFxuICBfX2F3YWl0ZXIsXG4gIF9fZ2VuZXJhdG9yLFxuICBfX2NyZWF0ZUJpbmRpbmcsXG4gIF9fZXhwb3J0U3RhcixcbiAgX192YWx1ZXMsXG4gIF9fcmVhZCxcbiAgX19zcHJlYWQsXG4gIF9fc3ByZWFkQXJyYXlzLFxuICBfX3NwcmVhZEFycmF5LFxuICBfX2F3YWl0LFxuICBfX2FzeW5jR2VuZXJhdG9yLFxuICBfX2FzeW5jRGVsZWdhdG9yLFxuICBfX2FzeW5jVmFsdWVzLFxuICBfX21ha2VUZW1wbGF0ZU9iamVjdCxcbiAgX19pbXBvcnRTdGFyLFxuICBfX2ltcG9ydERlZmF1bHQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRHZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRTZXQsXG4gIF9fY2xhc3NQcml2YXRlRmllbGRJbixcbiAgX19hZGREaXNwb3NhYmxlUmVzb3VyY2UsXG4gIF9fZGlzcG9zZVJlc291cmNlcyxcbn07XG4iLCJleHBvcnQgdmFyIGlzQXJyYXlMaWtlID0gKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4ICYmIHR5cGVvZiB4Lmxlbmd0aCA9PT0gJ251bWJlcicgJiYgdHlwZW9mIHggIT09ICdmdW5jdGlvbic7IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNBcnJheUxpa2UuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGlzRnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNGdW5jdGlvbi5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gY3JlYXRlRXJyb3JDbGFzcyhjcmVhdGVJbXBsKSB7XG4gICAgdmFyIF9zdXBlciA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICBFcnJvci5jYWxsKGluc3RhbmNlKTtcbiAgICAgICAgaW5zdGFuY2Uuc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICB9O1xuICAgIHZhciBjdG9yRnVuYyA9IGNyZWF0ZUltcGwoX3N1cGVyKTtcbiAgICBjdG9yRnVuYy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG4gICAgY3RvckZ1bmMucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gY3RvckZ1bmM7XG4gICAgcmV0dXJuIGN0b3JGdW5jO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlRXJyb3JDbGFzcy5qcy5tYXAiLCJpbXBvcnQgeyBjcmVhdGVFcnJvckNsYXNzIH0gZnJvbSAnLi9jcmVhdGVFcnJvckNsYXNzJztcbmV4cG9ydCB2YXIgVW5zdWJzY3JpcHRpb25FcnJvciA9IGNyZWF0ZUVycm9yQ2xhc3MoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBVbnN1YnNjcmlwdGlvbkVycm9ySW1wbChlcnJvcnMpIHtcbiAgICAgICAgX3N1cGVyKHRoaXMpO1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBlcnJvcnNcbiAgICAgICAgICAgID8gZXJyb3JzLmxlbmd0aCArIFwiIGVycm9ycyBvY2N1cnJlZCBkdXJpbmcgdW5zdWJzY3JpcHRpb246XFxuXCIgKyBlcnJvcnMubWFwKGZ1bmN0aW9uIChlcnIsIGkpIHsgcmV0dXJuIGkgKyAxICsgXCIpIFwiICsgZXJyLnRvU3RyaW5nKCk7IH0pLmpvaW4oJ1xcbiAgJylcbiAgICAgICAgICAgIDogJyc7XG4gICAgICAgIHRoaXMubmFtZSA9ICdVbnN1YnNjcmlwdGlvbkVycm9yJztcbiAgICAgICAgdGhpcy5lcnJvcnMgPSBlcnJvcnM7XG4gICAgfTtcbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VW5zdWJzY3JpcHRpb25FcnJvci5qcy5tYXAiLCJleHBvcnQgZnVuY3Rpb24gYXJyUmVtb3ZlKGFyciwgaXRlbSkge1xuICAgIGlmIChhcnIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gICAgICAgIDAgPD0gaW5kZXggJiYgYXJyLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXJyUmVtb3ZlLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSwgX192YWx1ZXMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBVbnN1YnNjcmlwdGlvbkVycm9yIH0gZnJvbSAnLi91dGlsL1Vuc3Vic2NyaXB0aW9uRXJyb3InO1xuaW1wb3J0IHsgYXJyUmVtb3ZlIH0gZnJvbSAnLi91dGlsL2FyclJlbW92ZSc7XG52YXIgU3Vic2NyaXB0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTdWJzY3JpcHRpb24oaW5pdGlhbFRlYXJkb3duKSB7XG4gICAgICAgIHRoaXMuaW5pdGlhbFRlYXJkb3duID0gaW5pdGlhbFRlYXJkb3duO1xuICAgICAgICB0aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICB0aGlzLl9maW5hbGl6ZXJzID0gbnVsbDtcbiAgICB9XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVfMSwgX2EsIGVfMiwgX2I7XG4gICAgICAgIHZhciBlcnJvcnM7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICAgICAgaWYgKF9wYXJlbnRhZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfcGFyZW50YWdlXzEgPSBfX3ZhbHVlcyhfcGFyZW50YWdlKSwgX3BhcmVudGFnZV8xXzEgPSBfcGFyZW50YWdlXzEubmV4dCgpOyAhX3BhcmVudGFnZV8xXzEuZG9uZTsgX3BhcmVudGFnZV8xXzEgPSBfcGFyZW50YWdlXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudF8xID0gX3BhcmVudGFnZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50XzEucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3BhcmVudGFnZV8xXzEgJiYgIV9wYXJlbnRhZ2VfMV8xLmRvbmUgJiYgKF9hID0gX3BhcmVudGFnZV8xLnJldHVybikpIF9hLmNhbGwoX3BhcmVudGFnZV8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3BhcmVudGFnZS5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGluaXRpYWxGaW5hbGl6ZXIgPSB0aGlzLmluaXRpYWxUZWFyZG93bjtcbiAgICAgICAgICAgIGlmIChpc0Z1bmN0aW9uKGluaXRpYWxGaW5hbGl6ZXIpKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbEZpbmFsaXplcigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvciA/IGUuZXJyb3JzIDogW2VdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfZmluYWxpemVycyA9IHRoaXMuX2ZpbmFsaXplcnM7XG4gICAgICAgICAgICBpZiAoX2ZpbmFsaXplcnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9maW5hbGl6ZXJzID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfZmluYWxpemVyc18xID0gX192YWx1ZXMoX2ZpbmFsaXplcnMpLCBfZmluYWxpemVyc18xXzEgPSBfZmluYWxpemVyc18xLm5leHQoKTsgIV9maW5hbGl6ZXJzXzFfMS5kb25lOyBfZmluYWxpemVyc18xXzEgPSBfZmluYWxpemVyc18xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbmFsaXplciA9IF9maW5hbGl6ZXJzXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhlY0ZpbmFsaXplcihmaW5hbGl6ZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IGVycm9ycyAhPT0gbnVsbCAmJiBlcnJvcnMgIT09IHZvaWQgMCA/IGVycm9ycyA6IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBVbnN1YnNjcmlwdGlvbkVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycyA9IF9fc3ByZWFkQXJyYXkoX19zcHJlYWRBcnJheShbXSwgX19yZWFkKGVycm9ycykpLCBfX3JlYWQoZXJyLmVycm9ycykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JzLnB1c2goZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVfMl8xKSB7IGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07IH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfZmluYWxpemVyc18xXzEgJiYgIV9maW5hbGl6ZXJzXzFfMS5kb25lICYmIChfYiA9IF9maW5hbGl6ZXJzXzEucmV0dXJuKSkgX2IuY2FsbChfZmluYWxpemVyc18xKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVycm9ycykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnN1YnNjcmlwdGlvbkVycm9yKGVycm9ycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRlYXJkb3duICYmIHRlYXJkb3duICE9PSB0aGlzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBleGVjRmluYWxpemVyKHRlYXJkb3duKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICh0ZWFyZG93biBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBpZiAodGVhcmRvd24uY2xvc2VkIHx8IHRlYXJkb3duLl9oYXNQYXJlbnQodGhpcykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0ZWFyZG93bi5fYWRkUGFyZW50KHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAodGhpcy5fZmluYWxpemVycyA9IChfYSA9IHRoaXMuX2ZpbmFsaXplcnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdKS5wdXNoKHRlYXJkb3duKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5faGFzUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgcmV0dXJuIF9wYXJlbnRhZ2UgPT09IHBhcmVudCB8fCAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSAmJiBfcGFyZW50YWdlLmluY2x1ZGVzKHBhcmVudCkpO1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5fYWRkUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSA/IChfcGFyZW50YWdlLnB1c2gocGFyZW50KSwgX3BhcmVudGFnZSkgOiBfcGFyZW50YWdlID8gW19wYXJlbnRhZ2UsIHBhcmVudF0gOiBwYXJlbnQ7XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9yZW1vdmVQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICBpZiAoX3BhcmVudGFnZSA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkpIHtcbiAgICAgICAgICAgIGFyclJlbW92ZShfcGFyZW50YWdlLCBwYXJlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICh0ZWFyZG93bikge1xuICAgICAgICB2YXIgX2ZpbmFsaXplcnMgPSB0aGlzLl9maW5hbGl6ZXJzO1xuICAgICAgICBfZmluYWxpemVycyAmJiBhcnJSZW1vdmUoX2ZpbmFsaXplcnMsIHRlYXJkb3duKTtcbiAgICAgICAgaWYgKHRlYXJkb3duIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICB0ZWFyZG93bi5fcmVtb3ZlUGFyZW50KHRoaXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24uRU1QVFkgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZW1wdHkgPSBuZXcgU3Vic2NyaXB0aW9uKCk7XG4gICAgICAgIGVtcHR5LmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBlbXB0eTtcbiAgICB9KSgpO1xuICAgIHJldHVybiBTdWJzY3JpcHRpb247XG59KCkpO1xuZXhwb3J0IHsgU3Vic2NyaXB0aW9uIH07XG5leHBvcnQgdmFyIEVNUFRZX1NVQlNDUklQVElPTiA9IFN1YnNjcmlwdGlvbi5FTVBUWTtcbmV4cG9ydCBmdW5jdGlvbiBpc1N1YnNjcmlwdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiAodmFsdWUgaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24gfHxcbiAgICAgICAgKHZhbHVlICYmICdjbG9zZWQnIGluIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUucmVtb3ZlKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLmFkZCkgJiYgaXNGdW5jdGlvbih2YWx1ZS51bnN1YnNjcmliZSkpKTtcbn1cbmZ1bmN0aW9uIGV4ZWNGaW5hbGl6ZXIoZmluYWxpemVyKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24oZmluYWxpemVyKSkge1xuICAgICAgICBmaW5hbGl6ZXIoKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZpbmFsaXplci51bnN1YnNjcmliZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmlwdGlvbi5qcy5tYXAiLCJleHBvcnQgdmFyIGNvbmZpZyA9IHtcbiAgICBvblVuaGFuZGxlZEVycm9yOiBudWxsLFxuICAgIG9uU3RvcHBlZE5vdGlmaWNhdGlvbjogbnVsbCxcbiAgICBQcm9taXNlOiB1bmRlZmluZWQsXG4gICAgdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZzogZmFsc2UsXG4gICAgdXNlRGVwcmVjYXRlZE5leHRDb250ZXh0OiBmYWxzZSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5leHBvcnQgdmFyIHRpbWVvdXRQcm92aWRlciA9IHtcbiAgICBzZXRUaW1lb3V0OiBmdW5jdGlvbiAoaGFuZGxlciwgdGltZW91dCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDI7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaSAtIDJdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZGVsZWdhdGUgPSB0aW1lb3V0UHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuc2V0VGltZW91dCkge1xuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlLnNldFRpbWVvdXQuYXBwbHkoZGVsZWdhdGUsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2V0VGltZW91dC5hcHBseSh2b2lkIDAsIF9fc3ByZWFkQXJyYXkoW2hhbmRsZXIsIHRpbWVvdXRdLCBfX3JlYWQoYXJncykpKTtcbiAgICB9LFxuICAgIGNsZWFyVGltZW91dDogZnVuY3Rpb24gKGhhbmRsZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSB0aW1lb3V0UHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIHJldHVybiAoKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5jbGVhclRpbWVvdXQpIHx8IGNsZWFyVGltZW91dCkoaGFuZGxlKTtcbiAgICB9LFxuICAgIGRlbGVnYXRlOiB1bmRlZmluZWQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZW91dFByb3ZpZGVyLmpzLm1hcCIsImltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyB0aW1lb3V0UHJvdmlkZXIgfSBmcm9tICcuLi9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyJztcbmV4cG9ydCBmdW5jdGlvbiByZXBvcnRVbmhhbmRsZWRFcnJvcihlcnIpIHtcbiAgICB0aW1lb3V0UHJvdmlkZXIuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvblVuaGFuZGxlZEVycm9yID0gY29uZmlnLm9uVW5oYW5kbGVkRXJyb3I7XG4gICAgICAgIGlmIChvblVuaGFuZGxlZEVycm9yKSB7XG4gICAgICAgICAgICBvblVuaGFuZGxlZEVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcG9ydFVuaGFuZGxlZEVycm9yLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBub29wKCkgeyB9XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub29wLmpzLm1hcCIsImV4cG9ydCB2YXIgQ09NUExFVEVfTk9USUZJQ0FUSU9OID0gKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignQycsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTsgfSkoKTtcbmV4cG9ydCBmdW5jdGlvbiBlcnJvck5vdGlmaWNhdGlvbihlcnJvcikge1xuICAgIHJldHVybiBjcmVhdGVOb3RpZmljYXRpb24oJ0UnLCB1bmRlZmluZWQsIGVycm9yKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBuZXh0Tm90aWZpY2F0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignTicsIHZhbHVlLCB1bmRlZmluZWQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU5vdGlmaWNhdGlvbihraW5kLCB2YWx1ZSwgZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm90aWZpY2F0aW9uRmFjdG9yaWVzLmpzLm1hcCIsImltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG52YXIgY29udGV4dCA9IG51bGw7XG5leHBvcnQgZnVuY3Rpb24gZXJyb3JDb250ZXh0KGNiKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgIHZhciBpc1Jvb3QgPSAhY29udGV4dDtcbiAgICAgICAgaWYgKGlzUm9vdCkge1xuICAgICAgICAgICAgY29udGV4dCA9IHsgZXJyb3JUaHJvd246IGZhbHNlLCBlcnJvcjogbnVsbCB9O1xuICAgICAgICB9XG4gICAgICAgIGNiKCk7XG4gICAgICAgIGlmIChpc1Jvb3QpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IGNvbnRleHQsIGVycm9yVGhyb3duID0gX2EuZXJyb3JUaHJvd24sIGVycm9yID0gX2EuZXJyb3I7XG4gICAgICAgICAgICBjb250ZXh0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjYigpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBjYXB0dXJlRXJyb3IoZXJyKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nICYmIGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5lcnJvclRocm93biA9IHRydWU7XG4gICAgICAgIGNvbnRleHQuZXJyb3IgPSBlcnI7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JDb250ZXh0LmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IGlzU3Vic2NyaXB0aW9uLCBTdWJzY3JpcHRpb24gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBjb25maWcgfSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQgeyByZXBvcnRVbmhhbmRsZWRFcnJvciB9IGZyb20gJy4vdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvcic7XG5pbXBvcnQgeyBub29wIH0gZnJvbSAnLi91dGlsL25vb3AnO1xuaW1wb3J0IHsgbmV4dE5vdGlmaWNhdGlvbiwgZXJyb3JOb3RpZmljYXRpb24sIENPTVBMRVRFX05PVElGSUNBVElPTiB9IGZyb20gJy4vTm90aWZpY2F0aW9uRmFjdG9yaWVzJztcbmltcG9ydCB7IHRpbWVvdXRQcm92aWRlciB9IGZyb20gJy4vc2NoZWR1bGVyL3RpbWVvdXRQcm92aWRlcic7XG5pbXBvcnQgeyBjYXB0dXJlRXJyb3IgfSBmcm9tICcuL3V0aWwvZXJyb3JDb250ZXh0JztcbnZhciBTdWJzY3JpYmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJzY3JpYmVyKGRlc3RpbmF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmlzU3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICBpZiAoZGVzdGluYXRpb24pIHtcbiAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgICAgICBpZiAoaXNTdWJzY3JpcHRpb24oZGVzdGluYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24uYWRkKF90aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gRU1QVFlfT0JTRVJWRVI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJzY3JpYmVyLmNyZWF0ZSA9IGZ1bmN0aW9uIChuZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTYWZlU3Vic2NyaWJlcihuZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24obmV4dE5vdGlmaWNhdGlvbih2YWx1ZSksIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbmV4dCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24oZXJyb3JOb3RpZmljYXRpb24oZXJyKSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKENPTVBMRVRFX05PVElGSUNBVElPTiwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgX3N1cGVyLnByb3RvdHlwZS51bnN1YnNjcmliZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZGVzdGluYXRpb24ubmV4dCh2YWx1ZSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5fZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIFN1YnNjcmliZXI7XG59KFN1YnNjcmlwdGlvbikpO1xuZXhwb3J0IHsgU3Vic2NyaWJlciB9O1xudmFyIF9iaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQ7XG5mdW5jdGlvbiBiaW5kKGZuLCB0aGlzQXJnKSB7XG4gICAgcmV0dXJuIF9iaW5kLmNhbGwoZm4sIHRoaXNBcmcpO1xufVxudmFyIENvbnN1bWVyT2JzZXJ2ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIENvbnN1bWVyT2JzZXJ2ZXIocGFydGlhbE9ic2VydmVyKSB7XG4gICAgICAgIHRoaXMucGFydGlhbE9ic2VydmVyID0gcGFydGlhbE9ic2VydmVyO1xuICAgIH1cbiAgICBDb25zdW1lck9ic2VydmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKHBhcnRpYWxPYnNlcnZlci5uZXh0KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgQ29uc3VtZXJPYnNlcnZlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBwYXJ0aWFsT2JzZXJ2ZXIgPSB0aGlzLnBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKHBhcnRpYWxPYnNlcnZlci5lcnJvcikge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBwYXJ0aWFsT2JzZXJ2ZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIENvbnN1bWVyT2JzZXJ2ZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcGFydGlhbE9ic2VydmVyID0gdGhpcy5wYXJ0aWFsT2JzZXJ2ZXI7XG4gICAgICAgIGlmIChwYXJ0aWFsT2JzZXJ2ZXIuY29tcGxldGUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBDb25zdW1lck9ic2VydmVyO1xufSgpKTtcbnZhciBTYWZlU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFNhZmVTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFNhZmVTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgdmFyIHBhcnRpYWxPYnNlcnZlcjtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24ob2JzZXJ2ZXJPck5leHQpIHx8ICFvYnNlcnZlck9yTmV4dCkge1xuICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyID0ge1xuICAgICAgICAgICAgICAgIG5leHQ6IChvYnNlcnZlck9yTmV4dCAhPT0gbnVsbCAmJiBvYnNlcnZlck9yTmV4dCAhPT0gdm9pZCAwID8gb2JzZXJ2ZXJPck5leHQgOiB1bmRlZmluZWQpLFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvciAhPT0gbnVsbCAmJiBlcnJvciAhPT0gdm9pZCAwID8gZXJyb3IgOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgY29tcGxldGU6IGNvbXBsZXRlICE9PSBudWxsICYmIGNvbXBsZXRlICE9PSB2b2lkIDAgPyBjb21wbGV0ZSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgY29udGV4dF8xO1xuICAgICAgICAgICAgaWYgKF90aGlzICYmIGNvbmZpZy51c2VEZXByZWNhdGVkTmV4dENvbnRleHQpIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEgPSBPYmplY3QuY3JlYXRlKG9ic2VydmVyT3JOZXh0KTtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy51bnN1YnNjcmliZSgpOyB9O1xuICAgICAgICAgICAgICAgIHBhcnRpYWxPYnNlcnZlciA9IHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dDogb2JzZXJ2ZXJPck5leHQubmV4dCAmJiBiaW5kKG9ic2VydmVyT3JOZXh0Lm5leHQsIGNvbnRleHRfMSksXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBvYnNlcnZlck9yTmV4dC5lcnJvciAmJiBiaW5kKG9ic2VydmVyT3JOZXh0LmVycm9yLCBjb250ZXh0XzEpLFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogb2JzZXJ2ZXJPck5leHQuY29tcGxldGUgJiYgYmluZChvYnNlcnZlck9yTmV4dC5jb21wbGV0ZSwgY29udGV4dF8xKSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFydGlhbE9ic2VydmVyID0gb2JzZXJ2ZXJPck5leHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBuZXcgQ29uc3VtZXJPYnNlcnZlcihwYXJ0aWFsT2JzZXJ2ZXIpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIHJldHVybiBTYWZlU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgU2FmZVN1YnNjcmliZXIgfTtcbmZ1bmN0aW9uIGhhbmRsZVVuaGFuZGxlZEVycm9yKGVycm9yKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgIGNhcHR1cmVFcnJvcihlcnJvcik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICByZXBvcnRVbmhhbmRsZWRFcnJvcihlcnJvcik7XG4gICAgfVxufVxuZnVuY3Rpb24gZGVmYXVsdEVycm9ySGFuZGxlcihlcnIpIHtcbiAgICB0aHJvdyBlcnI7XG59XG5mdW5jdGlvbiBoYW5kbGVTdG9wcGVkTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbiwgc3Vic2NyaWJlcikge1xuICAgIHZhciBvblN0b3BwZWROb3RpZmljYXRpb24gPSBjb25maWcub25TdG9wcGVkTm90aWZpY2F0aW9uO1xuICAgIG9uU3RvcHBlZE5vdGlmaWNhdGlvbiAmJiB0aW1lb3V0UHJvdmlkZXIuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBvblN0b3BwZWROb3RpZmljYXRpb24obm90aWZpY2F0aW9uLCBzdWJzY3JpYmVyKTsgfSk7XG59XG5leHBvcnQgdmFyIEVNUFRZX09CU0VSVkVSID0ge1xuICAgIGNsb3NlZDogdHJ1ZSxcbiAgICBuZXh0OiBub29wLFxuICAgIGVycm9yOiBkZWZhdWx0RXJyb3JIYW5kbGVyLFxuICAgIGNvbXBsZXRlOiBub29wLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmliZXIuanMubWFwIiwiZXhwb3J0IHZhciBvYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHsgcmV0dXJuICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nICYmIFN5bWJvbC5vYnNlcnZhYmxlKSB8fCAnQEBvYnNlcnZhYmxlJzsgfSkoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9ic2VydmFibGUuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGlkZW50aXR5KHgpIHtcbiAgICByZXR1cm4geDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlkZW50aXR5LmpzLm1hcCIsImltcG9ydCB7IFNhZmVTdWJzY3JpYmVyLCBTdWJzY3JpYmVyIH0gZnJvbSAnLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IGlzU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4vc3ltYm9sL29ic2VydmFibGUnO1xuaW1wb3J0IHsgcGlwZUZyb21BcnJheSB9IGZyb20gJy4vdXRpbC9waXBlJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBlcnJvckNvbnRleHQgfSBmcm9tICcuL3V0aWwvZXJyb3JDb250ZXh0JztcbnZhciBPYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZSkge1xuICAgICAgICBpZiAoc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUubGlmdCA9IGZ1bmN0aW9uIChvcGVyYXRvcikge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgb2JzZXJ2YWJsZS5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBzdWJzY3JpYmVyID0gaXNTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0KSA/IG9ic2VydmVyT3JOZXh0IDogbmV3IFNhZmVTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICBlcnJvckNvbnRleHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMsIG9wZXJhdG9yID0gX2Eub3BlcmF0b3IsIHNvdXJjZSA9IF9hLnNvdXJjZTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKG9wZXJhdG9yXG4gICAgICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgICAgICBvcGVyYXRvci5jYWxsKHN1YnNjcmliZXIsIHNvdXJjZSlcbiAgICAgICAgICAgICAgICA6IHNvdXJjZVxuICAgICAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc3Vic2NyaWJlKHN1YnNjcmliZXIpXG4gICAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl90cnlTdWJzY3JpYmUoc3Vic2NyaWJlcikpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdWJzY3JpYmUoc2luayk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc2luay5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKG5leHQsIHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpYmVyID0gbmV3IFNhZmVTdWJzY3JpYmVyKHtcbiAgICAgICAgICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBlcnJvcjogcmVqZWN0LFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlOiByZXNvbHZlLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfdGhpcy5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuc291cmNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGVbU3ltYm9sX29ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvcGVyYXRpb25zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBvcGVyYXRpb25zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBpcGVGcm9tQXJyYXkob3BlcmF0aW9ucykodGhpcyk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS50b1Byb21pc2UgPSBmdW5jdGlvbiAocHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh4KSB7IHJldHVybiAodmFsdWUgPSB4KTsgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gcmVqZWN0KGVycik7IH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc29sdmUodmFsdWUpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKHN1YnNjcmliZSk7XG4gICAgfTtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZTtcbn0oKSk7XG5leHBvcnQgeyBPYnNlcnZhYmxlIH07XG5mdW5jdGlvbiBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcikge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKF9hID0gcHJvbWlzZUN0b3IgIT09IG51bGwgJiYgcHJvbWlzZUN0b3IgIT09IHZvaWQgMCA/IHByb21pc2VDdG9yIDogY29uZmlnLlByb21pc2UpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFByb21pc2U7XG59XG5mdW5jdGlvbiBpc09ic2VydmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUubmV4dCkgJiYgaXNGdW5jdGlvbih2YWx1ZS5lcnJvcikgJiYgaXNGdW5jdGlvbih2YWx1ZS5jb21wbGV0ZSk7XG59XG5mdW5jdGlvbiBpc1N1YnNjcmliZXIodmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlICYmIHZhbHVlIGluc3RhbmNlb2YgU3Vic2NyaWJlcikgfHwgKGlzT2JzZXJ2ZXIodmFsdWUpICYmIGlzU3Vic2NyaXB0aW9uKHZhbHVlKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYnNlcnZhYmxlLmpzLm1hcCIsImltcG9ydCB7IGlkZW50aXR5IH0gZnJvbSAnLi9pZGVudGl0eSc7XG5leHBvcnQgZnVuY3Rpb24gcGlwZSgpIHtcbiAgICB2YXIgZm5zID0gW107XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgZm5zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgfVxuICAgIHJldHVybiBwaXBlRnJvbUFycmF5KGZucyk7XG59XG5leHBvcnQgZnVuY3Rpb24gcGlwZUZyb21BcnJheShmbnMpIHtcbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gaWRlbnRpdHk7XG4gICAgfVxuICAgIGlmIChmbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBmbnNbMF07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiBwaXBlZChpbnB1dCkge1xuICAgICAgICByZXR1cm4gZm5zLnJlZHVjZShmdW5jdGlvbiAocHJldiwgZm4pIHsgcmV0dXJuIGZuKHByZXYpOyB9LCBpbnB1dCk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBpcGUuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGdldFN5bWJvbEl0ZXJhdG9yKCkge1xuICAgIGlmICh0eXBlb2YgU3ltYm9sICE9PSAnZnVuY3Rpb24nIHx8ICFTeW1ib2wuaXRlcmF0b3IpIHtcbiAgICAgICAgcmV0dXJuICdAQGl0ZXJhdG9yJztcbiAgICB9XG4gICAgcmV0dXJuIFN5bWJvbC5pdGVyYXRvcjtcbn1cbmV4cG9ydCB2YXIgaXRlcmF0b3IgPSBnZXRTeW1ib2xJdGVyYXRvcigpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXRlcmF0b3IuanMubWFwIiwiaW1wb3J0IHsgX19hc3luY1ZhbHVlcywgX19hd2FpdGVyLCBfX2dlbmVyYXRvciwgX192YWx1ZXMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlzQXJyYXlMaWtlIH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5TGlrZSc7XG5pbXBvcnQgeyBpc1Byb21pc2UgfSBmcm9tICcuLi91dGlsL2lzUHJvbWlzZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi4vT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc0ludGVyb3BPYnNlcnZhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0ludGVyb3BPYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzQXN5bmNJdGVyYWJsZSB9IGZyb20gJy4uL3V0aWwvaXNBc3luY0l0ZXJhYmxlJztcbmltcG9ydCB7IGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yIH0gZnJvbSAnLi4vdXRpbC90aHJvd1Vub2JzZXJ2YWJsZUVycm9yJztcbmltcG9ydCB7IGlzSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzSXRlcmFibGUnO1xuaW1wb3J0IHsgaXNSZWFkYWJsZVN0cmVhbUxpa2UsIHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IgfSBmcm9tICcuLi91dGlsL2lzUmVhZGFibGVTdHJlYW1MaWtlJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgcmVwb3J0VW5oYW5kbGVkRXJyb3IgfSBmcm9tICcuLi91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yJztcbmltcG9ydCB7IG9ic2VydmFibGUgYXMgU3ltYm9sX29ic2VydmFibGUgfSBmcm9tICcuLi9zeW1ib2wvb2JzZXJ2YWJsZSc7XG5leHBvcnQgZnVuY3Rpb24gaW5uZXJGcm9tKGlucHV0KSB7XG4gICAgaWYgKGlucHV0IGluc3RhbmNlb2YgT2JzZXJ2YWJsZSkge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgIGlmIChpc0ludGVyb3BPYnNlcnZhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21JbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzQXJyYXlMaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21BcnJheUxpa2UoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Byb21pc2UoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbVByb21pc2UoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FzeW5jSXRlcmFibGUoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gZnJvbUFzeW5jSXRlcmFibGUoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21JdGVyYWJsZShpbnB1dCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21SZWFkYWJsZVN0cmVhbUxpa2UoaW5wdXQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRocm93IGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tSW50ZXJvcE9ic2VydmFibGUob2JqKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBvYnMgPSBvYmpbU3ltYm9sX29ic2VydmFibGVdKCk7XG4gICAgICAgIGlmIChpc0Z1bmN0aW9uKG9icy5zdWJzY3JpYmUpKSB7XG4gICAgICAgICAgICByZXR1cm4gb2JzLnN1YnNjcmliZShzdWJzY3JpYmVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQcm92aWRlZCBvYmplY3QgZG9lcyBub3QgY29ycmVjdGx5IGltcGxlbWVudCBTeW1ib2wub2JzZXJ2YWJsZScpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21BcnJheUxpa2UoYXJyYXkpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGggJiYgIXN1YnNjcmliZXIuY2xvc2VkOyBpKyspIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChhcnJheVtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Qcm9taXNlKHByb21pc2UpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgcHJvbWlzZVxuICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoIXN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHsgcmV0dXJuIHN1YnNjcmliZXIuZXJyb3IoZXJyKTsgfSlcbiAgICAgICAgICAgIC50aGVuKG51bGwsIHJlcG9ydFVuaGFuZGxlZEVycm9yKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tSXRlcmFibGUoaXRlcmFibGUpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpdGVyYWJsZV8xID0gX192YWx1ZXMoaXRlcmFibGUpLCBpdGVyYWJsZV8xXzEgPSBpdGVyYWJsZV8xLm5leHQoKTsgIWl0ZXJhYmxlXzFfMS5kb25lOyBpdGVyYWJsZV8xXzEgPSBpdGVyYWJsZV8xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGl0ZXJhYmxlXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoaXRlcmFibGVfMV8xICYmICFpdGVyYWJsZV8xXzEuZG9uZSAmJiAoX2EgPSBpdGVyYWJsZV8xLnJldHVybikpIF9hLmNhbGwoaXRlcmFibGVfMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgIH1cbiAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21Bc3luY0l0ZXJhYmxlKGFzeW5jSXRlcmFibGUpIHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgcHJvY2Vzcyhhc3luY0l0ZXJhYmxlLCBzdWJzY3JpYmVyKS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0pO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGZyb21SZWFkYWJsZVN0cmVhbUxpa2UocmVhZGFibGVTdHJlYW0pIHtcbiAgICByZXR1cm4gZnJvbUFzeW5jSXRlcmFibGUocmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvcihyZWFkYWJsZVN0cmVhbSkpO1xufVxuZnVuY3Rpb24gcHJvY2Vzcyhhc3luY0l0ZXJhYmxlLCBzdWJzY3JpYmVyKSB7XG4gICAgdmFyIGFzeW5jSXRlcmFibGVfMSwgYXN5bmNJdGVyYWJsZV8xXzE7XG4gICAgdmFyIGVfMiwgX2E7XG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdmFsdWUsIGVfMl8xO1xuICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9iKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKF9iLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgICAgICAgICBfYi50cnlzLnB1c2goWzAsIDUsIDYsIDExXSk7XG4gICAgICAgICAgICAgICAgICAgIGFzeW5jSXRlcmFibGVfMSA9IF9fYXN5bmNWYWx1ZXMoYXN5bmNJdGVyYWJsZSk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBbNCwgYXN5bmNJdGVyYWJsZV8xLm5leHQoKV07XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShhc3luY0l0ZXJhYmxlXzFfMSA9IF9iLnNlbnQoKSwgIWFzeW5jSXRlcmFibGVfMV8xLmRvbmUpKSByZXR1cm4gWzMsIDRdO1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IGFzeW5jSXRlcmFibGVfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSAzO1xuICAgICAgICAgICAgICAgIGNhc2UgMzogcmV0dXJuIFszLCAxXTtcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IHJldHVybiBbMywgMTFdO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgZV8yXzEgPSBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgMTFdO1xuICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFs2LCAsIDksIDEwXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICghKGFzeW5jSXRlcmFibGVfMV8xICYmICFhc3luY0l0ZXJhYmxlXzFfMS5kb25lICYmIChfYSA9IGFzeW5jSXRlcmFibGVfMS5yZXR1cm4pKSkgcmV0dXJuIFszLCA4XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfYS5jYWxsKGFzeW5jSXRlcmFibGVfMSldO1xuICAgICAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICAgICAgX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDg7XG4gICAgICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gWzMsIDEwXTtcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs3XTtcbiAgICAgICAgICAgICAgICBjYXNlIDEwOiByZXR1cm4gWzddO1xuICAgICAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFsyXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbm5lckZyb20uanMubWFwIiwiaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4uL3N5bWJvbC9vYnNlcnZhYmxlJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihpbnB1dFtTeW1ib2xfb2JzZXJ2YWJsZV0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNJbnRlcm9wT2JzZXJ2YWJsZS5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSBcIi4vaXNGdW5jdGlvblwiO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvbWlzZSh2YWx1ZSkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2YWx1ZS50aGVuKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzUHJvbWlzZS5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc0FzeW5jSXRlcmFibGUob2JqKSB7XG4gICAgcmV0dXJuIFN5bWJvbC5hc3luY0l0ZXJhdG9yICYmIGlzRnVuY3Rpb24ob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FzeW5jSXRlcmFibGUuanMubWFwIiwiaW1wb3J0IHsgaXRlcmF0b3IgYXMgU3ltYm9sX2l0ZXJhdG9yIH0gZnJvbSAnLi4vc3ltYm9sL2l0ZXJhdG9yJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzSXRlcmFibGUoaW5wdXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihpbnB1dCA9PT0gbnVsbCB8fCBpbnB1dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5wdXRbU3ltYm9sX2l0ZXJhdG9yXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0l0ZXJhYmxlLmpzLm1hcCIsImltcG9ydCB7IF9fYXN5bmNHZW5lcmF0b3IsIF9fYXdhaXQsIF9fZ2VuZXJhdG9yIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yKHJlYWRhYmxlU3RyZWFtKSB7XG4gICAgcmV0dXJuIF9fYXN5bmNHZW5lcmF0b3IodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yXzEoKSB7XG4gICAgICAgIHZhciByZWFkZXIsIF9hLCB2YWx1ZSwgZG9uZTtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyID0gcmVhZGFibGVTdHJlYW0uZ2V0UmVhZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMSwgLCA5LCAxMF0pO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDI7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRydWUpIHJldHVybiBbMywgOF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgX19hd2FpdChyZWFkZXIucmVhZCgpKV07XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBfYSA9IF9iLnNlbnQoKSwgdmFsdWUgPSBfYS52YWx1ZSwgZG9uZSA9IF9hLmRvbmU7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZG9uZSkgcmV0dXJuIFszLCA1XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfX2F3YWl0KHZvaWQgMCldO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyLCBfYi5zZW50KCldO1xuICAgICAgICAgICAgICAgIGNhc2UgNTogcmV0dXJuIFs0LCBfX2F3YWl0KHZhbHVlKV07XG4gICAgICAgICAgICAgICAgY2FzZSA2OiByZXR1cm4gWzQsIF9iLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgMl07XG4gICAgICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gWzMsIDEwXTtcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5yZWxlYXNlTG9jaygpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzddO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6IHJldHVybiBbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVhZGFibGVTdHJlYW1MaWtlKG9iaikge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9iai5nZXRSZWFkZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNSZWFkYWJsZVN0cmVhbUxpa2UuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KSB7XG4gICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJZb3UgcHJvdmlkZWQgXCIgKyAoaW5wdXQgIT09IG51bGwgJiYgdHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyA/ICdhbiBpbnZhbGlkIG9iamVjdCcgOiBcIidcIiArIGlucHV0ICsgXCInXCIpICsgXCIgd2hlcmUgYSBzdHJlYW0gd2FzIGV4cGVjdGVkLiBZb3UgY2FuIHByb3ZpZGUgYW4gT2JzZXJ2YWJsZSwgUHJvbWlzZSwgUmVhZGFibGVTdHJlYW0sIEFycmF5LCBBc3luY0l0ZXJhYmxlLCBvciBJdGVyYWJsZS5cIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvd1Vub2JzZXJ2YWJsZUVycm9yLmpzLm1hcCIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0xpZnQoc291cmNlKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oc291cmNlID09PSBudWxsIHx8IHNvdXJjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc291cmNlLmxpZnQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG9wZXJhdGUoaW5pdCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNMaWZ0KHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2UubGlmdChmdW5jdGlvbiAobGlmdGVkU291cmNlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluaXQobGlmdGVkU291cmNlLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5hYmxlIHRvIGxpZnQgdW5rbm93biBPYnNlcnZhYmxlIHR5cGUnKTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlmdC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9uTmV4dCwgb25Db21wbGV0ZSwgb25FcnJvciwgb25GaW5hbGl6ZSkge1xuICAgIHJldHVybiBuZXcgT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUpO1xufVxudmFyIE9wZXJhdG9yU3Vic2NyaWJlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE9wZXJhdG9yU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBPcGVyYXRvclN1YnNjcmliZXIoZGVzdGluYXRpb24sIG9uTmV4dCwgb25Db21wbGV0ZSwgb25FcnJvciwgb25GaW5hbGl6ZSwgc2hvdWxkVW5zdWJzY3JpYmUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm9uRmluYWxpemUgPSBvbkZpbmFsaXplO1xuICAgICAgICBfdGhpcy5zaG91bGRVbnN1YnNjcmliZSA9IHNob3VsZFVuc3Vic2NyaWJlO1xuICAgICAgICBfdGhpcy5fbmV4dCA9IG9uTmV4dFxuICAgICAgICAgICAgPyBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbk5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9uZXh0O1xuICAgICAgICBfdGhpcy5fZXJyb3IgPSBvbkVycm9yXG4gICAgICAgICAgICA/IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IF9zdXBlci5wcm90b3R5cGUuX2Vycm9yO1xuICAgICAgICBfdGhpcy5fY29tcGxldGUgPSBvbkNvbXBsZXRlXG4gICAgICAgICAgICA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9wZXJhdG9yU3Vic2NyaWJlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKCF0aGlzLnNob3VsZFVuc3Vic2NyaWJlIHx8IHRoaXMuc2hvdWxkVW5zdWJzY3JpYmUoKSkge1xuICAgICAgICAgICAgdmFyIGNsb3NlZF8xID0gdGhpcy5jbG9zZWQ7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAhY2xvc2VkXzEgJiYgKChfYSA9IHRoaXMub25GaW5hbGl6ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGhpcykpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gT3BlcmF0b3JTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBPcGVyYXRvclN1YnNjcmliZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9wZXJhdG9yU3Vic2NyaWJlci5qcy5tYXAiLCJpbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciB9IGZyb20gJy4vT3BlcmF0b3JTdWJzY3JpYmVyJztcbmV4cG9ydCBmdW5jdGlvbiBtYXAocHJvamVjdCwgdGhpc0FyZykge1xuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQocHJvamVjdC5jYWxsKHRoaXNBcmcsIHZhbHVlLCBpbmRleCsrKSk7XG4gICAgICAgIH0pKTtcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1hcC5qcy5tYXAiLCJpbXBvcnQgeyBtYXAgfSBmcm9tICcuL21hcCc7XG5pbXBvcnQgeyBpbm5lckZyb20gfSBmcm9tICcuLi9vYnNlcnZhYmxlL2lubmVyRnJvbSc7XG5pbXBvcnQgeyBvcGVyYXRlIH0gZnJvbSAnLi4vdXRpbC9saWZ0JztcbmltcG9ydCB7IG1lcmdlSW50ZXJuYWxzIH0gZnJvbSAnLi9tZXJnZUludGVybmFscyc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZU1hcChwcm9qZWN0LCByZXN1bHRTZWxlY3RvciwgY29uY3VycmVudCkge1xuICAgIGlmIChjb25jdXJyZW50ID09PSB2b2lkIDApIHsgY29uY3VycmVudCA9IEluZmluaXR5OyB9XG4gICAgaWYgKGlzRnVuY3Rpb24ocmVzdWx0U2VsZWN0b3IpKSB7XG4gICAgICAgIHJldHVybiBtZXJnZU1hcChmdW5jdGlvbiAoYSwgaSkgeyByZXR1cm4gbWFwKGZ1bmN0aW9uIChiLCBpaSkgeyByZXR1cm4gcmVzdWx0U2VsZWN0b3IoYSwgYiwgaSwgaWkpOyB9KShpbm5lckZyb20ocHJvamVjdChhLCBpKSkpOyB9LCBjb25jdXJyZW50KTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIHJlc3VsdFNlbGVjdG9yID09PSAnbnVtYmVyJykge1xuICAgICAgICBjb25jdXJyZW50ID0gcmVzdWx0U2VsZWN0b3I7XG4gICAgfVxuICAgIHJldHVybiBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHsgcmV0dXJuIG1lcmdlSW50ZXJuYWxzKHNvdXJjZSwgc3Vic2NyaWJlciwgcHJvamVjdCwgY29uY3VycmVudCk7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWVyZ2VNYXAuanMubWFwIiwiaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuaW1wb3J0IHsgZXhlY3V0ZVNjaGVkdWxlIH0gZnJvbSAnLi4vdXRpbC9leGVjdXRlU2NoZWR1bGUnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlSW50ZXJuYWxzKHNvdXJjZSwgc3Vic2NyaWJlciwgcHJvamVjdCwgY29uY3VycmVudCwgb25CZWZvcmVOZXh0LCBleHBhbmQsIGlubmVyU3ViU2NoZWR1bGVyLCBhZGRpdGlvbmFsRmluYWxpemVyKSB7XG4gICAgdmFyIGJ1ZmZlciA9IFtdO1xuICAgIHZhciBhY3RpdmUgPSAwO1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIGlzQ29tcGxldGUgPSBmYWxzZTtcbiAgICB2YXIgY2hlY2tDb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKGlzQ29tcGxldGUgJiYgIWJ1ZmZlci5sZW5ndGggJiYgIWFjdGl2ZSkge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICB2YXIgb3V0ZXJOZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiAoYWN0aXZlIDwgY29uY3VycmVudCA/IGRvSW5uZXJTdWIodmFsdWUpIDogYnVmZmVyLnB1c2godmFsdWUpKTsgfTtcbiAgICB2YXIgZG9Jbm5lclN1YiA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICBleHBhbmQgJiYgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgYWN0aXZlKys7XG4gICAgICAgIHZhciBpbm5lckNvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIGlubmVyRnJvbShwcm9qZWN0KHZhbHVlLCBpbmRleCsrKSkuc3Vic2NyaWJlKGNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlcihzdWJzY3JpYmVyLCBmdW5jdGlvbiAoaW5uZXJWYWx1ZSkge1xuICAgICAgICAgICAgb25CZWZvcmVOZXh0ID09PSBudWxsIHx8IG9uQmVmb3JlTmV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogb25CZWZvcmVOZXh0KGlubmVyVmFsdWUpO1xuICAgICAgICAgICAgaWYgKGV4cGFuZCkge1xuICAgICAgICAgICAgICAgIG91dGVyTmV4dChpbm5lclZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChpbm5lclZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaW5uZXJDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgIH0sIHVuZGVmaW5lZCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlubmVyQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBhY3RpdmUtLTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9sb29wXzEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyZWRWYWx1ZSA9IGJ1ZmZlci5zaGlmdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlubmVyU3ViU2NoZWR1bGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhlY3V0ZVNjaGVkdWxlKHN1YnNjcmliZXIsIGlubmVyU3ViU2NoZWR1bGVyLCBmdW5jdGlvbiAoKSB7IHJldHVybiBkb0lubmVyU3ViKGJ1ZmZlcmVkVmFsdWUpOyB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvSW5uZXJTdWIoYnVmZmVyZWRWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChidWZmZXIubGVuZ3RoICYmIGFjdGl2ZSA8IGNvbmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9sb29wXzEoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjaGVja0NvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH07XG4gICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgb3V0ZXJOZXh0LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlzQ29tcGxldGUgPSB0cnVlO1xuICAgICAgICBjaGVja0NvbXBsZXRlKCk7XG4gICAgfSkpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGFkZGl0aW9uYWxGaW5hbGl6ZXIgPT09IG51bGwgfHwgYWRkaXRpb25hbEZpbmFsaXplciA9PT0gdm9pZCAwID8gdm9pZCAwIDogYWRkaXRpb25hbEZpbmFsaXplcigpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tZXJnZUludGVybmFscy5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkQXJyYXkgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IG1hcCB9IGZyb20gXCIuLi9vcGVyYXRvcnMvbWFwXCI7XG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBjYWxsT3JBcHBseShmbiwgYXJncykge1xuICAgIHJldHVybiBpc0FycmF5KGFyZ3MpID8gZm4uYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoYXJncykpKSA6IGZuKGFyZ3MpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1hcE9uZU9yTWFueUFyZ3MoZm4pIHtcbiAgICByZXR1cm4gbWFwKGZ1bmN0aW9uIChhcmdzKSB7IHJldHVybiBjYWxsT3JBcHBseShmbiwgYXJncyk7IH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFwT25lT3JNYW55QXJncy5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGlubmVyRnJvbSB9IGZyb20gJy4uL29ic2VydmFibGUvaW5uZXJGcm9tJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IG1lcmdlTWFwIH0gZnJvbSAnLi4vb3BlcmF0b3JzL21lcmdlTWFwJztcbmltcG9ydCB7IGlzQXJyYXlMaWtlIH0gZnJvbSAnLi4vdXRpbC9pc0FycmF5TGlrZSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IG1hcE9uZU9yTWFueUFyZ3MgfSBmcm9tICcuLi91dGlsL21hcE9uZU9yTWFueUFyZ3MnO1xudmFyIG5vZGVFdmVudEVtaXR0ZXJNZXRob2RzID0gWydhZGRMaXN0ZW5lcicsICdyZW1vdmVMaXN0ZW5lciddO1xudmFyIGV2ZW50VGFyZ2V0TWV0aG9kcyA9IFsnYWRkRXZlbnRMaXN0ZW5lcicsICdyZW1vdmVFdmVudExpc3RlbmVyJ107XG52YXIganF1ZXJ5TWV0aG9kcyA9IFsnb24nLCAnb2ZmJ107XG5leHBvcnQgZnVuY3Rpb24gZnJvbUV2ZW50KHRhcmdldCwgZXZlbnROYW1lLCBvcHRpb25zLCByZXN1bHRTZWxlY3Rvcikge1xuICAgIGlmIChpc0Z1bmN0aW9uKG9wdGlvbnMpKSB7XG4gICAgICAgIHJlc3VsdFNlbGVjdG9yID0gb3B0aW9ucztcbiAgICAgICAgb3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHJlc3VsdFNlbGVjdG9yKSB7XG4gICAgICAgIHJldHVybiBmcm9tRXZlbnQodGFyZ2V0LCBldmVudE5hbWUsIG9wdGlvbnMpLnBpcGUobWFwT25lT3JNYW55QXJncyhyZXN1bHRTZWxlY3RvcikpO1xuICAgIH1cbiAgICB2YXIgX2EgPSBfX3JlYWQoaXNFdmVudFRhcmdldCh0YXJnZXQpXG4gICAgICAgID8gZXZlbnRUYXJnZXRNZXRob2RzLm1hcChmdW5jdGlvbiAobWV0aG9kTmFtZSkgeyByZXR1cm4gZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIHRhcmdldFttZXRob2ROYW1lXShldmVudE5hbWUsIGhhbmRsZXIsIG9wdGlvbnMpOyB9OyB9KVxuICAgICAgICA6XG4gICAgICAgICAgICBpc05vZGVTdHlsZUV2ZW50RW1pdHRlcih0YXJnZXQpXG4gICAgICAgICAgICAgICAgPyBub2RlRXZlbnRFbWl0dGVyTWV0aG9kcy5tYXAodG9Db21tb25IYW5kbGVyUmVnaXN0cnkodGFyZ2V0LCBldmVudE5hbWUpKVxuICAgICAgICAgICAgICAgIDogaXNKUXVlcnlTdHlsZUV2ZW50RW1pdHRlcih0YXJnZXQpXG4gICAgICAgICAgICAgICAgICAgID8ganF1ZXJ5TWV0aG9kcy5tYXAodG9Db21tb25IYW5kbGVyUmVnaXN0cnkodGFyZ2V0LCBldmVudE5hbWUpKVxuICAgICAgICAgICAgICAgICAgICA6IFtdLCAyKSwgYWRkID0gX2FbMF0sIHJlbW92ZSA9IF9hWzFdO1xuICAgIGlmICghYWRkKSB7XG4gICAgICAgIGlmIChpc0FycmF5TGlrZSh0YXJnZXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gbWVyZ2VNYXAoZnVuY3Rpb24gKHN1YlRhcmdldCkgeyByZXR1cm4gZnJvbUV2ZW50KHN1YlRhcmdldCwgZXZlbnROYW1lLCBvcHRpb25zKTsgfSkoaW5uZXJGcm9tKHRhcmdldCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICghYWRkKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgZXZlbnQgdGFyZ2V0Jyk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIGFyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzdWJzY3JpYmVyLm5leHQoMSA8IGFyZ3MubGVuZ3RoID8gYXJncyA6IGFyZ3NbMF0pO1xuICAgICAgICB9O1xuICAgICAgICBhZGQoaGFuZGxlcik7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiByZW1vdmUoaGFuZGxlcik7IH07XG4gICAgfSk7XG59XG5mdW5jdGlvbiB0b0NvbW1vbkhhbmRsZXJSZWdpc3RyeSh0YXJnZXQsIGV2ZW50TmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAobWV0aG9kTmFtZSkgeyByZXR1cm4gZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIHRhcmdldFttZXRob2ROYW1lXShldmVudE5hbWUsIGhhbmRsZXIpOyB9OyB9O1xufVxuZnVuY3Rpb24gaXNOb2RlU3R5bGVFdmVudEVtaXR0ZXIodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odGFyZ2V0LmFkZExpc3RlbmVyKSAmJiBpc0Z1bmN0aW9uKHRhcmdldC5yZW1vdmVMaXN0ZW5lcik7XG59XG5mdW5jdGlvbiBpc0pRdWVyeVN0eWxlRXZlbnRFbWl0dGVyKHRhcmdldCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHRhcmdldC5vbikgJiYgaXNGdW5jdGlvbih0YXJnZXQub2ZmKTtcbn1cbmZ1bmN0aW9uIGlzRXZlbnRUYXJnZXQodGFyZ2V0KSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24odGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIpICYmIGlzRnVuY3Rpb24odGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZnJvbUV2ZW50LmpzLm1hcCIsImVudW0gQ29sb3Ige1xyXG4gICAgV0hJVEUgPSBcIndoaXRlXCIsXHJcbiAgICBCTEFDSyA9IFwiYmxhY2tcIlxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb2xvciAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgY3JlYXRlT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi91dGlsL2lkZW50aXR5JztcbmV4cG9ydCBmdW5jdGlvbiB0YXAob2JzZXJ2ZXJPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgIHZhciB0YXBPYnNlcnZlciA9IGlzRnVuY3Rpb24ob2JzZXJ2ZXJPck5leHQpIHx8IGVycm9yIHx8IGNvbXBsZXRlXG4gICAgICAgID9cbiAgICAgICAgICAgIHsgbmV4dDogb2JzZXJ2ZXJPck5leHQsIGVycm9yOiBlcnJvciwgY29tcGxldGU6IGNvbXBsZXRlIH1cbiAgICAgICAgOiBvYnNlcnZlck9yTmV4dDtcbiAgICByZXR1cm4gdGFwT2JzZXJ2ZXJcbiAgICAgICAgPyBvcGVyYXRlKGZ1bmN0aW9uIChzb3VyY2UsIHN1YnNjcmliZXIpIHtcbiAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgIChfYSA9IHRhcE9ic2VydmVyLnN1YnNjcmliZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGFwT2JzZXJ2ZXIpO1xuICAgICAgICAgICAgdmFyIGlzVW5zdWIgPSB0cnVlO1xuICAgICAgICAgICAgc291cmNlLnN1YnNjcmliZShjcmVhdGVPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgIChfYSA9IHRhcE9ic2VydmVyLm5leHQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRhcE9ic2VydmVyLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAgICAgaXNVbnN1YiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIChfYSA9IHRhcE9ic2VydmVyLmNvbXBsZXRlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0YXBPYnNlcnZlcik7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIHZhciBfYTtcbiAgICAgICAgICAgICAgICBpc1Vuc3ViID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgKF9hID0gdGFwT2JzZXJ2ZXIuZXJyb3IpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRhcE9ic2VydmVyLCBlcnIpO1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAgICAgICAgIGlmIChpc1Vuc3ViKSB7XG4gICAgICAgICAgICAgICAgICAgIChfYSA9IHRhcE9ic2VydmVyLnVuc3Vic2NyaWJlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuY2FsbCh0YXBPYnNlcnZlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIChfYiA9IHRhcE9ic2VydmVyLmZpbmFsaXplKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbCh0YXBPYnNlcnZlcik7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH0pXG4gICAgICAgIDpcbiAgICAgICAgICAgIGlkZW50aXR5O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGFwLmpzLm1hcCIsImltcG9ydCB7IENvbG9yLCBQaWVjZVR5cGUgfSBmcm9tIFwiLi9lbnVtc1wiXHJcbmltcG9ydCB7IERyaWVjdGlvbnMgfSBmcm9tIFwiLi90eXBlc1wiXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQaWVjZSB7XHJcbiAgICBjb2xvcjogQ29sb3JcclxuICAgIHg6IG51bWJlclxyXG4gICAgeTogbnVtYmVyXHJcbiAgICBkaXJlY3Rpb25zOiBEcmllY3Rpb25zXHJcbiAgICBpbWFnZVVSTDogc3RyaW5nXHJcblxyXG4gICAgY29uc3RydWN0b3IoY29sb3I6IENvbG9yLCB4OiBudW1iZXIsIHk6IG51bWJlciwgcGllY2VUeXBlOiBQaWVjZVR5cGUpIHtcclxuICAgICAgICB0aGlzLmNvbG9yID0gY29sb3JcclxuICAgICAgICB0aGlzLnggPSB4XHJcbiAgICAgICAgdGhpcy55ID0geVxyXG4gICAgICAgIHRoaXMuaW1hZ2VVUkwgPSBgc3JjL2Fzc2V0cy8ke2NvbG9yfSAke3BpZWNlVHlwZX0ucG5nYFxyXG4gICAgfVxyXG5cclxuICAgIHNldERpcmVjdGlvbnMoZGlyZWN0aW9uczogRHJpZWN0aW9ucyk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuZGlyZWN0aW9ucyA9IGRpcmVjdGlvbnNcclxuICAgIH1cclxufSIsImVudW0gUGllY2VUeXBlIHtcclxuICAgIFBBV04gPSBcInBhd25cIixcclxuICAgIEtOSUdIVCA9IFwia25pZ2h0XCIsXHJcbiAgICBCSVNIT1AgPSBcImJpc2hvcFwiLFxyXG4gICAgUk9PSyA9IFwicm9va1wiLFxyXG4gICAgUVVFRU4gPSBcInF1ZWVuXCIsXHJcbiAgICBLSU5HID0gXCJraW5nXCJcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUGllY2VUeXBlICAgICIsImltcG9ydCBQaWVjZSBmcm9tIFwiLi9QaWVjZVwiO1xyXG5pbXBvcnQgeyBDb2xvciwgUGllY2VUeXBlIH0gZnJvbSBcIi4vZW51bXNcIjtcclxuaW1wb3J0IHsgRHJpZWN0aW9ucyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXduIGV4dGVuZHMgUGllY2Uge1xyXG4gICAgI3Bhd25EaXJlY3Rpb25zOiBEcmllY3Rpb25zID0gW1sxLCAwXSwgWzIsIDBdLCBbMSwgMV0sIFsxLCAtMV1dXHJcbiAgICAjaGFzTW92ZWQ6IGJvb2xlYW4gPSBmYWxzZVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNvbG9yOiBDb2xvciwgeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICBzdXBlcihjb2xvciwgeCwgeSwgUGllY2VUeXBlLlBBV04pXHJcbiAgICAgICAgaWYgKGNvbG9yID09PSBDb2xvci5CTEFDSykge1xyXG4gICAgICAgICAgICB0aGlzLiNwYXduRGlyZWN0aW9ucyA9IHRoaXMuI3Bhd25EaXJlY3Rpb25zLm1hcChkaXJlY3Rpb24gPT4gWy0xICogZGlyZWN0aW9uWzBdLCBkaXJlY3Rpb25bMV1dKVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldERpcmVjdGlvbnModGhpcy4jcGF3bkRpcmVjdGlvbnMpXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGhhc01vdmVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNoYXNNb3ZlZFxyXG4gICAgfVxyXG5cclxuICAgIHNldCBoYXNNb3ZlZChfKSB7XHJcbiAgICAgICAgdGhpcy4jaGFzTW92ZWQgPSB0cnVlXHJcbiAgICAgICAgdGhpcy4jcGF3bkRpcmVjdGlvbnMgPSBbWzEsIDBdLCBbMSwgMV0sIFsxLCAtMV1dXHJcbiAgICAgICAgaWYgKHRoaXMuY29sb3IgPT09IENvbG9yLkJMQUNLKSB7XHJcbiAgICAgICAgICAgIHRoaXMuI3Bhd25EaXJlY3Rpb25zID0gdGhpcy5ibGFja1Bhd25EaXJlY3Rpb25zKHRoaXMuI3Bhd25EaXJlY3Rpb25zKVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldERpcmVjdGlvbnModGhpcy4jcGF3bkRpcmVjdGlvbnMpXHJcbiAgICB9XHJcblxyXG4gICAgYmxhY2tQYXduRGlyZWN0aW9ucyhwYXduRGlyZWN0aW9uczogRHJpZWN0aW9ucyk6IERyaWVjdGlvbnMge1xyXG4gICAgICAgIHJldHVybiBwYXduRGlyZWN0aW9ucy5tYXAoZGlyZWN0aW9uID0+IFstMSAqIGRpcmVjdGlvblswXSwgZGlyZWN0aW9uWzFdXSlcclxuICAgIH1cclxufSIsImltcG9ydCBQaWVjZSBmcm9tIFwiLi9QaWVjZVwiO1xyXG5pbXBvcnQgeyBDb2xvciwgUGllY2VUeXBlIH0gZnJvbSBcIi4vZW51bXNcIjtcclxuaW1wb3J0IHsgRHJpZWN0aW9ucyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCaXNob3AgZXh0ZW5kcyBQaWVjZSB7XHJcbiAgICAjYmlzaG9wRGlyZWN0aW9uczogRHJpZWN0aW9ucyA9IFtbMSwgMV0sIFsxLCAtMV0sIFstMSwgMV0sIFstMSwgLTFdXVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNvbG9yOiBDb2xvciwgeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICBzdXBlcihjb2xvciwgeCwgeSwgUGllY2VUeXBlLkJJU0hPUClcclxuICAgICAgICB0aGlzLnNldERpcmVjdGlvbnModGhpcy4jYmlzaG9wRGlyZWN0aW9ucylcclxuICAgIH1cclxufSIsImltcG9ydCBQaWVjZSBmcm9tIFwiLi9QaWVjZVwiO1xyXG5pbXBvcnQgeyBDb2xvciwgUGllY2VUeXBlIH0gZnJvbSBcIi4vZW51bXNcIjtcclxuaW1wb3J0IHsgRHJpZWN0aW9ucyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBLbmlnaHQgZXh0ZW5kcyBQaWVjZSB7XHJcbiAgICAja25pZ2h0RGlyZWN0aW9uczogRHJpZWN0aW9ucyA9IFtbMSwgMl0sIFsxLCAtMl0sIFstMSwgMl0sIFstMSwgLTJdLCBbMiwgMV0sIFsyLCAtMV0sIFstMiwgMV0sIFstMiwgLTFdXVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNvbG9yOiBDb2xvciwgeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICBzdXBlcihjb2xvciwgeCwgeSwgUGllY2VUeXBlLktOSUdIVClcclxuICAgICAgICB0aGlzLnNldERpcmVjdGlvbnModGhpcy4ja25pZ2h0RGlyZWN0aW9ucylcclxuICAgIH1cclxufSIsImltcG9ydCBQaWVjZSBmcm9tIFwiLi9QaWVjZVwiO1xyXG5pbXBvcnQgeyBDb2xvciwgUGllY2VUeXBlIH0gZnJvbSBcIi4vZW51bXNcIjtcclxuaW1wb3J0IHsgRHJpZWN0aW9ucyB9IGZyb20gXCIuL3R5cGVzXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb29rIGV4dGVuZHMgUGllY2Uge1xyXG4gICAgI3Jvb2tEaXJlY3Rpb25zOiBEcmllY3Rpb25zID0gW1sxLCAwXSwgWy0xLCAtMF0sIFswLCAxXSwgWzAsIC0xXV1cclxuICAgICNoYXNNb3ZlZCA9IGZhbHNlXHJcblxyXG4gICAgY29uc3RydWN0b3IoY29sb3I6IENvbG9yLCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xyXG4gICAgICAgIHN1cGVyKGNvbG9yLCB4LCB5LCBQaWVjZVR5cGUuUk9PSylcclxuICAgICAgICB0aGlzLnNldERpcmVjdGlvbnModGhpcy4jcm9va0RpcmVjdGlvbnMpXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGhhc01vdmVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNoYXNNb3ZlZFxyXG4gICAgfVxyXG5cclxuICAgIHNldCBoYXNNb3ZlZChfKSB7XHJcbiAgICAgICAgdGhpcy4jaGFzTW92ZWQgPSB0cnVlXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUGllY2UgZnJvbSBcIi4vUGllY2VcIjtcclxuaW1wb3J0IHsgQ29sb3IsIFBpZWNlVHlwZSB9IGZyb20gXCIuL2VudW1zXCI7XHJcbmltcG9ydCB7IERyaWVjdGlvbnMgfSBmcm9tIFwiLi90eXBlc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUXVlZW4gZXh0ZW5kcyBQaWVjZSB7XHJcbiAgICAjcXVlZW5EaXJlY3Rpb25zOiBEcmllY3Rpb25zID0gW1swLCAxXSwgWzAsIC0xXSwgWzEsIDBdLCBbMSwgMV0sIFsxLCAtMV0sIFstMSwgMF0sIFstMSwgMV0sIFstMSwgLTFdXVxyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNvbG9yOiBDb2xvciwgeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICBzdXBlcihjb2xvciwgeCwgeSwgUGllY2VUeXBlLlFVRUVOKVxyXG4gICAgICAgIHRoaXMuc2V0RGlyZWN0aW9ucyh0aGlzLiNxdWVlbkRpcmVjdGlvbnMpXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUGllY2UgZnJvbSBcIi4vUGllY2VcIlxyXG5pbXBvcnQgeyBDb2xvciwgUGllY2VUeXBlIH0gZnJvbSBcIi4vZW51bXNcIlxyXG5pbXBvcnQgeyBEcmllY3Rpb25zIH0gZnJvbSBcIi4vdHlwZXNcIlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgS2luZyBleHRlbmRzIFBpZWNlIHtcclxuICAgICNraW5nRGlyZWN0aW9uczogRHJpZWN0aW9ucyA9IFtbMCwgMV0sIFswLCAtMV0sIFsxLCAwXSwgWzEsIDFdLCBbMSwgLTFdLCBbLTEsIDBdLCBbLTEsIDFdLCBbLTEsIC0xXV1cclxuICAgICNoYXNNb3ZlZCA9IGZhbHNlXHJcblxyXG4gICAgY29uc3RydWN0b3IoY29sb3I6IENvbG9yLCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xyXG4gICAgICAgIHN1cGVyKGNvbG9yLCB4LCB5LCBQaWVjZVR5cGUuS0lORylcclxuICAgICAgICB0aGlzLnNldERpcmVjdGlvbnModGhpcy4ja2luZ0RpcmVjdGlvbnMpXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0IGhhc01vdmVkKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLiNoYXNNb3ZlZFxyXG4gICAgfVxyXG5cclxuICAgIHNldCBoYXNNb3ZlZChfKSB7XHJcbiAgICAgICAgdGhpcy4jaGFzTW92ZWQgPSB0cnVlXHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBjcmVhdGVFcnJvckNsYXNzIH0gZnJvbSAnLi9jcmVhdGVFcnJvckNsYXNzJztcbmV4cG9ydCB2YXIgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgPSBjcmVhdGVFcnJvckNsYXNzKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3JJbXBsKCkge1xuICAgICAgICBfc3VwZXIodGhpcyk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdPYmplY3RVbnN1YnNjcmliZWRFcnJvcic7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9ICdvYmplY3QgdW5zdWJzY3JpYmVkJztcbiAgICB9O1xufSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYmplY3RVbnN1YnNjcmliZWRFcnJvci5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMsIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAnLi9PYnNlcnZhYmxlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiwgRU1QVFlfU1VCU0NSSVBUSU9OIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IgfSBmcm9tICcuL3V0aWwvT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3InO1xuaW1wb3J0IHsgYXJyUmVtb3ZlIH0gZnJvbSAnLi91dGlsL2FyclJlbW92ZSc7XG5pbXBvcnQgeyBlcnJvckNvbnRleHQgfSBmcm9tICcuL3V0aWwvZXJyb3JDb250ZXh0JztcbnZhciBTdWJqZWN0ID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoU3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTdWJqZWN0KCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuY3VycmVudE9ic2VydmVycyA9IG51bGw7XG4gICAgICAgIF90aGlzLm9ic2VydmVycyA9IFtdO1xuICAgICAgICBfdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaGFzRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMudGhyb3duRXJyb3IgPSBudWxsO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YmplY3QucHJvdG90eXBlLmxpZnQgPSBmdW5jdGlvbiAob3BlcmF0b3IpIHtcbiAgICAgICAgdmFyIHN1YmplY3QgPSBuZXcgQW5vbnltb3VzU3ViamVjdCh0aGlzLCB0aGlzKTtcbiAgICAgICAgc3ViamVjdC5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICByZXR1cm4gc3ViamVjdDtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLl90aHJvd0lmQ2xvc2VkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBPYmplY3RVbnN1YnNjcmliZWRFcnJvcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGVycm9yQ29udGV4dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgICAgIF90aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIGlmICghX3RoaXMuY3VycmVudE9ic2VydmVycykge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jdXJyZW50T2JzZXJ2ZXJzID0gQXJyYXkuZnJvbShfdGhpcy5vYnNlcnZlcnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKF90aGlzLmN1cnJlbnRPYnNlcnZlcnMpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBfYy52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgZXJyb3JDb250ZXh0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmhhc0Vycm9yID0gX3RoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfdGhpcy50aHJvd25FcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gX3RoaXMub2JzZXJ2ZXJzO1xuICAgICAgICAgICAgICAgIHdoaWxlIChvYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVycy5zaGlmdCgpLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBlcnJvckNvbnRleHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgICAgIGlmICghX3RoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXJzID0gX3RoaXMub2JzZXJ2ZXJzO1xuICAgICAgICAgICAgICAgIHdoaWxlIChvYnNlcnZlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmVycy5zaGlmdCgpLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5vYnNlcnZlcnMgPSB0aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBudWxsO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN1YmplY3QucHJvdG90eXBlLCBcIm9ic2VydmVkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICByZXR1cm4gKChfYSA9IHRoaXMub2JzZXJ2ZXJzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubGVuZ3RoKSA+IDA7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlLmNhbGwodGhpcywgc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICB0aGlzLl9jaGVja0ZpbmFsaXplZFN0YXR1c2VzKHN1YnNjcmliZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5faW5uZXJTdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5faW5uZXJTdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBoYXNFcnJvciA9IF9hLmhhc0Vycm9yLCBpc1N0b3BwZWQgPSBfYS5pc1N0b3BwZWQsIG9ic2VydmVycyA9IF9hLm9ic2VydmVycztcbiAgICAgICAgaWYgKGhhc0Vycm9yIHx8IGlzU3RvcHBlZCkge1xuICAgICAgICAgICAgcmV0dXJuIEVNUFRZX1NVQlNDUklQVElPTjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmN1cnJlbnRPYnNlcnZlcnMgPSBudWxsO1xuICAgICAgICBvYnNlcnZlcnMucHVzaChzdWJzY3JpYmVyKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTdWJzY3JpcHRpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuY3VycmVudE9ic2VydmVycyA9IG51bGw7XG4gICAgICAgICAgICBhcnJSZW1vdmUob2JzZXJ2ZXJzLCBzdWJzY3JpYmVyKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fY2hlY2tGaW5hbGl6ZWRTdGF0dXNlcyA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGhhc0Vycm9yID0gX2EuaGFzRXJyb3IsIHRocm93bkVycm9yID0gX2EudGhyb3duRXJyb3IsIGlzU3RvcHBlZCA9IF9hLmlzU3RvcHBlZDtcbiAgICAgICAgaWYgKGhhc0Vycm9yKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKHRocm93bkVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuYXNPYnNlcnZhYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGU7XG4gICAgfTtcbiAgICBTdWJqZWN0LmNyZWF0ZSA9IGZ1bmN0aW9uIChkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gICAgICAgIHJldHVybiBuZXcgQW5vbnltb3VzU3ViamVjdChkZXN0aW5hdGlvbiwgc291cmNlKTtcbiAgICB9O1xuICAgIHJldHVybiBTdWJqZWN0O1xufShPYnNlcnZhYmxlKSk7XG5leHBvcnQgeyBTdWJqZWN0IH07XG52YXIgQW5vbnltb3VzU3ViamVjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFub255bW91c1N1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQW5vbnltb3VzU3ViamVjdChkZXN0aW5hdGlvbiwgc291cmNlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0gZGVzdGluYXRpb247XG4gICAgICAgIF90aGlzLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuZGVzdGluYXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5uZXh0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSwgdmFsdWUpO1xuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuZGVzdGluYXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5lcnJvcikgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIGVycik7XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgKF9iID0gKF9hID0gdGhpcy5kZXN0aW5hdGlvbikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNvbXBsZXRlKSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IuY2FsbChfYSk7XG4gICAgfTtcbiAgICBBbm9ueW1vdXNTdWJqZWN0LnByb3RvdHlwZS5fc3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgcmV0dXJuIChfYiA9IChfYSA9IHRoaXMuc291cmNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3Vic2NyaWJlKHN1YnNjcmliZXIpKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBFTVBUWV9TVUJTQ1JJUFRJT047XG4gICAgfTtcbiAgICByZXR1cm4gQW5vbnltb3VzU3ViamVjdDtcbn0oU3ViamVjdCkpO1xuZXhwb3J0IHsgQW5vbnltb3VzU3ViamVjdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3ViamVjdC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuL1N1YmplY3QnO1xudmFyIEJlaGF2aW9yU3ViamVjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJlaGF2aW9yU3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCZWhhdmlvclN1YmplY3QoX3ZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl92YWx1ZSA9IF92YWx1ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZSwgXCJ2YWx1ZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBfc3VwZXIucHJvdG90eXBlLl9zdWJzY3JpYmUuY2FsbCh0aGlzLCBzdWJzY3JpYmVyKTtcbiAgICAgICAgIXN1YnNjcmlwdGlvbi5jbG9zZWQgJiYgc3Vic2NyaWJlci5uZXh0KHRoaXMuX3ZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGhhc0Vycm9yID0gX2EuaGFzRXJyb3IsIHRocm93bkVycm9yID0gX2EudGhyb3duRXJyb3IsIF92YWx1ZSA9IF9hLl92YWx1ZTtcbiAgICAgICAgaWYgKGhhc0Vycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyB0aHJvd25FcnJvcjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgIHJldHVybiBfdmFsdWU7XG4gICAgfTtcbiAgICBCZWhhdmlvclN1YmplY3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5uZXh0LmNhbGwodGhpcywgKHRoaXMuX3ZhbHVlID0gdmFsdWUpKTtcbiAgICB9O1xuICAgIHJldHVybiBCZWhhdmlvclN1YmplY3Q7XG59KFN1YmplY3QpKTtcbmV4cG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmVoYXZpb3JTdWJqZWN0LmpzLm1hcCIsImltcG9ydCB7IGZyb21FdmVudCwgdGFwIH0gZnJvbSBcInJ4anNcIjtcclxuaW1wb3J0IENoZXNzQm9hcmQgZnJvbSBcIi4vY29tcG9uZW50cy9DaGVzc2JvYXJkXCI7XHJcblxyXG5jb25zdCBjaGVzc0JvYXJkID0gbmV3IENoZXNzQm9hcmQoKVxyXG5cclxuZnJvbUV2ZW50KGRvY3VtZW50LCBcImNvbnRleHRtZW51XCIpLnBpcGUoXHJcbiAgICB0YXAoZXZlbnQgPT4gZXZlbnQucHJldmVudERlZmF1bHQoKSlcclxuKS5zdWJzY3JpYmUoKVxyXG5cclxuZnJvbUV2ZW50KGRvY3VtZW50LCBcImRyYWdzdGFydFwiKS5waXBlKFxyXG4gICAgdGFwKGV2ZW50ID0+IGV2ZW50LnByZXZlbnREZWZhdWx0KCkpXHJcbikuc3Vic2NyaWJlKCkiLCJpbXBvcnQgUGF3biBmcm9tICcuL1Bhd24nXHJcbmltcG9ydCBCaXNob3AgZnJvbSAnLi9CaXNob3AnXHJcbmltcG9ydCBLbmlnaHQgZnJvbSAnLi9LbmlnaHQnXHJcbmltcG9ydCBSb29rIGZyb20gJy4vUm9vaydcclxuaW1wb3J0IFF1ZWVuIGZyb20gJy4vUXVlZW4nXHJcbmltcG9ydCBLaW5nIGZyb20gJy4vS2luZydcclxuaW1wb3J0IFBpZWNlIGZyb20gJy4vUGllY2UnXHJcbmltcG9ydCB7IENvbG9yLCBQaWVjZVR5cGUgfSBmcm9tICcuL2VudW1zJ1xyXG5pbXBvcnQgeyBjaGVzc1BpZWNlLCBjaGVzc0JvYXJkLCBMaXN0T2ZBbGxBdmFpbGFibGVTcXVhcmVzIH0gZnJvbSAnLi90eXBlcydcclxuaW1wb3J0IHsgSVNxdWFyZSwgSUxhc3RNb3ZlLCBJUHJvbW90ZWRQaWVjZSB9IGZyb20gJy4vaW50ZXJmYWNlcydcclxuXHJcbmltcG9ydCB7IE9ic2VydmFibGUsIEJlaGF2aW9yU3ViamVjdCwgZnJvbSwgZnJvbUV2ZW50IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGZpbHRlciwgbWFwLCBtZXJnZU1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG4vLyBudWxsIG96bmFjYXZhIGRhIGplIHBvbGplIHRyZW51dG5vIHByYXpub1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2hlc3NCb2FyZCB7XHJcbiAgICAjYm9hcmRTdGF0ZSQ6IEJlaGF2aW9yU3ViamVjdDxjaGVzc0JvYXJkPlxyXG4gICAgI2JvYXJkUG9zaXRpb246IGNoZXNzQm9hcmRcclxuICAgICNib2FyZEVsZW1lbnRzOiBIVE1MVGFibGVDZWxsRWxlbWVudFtdW10gPSBBcnJheSg4KS5maWxsKDApLm1hcCgoKSA9PiBBcnJheSg4KS5maWxsKDApKVxyXG4gICAgI3ByZXZpb3VzU2VsZWN0ZWRTcXVhcmU6IElTcXVhcmUgfCBudWxsID0gbnVsbFxyXG4gICAgI2N1cnJlbnRTZWxlY3RlZFNxdWFyZTogSVNxdWFyZSB8IG51bGwgPSBudWxsXHJcbiAgICAjYXZhaWxhYmxlU3F1YXJlczogSFRNTFRhYmxlQ2VsbEVsZW1lbnRbXSA9IFtdXHJcbiAgICAjaXNXaGl0ZU1vdmUgPSB0cnVlXHJcbiAgICAjcGxheWVyQ29sb3IgPSBDb2xvci5XSElURVxyXG4gICAgI2xhc3RNb3ZlOiBJTGFzdE1vdmUgfCBudWxsID0gbnVsbFxyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHRoaXMuI2JvYXJkUG9zaXRpb24gPSBbXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgIG5ldyBSb29rKENvbG9yLldISVRFLCAwLCAwKSwgbmV3IEtuaWdodChDb2xvci5XSElURSwgMCwgMSksIG5ldyBCaXNob3AoQ29sb3IuV0hJVEUsIDAsIDIpLCBuZXcgUXVlZW4oQ29sb3IuV0hJVEUsIDAsIDMpLFxyXG4gICAgICAgICAgICAgICAgbmV3IEtpbmcoQ29sb3IuV0hJVEUsIDAsIDQpLCBuZXcgQmlzaG9wKENvbG9yLldISVRFLCAwLCA1KSwgbmV3IEtuaWdodChDb2xvci5XSElURSwgMCwgNiksIG5ldyBSb29rKENvbG9yLldISVRFLCAwLCA3KVxyXG4gICAgICAgICAgICBdLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICBuZXcgUGF3bihDb2xvci5XSElURSwgMSwgMCksIG5ldyBQYXduKENvbG9yLldISVRFLCAxLCAxKSwgbmV3IFBhd24oQ29sb3IuV0hJVEUsIDEsIDIpLCBuZXcgUGF3bihDb2xvci5XSElURSwgMSwgMyksXHJcbiAgICAgICAgICAgICAgICBuZXcgUGF3bihDb2xvci5XSElURSwgMSwgNCksIG5ldyBQYXduKENvbG9yLldISVRFLCAxLCA1KSwgbmV3IFBhd24oQ29sb3IuV0hJVEUsIDEsIDYpLCBuZXcgUGF3bihDb2xvci5XSElURSwgMSwgNylcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgW251bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGxdLFxyXG4gICAgICAgICAgICBbbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbCwgbnVsbF0sXHJcbiAgICAgICAgICAgIFtudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsLCBudWxsXSxcclxuICAgICAgICAgICAgW251bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGwsIG51bGxdLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICBuZXcgUGF3bihDb2xvci5CTEFDSywgNiwgMCksIG5ldyBQYXduKENvbG9yLkJMQUNLLCA2LCAxKSwgbmV3IFBhd24oQ29sb3IuQkxBQ0ssIDYsIDIpLCBuZXcgUGF3bihDb2xvci5CTEFDSywgNiwgMyksXHJcbiAgICAgICAgICAgICAgICBuZXcgUGF3bihDb2xvci5CTEFDSywgNiwgNCksIG5ldyBQYXduKENvbG9yLkJMQUNLLCA2LCA1KSwgbmV3IFBhd24oQ29sb3IuQkxBQ0ssIDYsIDYpLCBuZXcgUGF3bihDb2xvci5CTEFDSywgNiwgNylcclxuICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgICAgbmV3IFJvb2soQ29sb3IuQkxBQ0ssIDcsIDApLCBuZXcgS25pZ2h0KENvbG9yLkJMQUNLLCA3LCAxKSwgbmV3IEJpc2hvcChDb2xvci5CTEFDSywgNywgMiksIG5ldyBRdWVlbihDb2xvci5CTEFDSywgNywgMyksXHJcbiAgICAgICAgICAgICAgICBuZXcgS2luZyhDb2xvci5CTEFDSywgNywgNCksIG5ldyBCaXNob3AoQ29sb3IuQkxBQ0ssIDcsIDUpLCBuZXcgS25pZ2h0KENvbG9yLkJMQUNLLCA3LCA2KSwgbmV3IFJvb2soQ29sb3IuQkxBQ0ssIDcsIDcpXHJcbiAgICAgICAgICAgIF0sXHJcbiAgICAgICAgXVxyXG4gICAgICAgIHRoaXMuI2JvYXJkU3RhdGUkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxjaGVzc0JvYXJkPih0aGlzLiNib2FyZFBvc2l0aW9uKVxyXG4gICAgICAgIHRoaXMuY3JlYXRlQ2hlc3NCb2FyZCgpXHJcbiAgICAgICAgdGhpcy5zdGFydEdhbWUoKVxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZUNoZXNzQm9hcmQoKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgY2hlc3NUYWJsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0YWJsZVwiKSBhcyBIVE1MVGFibGVFbGVtZW50XHJcbiAgICAgICAgY2hlc3NUYWJsZS5jbGFzc0xpc3QuYWRkKFwiY2hlc3MtYm9hcmRcIilcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaTogbnVtYmVyID0gNzsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgY29uc3Qgcm93ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRyXCIpIGFzIEhUTUxUYWJsZVJvd0VsZW1lbnRcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IGo6IG51bWJlciA9IDA7IGogPCA4OyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHNxdWFyZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0aFwiKSBhcyBIVE1MVGFibGVDZWxsRWxlbWVudFxyXG4gICAgICAgICAgICAgICAgc3F1YXJlLmNsYXNzTGlzdC5hZGQoIShpICUgMikgJiYgIShqICUgMikgfHwgaSAlIDIgJiYgaiAlIDIgPyBcImxpZ2h0XCIgOiBcImRhcmtcIilcclxuICAgICAgICAgICAgICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoXCJ4XCIsIGkudG9TdHJpbmcoKSlcclxuICAgICAgICAgICAgICAgIHNxdWFyZS5zZXRBdHRyaWJ1dGUoXCJ5XCIsIGoudG9TdHJpbmcoKSlcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50UGllY2U6IGNoZXNzUGllY2UgPSB0aGlzLiNib2FyZFBvc2l0aW9uW2ldW2pdXHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudFBpZWNlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGllY2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpIGFzIEhUTUxJbWFnZUVsZW1lbnRcclxuICAgICAgICAgICAgICAgICAgICBwaWVjZS5zcmMgPSBjdXJyZW50UGllY2UuaW1hZ2VVUkxcclxuICAgICAgICAgICAgICAgICAgICBwaWVjZS5hbHQgPSBjdXJyZW50UGllY2UuY29sb3IgKyBcIiBcIiArIGN1cnJlbnRQaWVjZS5jb25zdHJ1Y3Rvci5uYW1lLnRvTG93ZXJDYXNlKClcclxuICAgICAgICAgICAgICAgICAgICBzcXVhcmUuYXBwZW5kQ2hpbGQocGllY2UpXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcm93LmFwcGVuZENoaWxkKHNxdWFyZSlcclxuICAgICAgICAgICAgICAgIHRoaXMuI2JvYXJkRWxlbWVudHNbaV1bal0gPSBzcXVhcmVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjaGVzc1RhYmxlLmFwcGVuZENoaWxkKHJvdylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHdob0lzUGxheWluZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMlwiKSBhcyBIVE1MSGVhZGluZ0VsZW1lbnRcclxuICAgICAgICB3aG9Jc1BsYXlpbmcuaW5uZXJUZXh0ID0gXCJXaGl0ZSdzIG1vdmVcIlxyXG4gICAgICAgIHdob0lzUGxheWluZy5jbGFzc0xpc3QuYWRkKFwid2hvSXNQbGF5aW5nXCIpXHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZCh3aG9Jc1BsYXlpbmcpXHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjaGVzc1RhYmxlKVxyXG4gICAgfVxyXG5cclxuICAgIGlzU3F1YXJlVmFsaWQoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4geCA+PSAwICYmIHkgPj0gMCAmJiB4IDwgOCAmJiB5IDwgOFxyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZVBsYXllcigpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLiNib2FyZEVsZW1lbnRzLmZvckVhY2gocm93ID0+IHtcclxuICAgICAgICAgICAgcm93LmZvckVhY2goKHNxdWFyZTogSFRNTFRhYmxlQ2VsbEVsZW1lbnQpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBvdm8gem5hY2kgZGEgc2UgbmEgdHJlbnV0bm9tIHBvbGp1IG5hbGF6aSBmaWd1cmEgaSBvbmEgcHJlZHN0YXN0YXZsamEgY2hpbGROb2RlIGtvamkgamUgc2xpa2FcclxuICAgICAgICAgICAgICAgIGlmIChzcXVhcmUuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyB1a29saWtvIGplIGJvamEgZmlndXJlIGlzdGEga2FvIGJvamEgcHJvdGl2bmlja29nIGlncmFjYSwgb25kYSB1a2xhbmphbW8gcG9pbnRlcmUgaSBtb2d1Y25vc3QgZGEgYnVkZSBrbGlrbnV0YVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wcG9zaXRlUGxheWVyQ29sb3I6IENvbG9yID0gdGhpcy4jaXNXaGl0ZU1vdmUgPyBDb2xvci5CTEFDSyA6IENvbG9yLldISVRFXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGllY2VDb2xvclNhbWVBc09wcG9zaXRlUGxheWVyOiBib29sZWFuID0gKHNxdWFyZS5jaGlsZE5vZGVzWzBdIGFzIEhUTUxJbWFnZUVsZW1lbnQpLnNyY1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAuaW5jbHVkZXMob3Bwb3NpdGVQbGF5ZXJDb2xvcilcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3F1YXJlLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBwaWVjZUNvbG9yU2FtZUFzT3Bwb3NpdGVQbGF5ZXIgPyBcIm5vbmVcIiA6IFwiYXV0b1wiXHJcbiAgICAgICAgICAgICAgICAgICAgc3F1YXJlLnN0eWxlLmN1cnNvciA9IHBpZWNlQ29sb3JTYW1lQXNPcHBvc2l0ZVBsYXllciA/IFwiYXJyb3dcIiA6IFwicG9pbnRlclwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuICAgIH1cclxuXHJcbiAgICByZW1vdmVDdXJzb3JzRnJvbVVuYXZhaWxhYmxlU3F1YXJlcygpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLiNhdmFpbGFibGVTcXVhcmVzLmZvckVhY2goc3F1YXJlID0+IHtcclxuICAgICAgICAgICAgc3F1YXJlLnN0eWxlLmN1cnNvciA9IFwiYXJyb3dcIlxyXG4gICAgICAgICAgICBzcXVhcmUuc3R5bGUucG9pbnRlckV2ZW50cyA9IFwibm9uZVwiXHJcbiAgICAgICAgICAgIHNxdWFyZS5zdHlsZS5vdXRsaW5lID0gXCJcIlxyXG4gICAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgc3RhcnRHYW1lKCkge1xyXG4gICAgICAgIGxldCBsaXN0T2ZBbGxBdmFpbGFibGVTcXVhcmVzOiBMaXN0T2ZBbGxBdmFpbGFibGVTcXVhcmVzXHJcbiAgICAgICAgdGhpcy5jaGFuZ2VQbGF5ZXIoKVxyXG4gICAgICAgIHRoaXMuI2JvYXJkRWxlbWVudHMuZm9yRWFjaChyb3cgPT4ge1xyXG4gICAgICAgICAgICByb3cuZm9yRWFjaChzcXVhcmUgPT4ge1xyXG4gICAgICAgICAgICAgICAgZnJvbUV2ZW50KHNxdWFyZSwgXCJjbGlja1wiKS5waXBlKFxyXG4gICAgICAgICAgICAgICAgICAgIHRhcCgoKSA9PiBtb3ZlKHNxdWFyZSkpXHJcbiAgICAgICAgICAgICAgICApLnN1YnNjcmliZSgpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgY29uc3QgbW92ZSA9IChzcXVhcmU6IEhUTUxUYWJsZUNlbGxFbGVtZW50KTogdm9pZCA9PiB7XHJcbiAgICAgICAgICAgIC8vIGtvb3JkaW5hdGUgdHJlbnV0bm8ga2xpa251dGUgZmlndXJlXHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRYOiBudW1iZXIgPSBOdW1iZXIoc3F1YXJlLmdldEF0dHJpYnV0ZShcInhcIikpXHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRZOiBudW1iZXIgPSBOdW1iZXIoc3F1YXJlLmdldEF0dHJpYnV0ZShcInlcIikpXHJcbiAgICAgICAgICAgIC8vIHVrYXp1amUgYm9qdSB0cmVudXRub2cgaWdyYWNhIGRhIGJpIHN0YXZpbGkgZGEgc3UgZG92b2xqZW5hIHBvbGphXHJcbiAgICAgICAgICAgIHRoaXMuI3BsYXllckNvbG9yID0gdGhpcy4jaXNXaGl0ZU1vdmUgPyBDb2xvci5XSElURSA6IENvbG9yLkJMQUNLXHJcblxyXG5cclxuICAgICAgICAgICAgLy8vIG1vcmFtIGRhIG5hZGplbSBpc3ByYXZhbiBtZXRvZCBrYWtvIGRhIG92dSBmdW5rY2lqdSB6b3ZlbSBzYW1vIGplZG5vbSwgXHJcbiAgICAgICAgICAgIC8vIGEgbmUgc3Zha2kgY2FzLCBjYWsgaSBvdmRlIHBhIG1pIGplIHpvdmUgdmlzZSBwdXRhIG5lZ28gc3RvIHRyZWJhXHJcbiAgICAgICAgICAgIGlmICh0aGlzLiNjdXJyZW50U2VsZWN0ZWRTcXVhcmU/LnNxdWFyZS5jaGlsZE5vZGVzWzBdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwib3ZvIHNlIGl6dnJzYXZhXCIpXHJcbiAgICAgICAgICAgICAgICBsaXN0T2ZBbGxBdmFpbGFibGVTcXVhcmVzID0gdGhpcy5maW5kQXZhaWxhYmxlU3F1YXJlcyh0aGlzLiNwbGF5ZXJDb2xvcilcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gem5hY2kgZGEgc21vIGtsaWtudWxpIG5hIGZpZ3VydVxyXG4gICAgICAgICAgICAvLyBvdm8gem5hY2kgZGEgc21vIHBydmkgcHV0IGtsaWtudWxpIG5hIGZpZ3VydSBzdm9qZSBib2plLCBpIHRha28gb3B0aW1penVqZW1vXHJcbiAgICAgICAgICAgIGlmIChzcXVhcmUuY2hpbGROb2Rlcy5sZW5ndGggPT09IDEgJiZcclxuICAgICAgICAgICAgICAgIChzcXVhcmUuY2hpbGROb2Rlc1swXSBhcyBIVE1MSW1hZ2VFbGVtZW50KS5zcmMuaW5jbHVkZXModGhpcy4jcGxheWVyQ29sb3IpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiNwcmV2aW91c1NlbGVjdGVkU3F1YXJlID0gdGhpcy4jY3VycmVudFNlbGVjdGVkU3F1YXJlICE9PSBudWxsID8geyAuLi50aGlzLiNjdXJyZW50U2VsZWN0ZWRTcXVhcmUgfSA6IG51bGxcclxuICAgICAgICAgICAgICAgIHRoaXMuI2N1cnJlbnRTZWxlY3RlZFNxdWFyZSA9IHsgc3F1YXJlLCB4OiBjdXJyZW50WCwgeTogY3VycmVudFkgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy4jY3VycmVudFNlbGVjdGVkU3F1YXJlLnNxdWFyZS5zdHlsZS5vdXRsaW5lID0gXCI1cHggc29saWQgcmVkXCJcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBvdmRlIHZyaXNtbyBwb25pc3RhdmFuamUgcHJldGhvZG5vIHNlbGVrdG92YW5vZyBlbGVtZW50YSBpIG5qZWdvdmloIG1vZ3VjaWggcG9samFcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLiNwcmV2aW91c1NlbGVjdGVkU3F1YXJlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jcHJldmlvdXNTZWxlY3RlZFNxdWFyZS5zcXVhcmUuc3R5bGUub3V0bGluZSA9IFwiXCJcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUN1cnNvcnNGcm9tVW5hdmFpbGFibGVTcXVhcmVzKClcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiNhdmFpbGFibGVTcXVhcmVzID0gW11cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvLyBha28gc21vIGtsaWtudWxpIG5hIGlzdGkgZmlndXJ1IGRhIHBvbmlzdGltbyBuamVubyBzZWxla3RvdmFuamVcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLiNwcmV2aW91c1NlbGVjdGVkU3F1YXJlPy5zcXVhcmUgPT09IHRoaXMuI2N1cnJlbnRTZWxlY3RlZFNxdWFyZT8uc3F1YXJlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jY3VycmVudFNlbGVjdGVkU3F1YXJlLnNxdWFyZS5zdHlsZS5vdXRsaW5lID0gXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI2N1cnJlbnRTZWxlY3RlZFNxdWFyZSA9IHRoaXMuI3ByZXZpb3VzU2VsZWN0ZWRTcXVhcmUgPSBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVDdXJzb3JzRnJvbVVuYXZhaWxhYmxlU3F1YXJlcygpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jYXZhaWxhYmxlU3F1YXJlcyA9IFtdXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gb3ZkZSBzZSB2ZWMgcHJpa2F6dWplIHNwaXNhayBvcGNpamEga29qZSBpbWFtbyB1IHNtaXNsdSBtb2d1Y2loIG5hcmVkbmloIHBvdGV6YVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHJhem1pc2xpIGRhIG92dSBsaW5panUgcHJlYmFjaW0gZ29yZSwgZGEgbmUgYmloIHV2ZWsgcG96aXZhbyBpc3R1IGZ1bmtjaWp1XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gdmVjIGRhIHNlIG9uYSBwb3pvdmUgc2FtbyBqZWRub20gZGEgcG9jZXRrdSBzdmFrb2cgcG90ZXphXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuI2F2YWlsYWJsZVNxdWFyZXMgPSBsaXN0T2ZBbGxBdmFpbGFibGVTcXVhcmVzW2N1cnJlbnRYICsgXCIsXCIgKyBjdXJyZW50WV0gfHwgW11cclxuICAgICAgICAgICAgICAgICAgICBsZXQgY3VycmVudFBpZWNlOiBjaGVzc1BpZWNlID0gdGhpcy4jYm9hcmRQb3NpdGlvbltjdXJyZW50WF1bY3VycmVudFldXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHVwcmF2byBuYW0gb3ZhIGJvamEgaWdyYWNhIHNsdXppIGRhIHV0dnJkaW1vIGplbCBuYXN0dXBpbyBvdGtpcnZlbmkgc2FoXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3Bwb3NpdGVDb2xvckNoZWNrID0gdGhpcy4jcGxheWVyQ29sb3IgPT09IENvbG9yLldISVRFID8gQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyB2cnNpbW8gcHJvdmVydSBkYSBsaSBtb3plIGRhIHNlIG9kaWdyYSBlbiBQYXNzYW50XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNsYXN0TW92ZSAhPT0gbnVsbCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLiNsYXN0TW92ZSkubGVuZ3RoID4gMCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGllY2UgaW5zdGFuY2VvZiBQYXduICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI2xhc3RNb3ZlLnBpZWNlIGluc3RhbmNlb2YgUGF3biAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNsYXN0TW92ZS54UG9zaXRpb25DaGFuZ2VkID09PSAyICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRQaWVjZS54ID09PSB0aGlzLiNsYXN0TW92ZS5waWVjZS54ICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hdGguYWJzKGN1cnJlbnRZIC0gdGhpcy4jbGFzdE1vdmUucGllY2UueSkgPT09IDEpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9wcG9zaXRlQ29sb3JQYXduUG9zWDogbnVtYmVyID0gdGhpcy4jbGFzdE1vdmUucGllY2UueFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHBvc2l0ZUNvbG9yUGF3blBvc1k6IG51bWJlciA9IHRoaXMuI2xhc3RNb3ZlLnBpZWNlLnlcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5QYXNzYW50WFBvczogbnVtYmVyID0gY3VycmVudFggKyAodGhpcy4jcGxheWVyQ29sb3IgPT09IFwid2hpdGVcIiA/IDEgOiAtMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5QYXNzYW50WVBvczogbnVtYmVyID0gb3Bwb3NpdGVDb2xvclBhd25Qb3NZXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhd25PZkN1cnJlbnRQbGF5ZXI6IFBhd24gPSBjdXJyZW50UGllY2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF3bk9mTmV4dFBsYXllcjogUGF3biA9IHRoaXMuI2xhc3RNb3ZlLnBpZWNlXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB2cnNpbW8gc2ltdWxhY2lqdSBwb3ppY2lqZSB1a29saWtvIHVzbGVkaSBlblBhc3NhbnQsIGRhIHZpZGltbyBkYSBsaSBvbmRhIGlncmFjIG9zdGF2bGphIHBvemljaWp1XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRha3ZhIGRhIGplIG9uIHUgc2FodVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGllY2UgPSBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI2JvYXJkUG9zaXRpb25bb3Bwb3NpdGVDb2xvclBhd25Qb3NYXVtvcHBvc2l0ZUNvbG9yUGF3blBvc1ldID0gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNib2FyZFBvc2l0aW9uW2VuUGFzc2FudFhQb3NdW2VuUGFzc2FudFlQb3NdID0gcGF3bk9mQ3VycmVudFBsYXllclxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNDaGVjayA9IHRoaXMuaXNDaGVjayh0cnVlLCBvcHBvc2l0ZUNvbG9yQ2hlY2spXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzQ2hlY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI2F2YWlsYWJsZVNxdWFyZXMucHVzaCh0aGlzLiNib2FyZEVsZW1lbnRzW2VuUGFzc2FudFhQb3NdW2VuUGFzc2FudFlQb3NdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50UGllY2UgPSBwYXduT2ZDdXJyZW50UGxheWVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI2JvYXJkUG9zaXRpb25bb3Bwb3NpdGVDb2xvclBhd25Qb3NYXVt0aGlzLiNsYXN0TW92ZS5waWVjZS55XSA9IHBhd25PZk5leHRQbGF5ZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jYm9hcmRQb3NpdGlvbltlblBhc3NhbnRYUG9zXVtlblBhc3NhbnRZUG9zXSA9IG51bGxcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50UGllY2UgaW5zdGFuY2VvZiBLaW5nICYmICFjdXJyZW50UGllY2UuaGFzTW92ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm9va1hQb3MgPSB0aGlzLiNwbGF5ZXJDb2xvciA9PT0gXCJ3aGl0ZVwiID8gMCA6IDdcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qga2luZ1hQb3MgPSBjdXJyZW50UGllY2UueFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBraW5nWVBvcyA9IGN1cnJlbnRQaWVjZS55XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjYW5LaW5nQ2FzdGxlID0gKHNtYWxsQ2FzdGxlOiBib29sZWFuKTogYm9vbGVhbiA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmUgbW96ZSBkYSBzZSBpenZyc2kgcm9rYWRhIGFrbyBzZSB0b3AgbmUgbmFsYXppIG5hIGluaWNpamFsbm9qIHBvemljaWppXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByb29rOiBSb29rID0gdGhpcy4jYm9hcmRQb3NpdGlvbltyb29rWFBvc11bc21hbGxDYXN0bGUgPyA3IDogMF0gYXMgUm9va1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCEocm9vayBpbnN0YW5jZW9mIFJvb2spKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNtYWxsQ2FzdGxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuI2JvYXJkUG9zaXRpb25ba2luZ1hQb3NdW2tpbmdZUG9zICsgMV0gIT09IG51bGwgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jYm9hcmRQb3NpdGlvbltraW5nWFBvc11ba2luZ1lQb3MgKyAyXSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy4jYm9hcmRQb3NpdGlvbltraW5nWFBvc11ba2luZ1lQb3MgLSAxXSAhPT0gbnVsbCB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNib2FyZFBvc2l0aW9uW2tpbmdYUG9zXVtraW5nWVBvcyAtIDJdICE9PSBudWxsIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuI2JvYXJkUG9zaXRpb25ba2luZ1hQb3NdW2tpbmdZUG9zIC0gM10gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGtvZCByb2thZGUgbW9yYW1vIGRhIHByb3ZlcmF2YW1vIGRhIHN1IHN2YSBwb2xqYSBrcm96IGtvamEgcHJvbGF6aSBrcmFsalxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmlzdSB1IHNhaHUsIHRha28gZGEgcHJvdmVyYXZhbW8gcG8gZHZhIHBvbGphIHNhIGxldmUgb2Rub3NubyBkZXNuZSBzdHJhbmUgb2Qga3JhbGphXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB1IHphdmlzbm9zdGkga29qdSByb2thZHUgdnJzaVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld2tpbmdZUG9zID0ga2luZ1lQb3MgKyAoc21hbGxDYXN0bGUgPyAxIDogLTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXdraW5nWVBvczEgPSBraW5nWVBvcyArIChzbWFsbENhc3RsZSA/IDIgOiAtMilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzS2luZ1NhZmUgPVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNTcXVhcmVTYWZlKGtpbmdYUG9zLCBraW5nWVBvcywga2luZ1hQb3MsIG5ld2tpbmdZUG9zKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNTcXVhcmVTYWZlKGtpbmdYUG9zLCBraW5nWVBvcywga2luZ1hQb3MsIG5ld2tpbmdZUG9zMSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNLaW5nU2FmZSAmJiAhcm9vay5oYXNNb3ZlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpc0NoZWNrOiBib29sZWFuID0gdGhpcy5pc0NoZWNrKHRydWUsIG9wcG9zaXRlQ29sb3JDaGVjaylcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNDaGVjaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJvdmVyYSBtYWxlIHJva2FkZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbktpbmdDYXN0bGUodHJ1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNhdmFpbGFibGVTcXVhcmVzLnB1c2godGhpcy4jYm9hcmRFbGVtZW50c1traW5nWFBvc11ba2luZ1lQb3MgKyAyXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHByb3ZlcmEgdmVsaWtlIHJvYWtkZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNhbktpbmdDYXN0bGUoZmFsc2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jYXZhaWxhYmxlU3F1YXJlcy5wdXNoKHRoaXMuI2JvYXJkRWxlbWVudHNba2luZ1hQb3NdW2tpbmdZUG9zIC0gMl0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4jYXZhaWxhYmxlU3F1YXJlcy5mb3JFYWNoKHNxID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Euc3R5bGUub3V0bGluZSA9IFwiNXB4IHNvbGlkIGJsdWVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zdCBkb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRvdC5jbGFzc0xpc3QuYWRkKFwiZG90XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNxLmFwcGVuZENoaWxkKGRvdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Euc3R5bGUuY3Vyc29yID0gXCJwb2ludGVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Euc3R5bGUucG9pbnRlckV2ZW50cyA9IFwiYXV0b1wiXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBvdmRlIHJlZ2lzdHJ1amVtbyBvbmFqIGRydWdpIGtsaWsgb2Rub3NubyB0YW1vIGdkZSBwb3NhdmxqYW1vIGZpZ3VydVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLiNjdXJyZW50U2VsZWN0ZWRTcXVhcmUgIT09IG51bGwpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gcHJvdmVyYXZhbW8gZGEgbGkgc2Uga2xpa251dG8gcG9samUgbmFsYXppIHUgbml6dSBkb3N0dXBuaWggcG9samFcclxuICAgICAgICAgICAgICAgICAgICAvLyBha28gc2UgbmFsYXppIG9uZGEgZmlndXJ1IHN0YXZsamFtbyBuYSB0byBtZXN0b1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLiNhdmFpbGFibGVTcXVhcmVzLnNvbWUoc3F1YXJlID0+IHNxdWFyZS5jb250YWlucyh0aGlzLiNib2FyZEVsZW1lbnRzW2N1cnJlbnRYXVtjdXJyZW50WV0pKSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcHJldlg6IG51bWJlciA9IHRoaXMuI2N1cnJlbnRTZWxlY3RlZFNxdWFyZS54XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHByZXZZOiBudW1iZXIgPSB0aGlzLiNjdXJyZW50U2VsZWN0ZWRTcXVhcmUueVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXR1amVtbyBkYSBzZSBwZcWhYWsgcG9tZXJpbyDFoXRvIHVraWRhIG1vZ3Vjbm9zdCBkYSBzZSB1IHNsZWRlY2VtIHBvdGV6dSBwb21lcmkgemEgZHZhIHBvbGphXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9kbm9zbm8gZGEgc3Ugc2Uga3JhbGogaSB0b3AgcG9tZXJpbGksIHBhIGplIG1vZ3Vjbm9zdCByb2thZGUgbmVtb2d1Y2FcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG92ZGUgbW96ZSBkYSBzZSBpenZyc2kgY2FzdCB1IFBpZWNlIG9kbWFoIGplciBzdSB1IHBpdGFuanUga29vcmRpbmF0ZSBwcmV2WCBpIHByZXZZIGEgbmEgbmppbWEgc2Ugc2lndXJubyBuYWxhemkgZmlndXJhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGplciBvdmRlIHJlZ2lzdHJ1amVtbyBkcnVnaSBrbGlrIHN0byB6bmFjaSBkYSBzbW8gdmVjIHNlbGVrdG92YWxpIGZpZ3VydVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBwaWVjZTogUGllY2UgPSAodGhpcy4jYm9hcmRQb3NpdGlvbltwcmV2WF1bcHJldlldKSBhcyBQaWVjZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdWtvbGlrbyBqZSBwb2xqZSBiaWxvIGNyZXZlbm8gdXNsZWQgc2FoYSB0cmViYSBnYSB2cmF0aXRpIGRhIG5lIGJ1ZGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gbW96ZGEgaW1hIG5la2kgbmFjaW4gZGEgdXBhbXRpbSBwb3ppY2lqdSBrcmFsamFcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcGEgZGUgbmUgaWRlbSB6YSBkemFiZSBrcm96IDY0IHBvbGphIGlha28gdG8gbmlqZSB6YWh0ZXZub1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNib2FyZEVsZW1lbnRzLmZvckVhY2gocm93ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdy5mb3JFYWNoKHNxdWFyZSA9PiBzcXVhcmUuc3R5bGUuYmFja2dyb3VuZENvbG9yID0gXCJcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwaWVjZSBpbnN0YW5jZW9mIFBhd24gfHwgcGllY2UgaW5zdGFuY2VvZiBSb29rIHx8IHBpZWNlIGluc3RhbmNlb2YgS2luZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGllY2UuaGFzTW92ZWQgPSB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVuUGFzc2FudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGllY2UgaW5zdGFuY2VvZiBQYXduICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmFicyhjdXJyZW50WCAtIHByZXZYKSA9PT0gMSAmJiBNYXRoLmFicyhjdXJyZW50WSAtIHByZXZZKSA9PT0gMSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jYm9hcmRQb3NpdGlvbltjdXJyZW50WF1bY3VycmVudFldID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHBvc2l0ZUNvbG9yUGF3blBvc1g6IG51bWJlciA9IGN1cnJlbnRYICsgKHRoaXMuI3BsYXllckNvbG9yID09PSBcIndoaXRlXCIgPyAtMSA6IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvcHBvc2l0ZUNvbG9yUGF3blBvc1k6IG51bWJlciA9IGN1cnJlbnRZO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICh0aGlzLiNib2FyZEVsZW1lbnRzW29wcG9zaXRlQ29sb3JQYXduUG9zWF1bb3Bwb3NpdGVDb2xvclBhd25Qb3NZXSBhcyBIVE1MVGFibGVDZWxsRWxlbWVudCkuaW5uZXJIVE1MID0gXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jYm9hcmRQb3NpdGlvbltvcHBvc2l0ZUNvbG9yUGF3blBvc1hdW29wcG9zaXRlQ29sb3JQYXduUG9zWV0gPSBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKGN1cnJlbnRYLCBjdXJyZW50WSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcm9ha2RhLCBqZXIga3JhbGogamVkaW5vIG1vemUgZGEgc2UgcG9tZXJpIGR2YSBwb2xqYSBwcmlsaWtvbSB2cnNlbmphIHJva2FkZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChwaWVjZSBpbnN0YW5jZW9mIEtpbmcgJiYgTWF0aC5hYnMoY3VycmVudFkgLSBwcmV2WSkgPT09IDIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBjdXJyZW50WSA9PT0gNiB6bmFjaSBkYSBqZSB1IHBpdGFuanUgbWFsYSByb2thZGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvb2tOZXdQb3NZID0gY3VycmVudFkgPT09IDYgPyBjdXJyZW50WSAtIDEgOiBjdXJyZW50WSArIDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvb2tQcmV2UG9zWSA9IGN1cnJlbnRZID09PSA2ID8gNyA6IDBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNib2FyZFBvc2l0aW9uW2N1cnJlbnRYXVtyb29rTmV3UG9zWV0gPSB0aGlzLiNib2FyZFBvc2l0aW9uW2N1cnJlbnRYXVtyb29rUHJldlBvc1ldXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNib2FyZEVsZW1lbnRzW2N1cnJlbnRYXVtyb29rTmV3UG9zWV0uYXBwZW5kQ2hpbGQodGhpcy4jYm9hcmRFbGVtZW50c1tjdXJyZW50WF1bcm9va1ByZXZQb3NZXS5jaGlsZE5vZGVzWzBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jYm9hcmRQb3NpdGlvbltjdXJyZW50WF1bcm9va05ld1Bvc1ldIS55ID0gcm9va05ld1Bvc1k7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodGhpcy4jYm9hcmRQb3NpdGlvbltjdXJyZW50WF1bcm9va05ld1Bvc1ldIGFzIFJvb2spLmhhc01vdmVkID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jYm9hcmRQb3NpdGlvbltjdXJyZW50WF1bcm9va1ByZXZQb3NZXSA9IG51bGxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKGN1cnJlbnRYLCBjdXJyZW50WSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocGllY2UgaW5zdGFuY2VvZiBQYXduICYmIChjdXJyZW50WCA9PT0gMCB8fCBjdXJyZW50WCA9PT0gNykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd1Bhd25Qcm9tb3Rpb25EaWFsb2coY3VycmVudFgsIGN1cnJlbnRZKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzdmUgb3N0YWxlIGtvbWJpbmFjaWplIHBvc3RhdmxqYW5qYSBmaWd1cmUgbmEgZHJ1Z28gcG9samVcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKGN1cnJlbnRYLCBjdXJyZW50WSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVQb3NpdGlvbiA9IChYOiBudW1iZXIsIFk6IG51bWJlciwgcHJvbW90ZWRQaWVjZTogSVByb21vdGVkUGllY2UgPSB7IGVsZW1lbnQ6IG51bGwsIGltZzogbnVsbCB9KTogdm9pZCA9PiB7XHJcbiAgICAgICAgLy8gcHJvbW90ZWRQaWVjZSBqZSB2acWhYSBmaWd1cmEgdSBrb2p1IHByb21vdmlzZW1vIHBlc2FrYVxyXG4gICAgICAgIC8vIGtvb3JkaW5hdGUgZmlndXJlIGtvanUgc21vIHByZXRob2RubyBrbGlrbnVsaSwgaSBrb29yZGluYXRlIG1lc3RhIGdkZSB6ZWxpbW8gZGEgamUgcG9zdGF2aW1vXHJcbiAgICAgICAgLy8gc2lndXJuaSBzbW8gZGEgbmlqZSBudWxsIGplciBqZSBudWxsIHNhbW8gaW5pY2lqYWxubyBpIHNpZ3Vybmkgc21vIGRhIGplIHUgcGl0YW5qdSBmaWd1cmFcclxuICAgICAgICBjb25zdCBwcmV2WDogbnVtYmVyID0gdGhpcy4jY3VycmVudFNlbGVjdGVkU3F1YXJlIS54XHJcbiAgICAgICAgY29uc3QgcHJldlk6IG51bWJlciA9IHRoaXMuI2N1cnJlbnRTZWxlY3RlZFNxdWFyZSEueVxyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRYOiBudW1iZXIgPSBYXHJcbiAgICAgICAgY29uc3QgY3VycmVudFk6IG51bWJlciA9IFlcclxuICAgICAgICB0aGlzLiNsYXN0TW92ZSA9IHsgcGllY2U6IHRoaXMuI2JvYXJkUG9zaXRpb25bcHJldlhdW3ByZXZZXSBhcyBQaWVjZSwgeFBvc2l0aW9uQ2hhbmdlZDogTWF0aC5hYnMocHJldlggLSBjdXJyZW50WCksIHlQb3NpdGlvbkNoYW5nZWQ6IE1hdGguYWJzKHByZXZZIC0gY3VycmVudFkpIH1cclxuXHJcblxyXG4gICAgICAgIC8vIGFrbyBqZSBpenZyc2VuYSBwcm9tb2NpamEgb25kYSBuYSBrb29yZGluYXRlIG9kIHBvbGphIG9kYWtsZSBkb2xhemkgcGVzYWsga29qaSB2cnNpIHByb21vY2lqdVxyXG4gICAgICAgIC8vIHBvc3RhdmxqYW1vIGRhIGplIHByYXpubywgamVyIHNtbyB6YXByYXZvIHViYWNpbGkgcG9wdHVubyBub3Z1IGZpZ3VydSAoc2xpa3UpIHVtZXN0byB0b2cgcGVzYWthXHJcbiAgICAgICAgaWYgKHByb21vdGVkUGllY2UuZWxlbWVudCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLiNib2FyZEVsZW1lbnRzW3ByZXZYXVtwcmV2WV0uaW5uZXJIVE1MID0gXCJcIlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdWtvbGlrbyB1emltYW1vIHByb3Rpdm5pY2t1IGZpZ3VydSBrb2phIHNlIG5hbGF6aSBuYSB0b2ogcG96aWNpamkgb25kYSBqZSBza2xhbmphbW9cclxuICAgICAgICBpZiAodGhpcy4jYm9hcmRFbGVtZW50c1tjdXJyZW50WF1bY3VycmVudFldLmNoaWxkTm9kZXMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgIHRoaXMuI2JvYXJkRWxlbWVudHNbY3VycmVudFhdW2N1cnJlbnRZXS5pbm5lckhUTUwgPSBcIlwiXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLiNib2FyZFBvc2l0aW9uW2N1cnJlbnRYXVtjdXJyZW50WV0gPSBwcm9tb3RlZFBpZWNlLmVsZW1lbnQgfHwgdGhpcy4jYm9hcmRQb3NpdGlvbltwcmV2WF1bcHJldlldXHJcbiAgICAgICAgdGhpcy4jYm9hcmRQb3NpdGlvbltwcmV2WF1bcHJldlldID0gbnVsbFxyXG5cclxuICAgICAgICAvLyB1cGRlanR1amVtbyBrb29yZGluYXRuZSB1a29saWtvIHNlIG5hIHBvbGp1IGtvamVtIHplbGltbyBkYSBwb3N0YXZpbW8gZmlndXJ1IG5hbGF6aSBwb3J0aXZuaWNrYSBmaWd1cmFcclxuICAgICAgICBjb25zdCBuZXh0UGllY2U6IGNoZXNzUGllY2UgPSB0aGlzLiNib2FyZFBvc2l0aW9uW2N1cnJlbnRYXVtjdXJyZW50WV1cclxuICAgICAgICBpZiAobmV4dFBpZWNlIGluc3RhbmNlb2YgUGllY2UpIHtcclxuICAgICAgICAgICAgbmV4dFBpZWNlLnggPSBjdXJyZW50WFxyXG4gICAgICAgICAgICBuZXh0UGllY2UueSA9IGN1cnJlbnRZXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBleHBsaWNpdG5vIHN0YXZsamFtIGRhIG9iamVrdGkgbmlzdSBudWxsIHByaWxpa28gcHJvbW92aXNhbmphIGZpZ3VyZSBqZXIgc3UgdGFkIHNpZ3Vybm8gZGVmaW5pc2FuaVxyXG4gICAgICAgIHRoaXMuI2JvYXJkRWxlbWVudHNbY3VycmVudFhdW2N1cnJlbnRZXS5hcHBlbmRDaGlsZChcclxuICAgICAgICAgICAgcHJvbW90ZWRQaWVjZS5lbGVtZW50ICE9PSBudWxsID9cclxuICAgICAgICAgICAgICAgIHByb21vdGVkUGllY2UuaW1nISA6IHRoaXMuI2N1cnJlbnRTZWxlY3RlZFNxdWFyZSEuc3F1YXJlLmNoaWxkTm9kZXNbMF1cclxuICAgICAgICApXHJcblxyXG4gICAgICAgIHRoaXMuI2N1cnJlbnRTZWxlY3RlZFNxdWFyZSEuc3F1YXJlLnN0eWxlLnBvaW50ZXJFdmVudHMgPSBcIm5vbmVcIlxyXG4gICAgICAgIHRoaXMuI2N1cnJlbnRTZWxlY3RlZFNxdWFyZSEuc3F1YXJlLnN0eWxlLmN1cnNvciA9IFwiYXJyb3dcIlxyXG4gICAgICAgIHRoaXMuI2N1cnJlbnRTZWxlY3RlZFNxdWFyZSEuc3F1YXJlLnN0eWxlLm91dGxpbmUgPSBcIlwiXHJcblxyXG4gICAgICAgIHRoaXMuI2N1cnJlbnRTZWxlY3RlZFNxdWFyZSA9IHRoaXMuI3ByZXZpb3VzU2VsZWN0ZWRTcXVhcmUgPSBudWxsXHJcbiAgICAgICAgdGhpcy5yZW1vdmVDdXJzb3JzRnJvbVVuYXZhaWxhYmxlU3F1YXJlcygpXHJcbiAgICAgICAgdGhpcy4jYXZhaWxhYmxlU3F1YXJlcyA9IFtdXHJcbiAgICAgICAgdGhpcy4jaXNXaGl0ZU1vdmUgPSAhdGhpcy4jaXNXaGl0ZU1vdmVcclxuICAgICAgICB0aGlzLmNoYW5nZVBsYXllcigpO1xyXG4gICAgICAgIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLndob0lzUGxheWluZ1wiKSBhcyBIVE1MRGl2RWxlbWVudCkuaW5uZXJUZXh0ID0gdGhpcy4jaXNXaGl0ZU1vdmUgPyBcIldoaXRlJ3MgbW92ZVwiIDogXCJCbGFjaydzIG1vdmVcIlxyXG5cclxuXHJcbiAgICAgICAgLy8gcHJvdmVyYSBkYSBsaSBqZSBuYXN0dXBpbyDFoWFoXHJcbiAgICAgICAgY29uc3QgaXNDaGVjazogYm9vbGVhbiA9IHRoaXMuaXNDaGVjayhmYWxzZSwgdGhpcy4jcGxheWVyQ29sb3IpXHJcbiAgICAgICAgdGhpcy4jcGxheWVyQ29sb3IgPSB0aGlzLiNpc1doaXRlTW92ZSA/IENvbG9yLldISVRFIDogQ29sb3IuQkxBQ0tcclxuICAgICAgICBjb25zdCBsaXN0T2ZBbGxBdmFpbGFibGVTcXVhcmVzOiBMaXN0T2ZBbGxBdmFpbGFibGVTcXVhcmVzID0gdGhpcy5maW5kQXZhaWxhYmxlU3F1YXJlcyh0aGlzLiNwbGF5ZXJDb2xvcilcclxuXHJcbiAgICAgICAgaWYgKCFPYmplY3Qua2V5cyhsaXN0T2ZBbGxBdmFpbGFibGVTcXVhcmVzKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgaWYgKGlzQ2hlY2spIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHdpbm5lcjogc3RyaW5nID0gKHRoaXMuI3BsYXllckNvbG9yID09PSBDb2xvci5XSElURSA/IENvbG9yLkJMQUNLIDogQ29sb3IuV0hJVEUpLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi53aG9Jc1BsYXlpbmdcIikgYXMgSFRNTERpdkVsZW1lbnQpLmlubmVyVGV4dCA9IHdpbm5lciArIFwiIHdpbiBieSBjaGVja21hdGVcIjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiLndob0lzUGxheWluZ1wiKSBhcyBIVE1MRGl2RWxlbWVudCkuaW5uZXJUZXh0ID0gXCJTdGFsZW1hdGVcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuI2JvYXJkRWxlbWVudHMuZm9yRWFjaChyb3cgPT4ge1xyXG4gICAgICAgICAgICAgICAgcm93LmZvckVhY2goc3F1YXJlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzcXVhcmUuc3R5bGUucG9pbnRlckV2ZW50cyA9IFwibm9uZVwiXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpc1NxdWFyZVNhZmUocHJldlg6IG51bWJlciwgcHJldlk6IG51bWJlciwgbmV3WDogbnVtYmVyLCBuZXdZOiBudW1iZXIpOiBib29sZWFuIHtcclxuICAgICAgICAvLyBwcm92ZXJhdmEgZGEgbGkgY2UgYml0aSB1IMWhYWh1IGFrbyBzZSBmaWd1cmEgc3RhdmkgbmEgdG8gbWVzdG9cclxuICAgICAgICBjb25zdCBvbGRQaWVjZTogUGllY2UgPSB0aGlzLiNib2FyZFBvc2l0aW9uW3ByZXZYXVtwcmV2WV0gYXMgUGllY2VcclxuICAgICAgICBjb25zdCBuZXdQaWVjZTogY2hlc3NQaWVjZSA9IHRoaXMuI2JvYXJkUG9zaXRpb25bbmV3WF1bbmV3WV1cclxuXHJcbiAgICAgICAgLy8gbmUgbW96ZXMgZGEgc3RhdmlzIGZpZ3VydSBuYSBtZXN0byBnZGUgc2UgbmFsYXppIGZpZ3VyYSBpc3RlIGJvamVcclxuICAgICAgICBpZiAobmV3UGllY2UgJiYgbmV3UGllY2UuY29sb3IgPT09IG9sZFBpZWNlLmNvbG9yKSByZXR1cm4gZmFsc2VcclxuXHJcbiAgICAgICAgLy8gYm9vbGVhbiBkYSBwcm92ZXJpIGRhIGxpIGplIHUgdG9qIHBvemljaWppIHNhaFxyXG4gICAgICAgIHRoaXMuI2JvYXJkUG9zaXRpb25bbmV3WF1bbmV3WV0gPSBvbGRQaWVjZVxyXG4gICAgICAgIHRoaXMuI2JvYXJkUG9zaXRpb25bcHJldlhdW3ByZXZZXSA9IG51bGxcclxuXHJcbiAgICAgICAgLy8gdnJzaW1vIHByb3ZlcnUgZGEgaWdyYWMgbmUgc21lIGRhIGJ1ZGUgdSBzYWh1IG5ha29uIHN2b2cgc2xlZGVjZWcgcG90ZXphLCB0aiBuZSBzbWUgZGEgb3RrcmlqZSBzYWhcclxuICAgICAgICBjb25zdCBvcHBvc2l0ZUNvbG9yUGxheWVyID0gdGhpcy4jcGxheWVyQ29sb3IgPT09IENvbG9yLldISVRFID8gQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURVxyXG4gICAgICAgIGNvbnN0IGlzQ2hlY2s6IGJvb2xlYW4gPSB0aGlzLmlzQ2hlY2sodHJ1ZSwgb3Bwb3NpdGVDb2xvclBsYXllcilcclxuICAgICAgICB0aGlzLiNib2FyZFBvc2l0aW9uW3ByZXZYXVtwcmV2WV0gPSBvbGRQaWVjZVxyXG4gICAgICAgIHRoaXMuI2JvYXJkUG9zaXRpb25bbmV3WF1bbmV3WV0gPSBuZXdQaWVjZVxyXG5cclxuICAgICAgICByZXR1cm4gIWlzQ2hlY2tcclxuICAgIH1cclxuXHJcbiAgICAvLyBkYWtsZSBvdmEgZnVua2lqYSBtaSB2cmHEh2Egbml6IHN2aWggZG9zdXBuaWggcG9samFcclxuICAgIGZpbmRBdmFpbGFibGVTcXVhcmVzKGNvbG9yVG9DaGVjazogQ29sb3IpOiBMaXN0T2ZBbGxBdmFpbGFibGVTcXVhcmVzIHtcclxuXHJcbiAgICAgICAgLy8gb2JqZWthdCBrb2ppIHphIGtsanVjIGltYSBrb29yZGluYXRlIGZpZ3VyZSBrb2plIG1vZ3UgZGEgb2RpZ3JhanUgcG90ZXosIGEgdnJlZG5vc3Qgc3UgcG9samEgbmEga29qYSBtb3plIGRhIHN0YW5lXHJcbiAgICAgICAgY29uc3QgbGlzdE9mQWxsQXZhaWxhYmxlU3F1YXJlczogTGlzdE9mQWxsQXZhaWxhYmxlU3F1YXJlcyA9IHt9XHJcblxyXG4gICAgICAgIGZvciAoY29uc3Qgcm93IG9mIHRoaXMuI2JvYXJkUG9zaXRpb24pIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBwaWVjZSBvZiByb3cpIHtcclxuICAgICAgICAgICAgICAgIGlmICghcGllY2UgfHwgcGllY2UuY29sb3IgIT09IGNvbG9yVG9DaGVjaykgY29udGludWVcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzYWZlU3F1YXJlczogSFRNTFRhYmxlQ2VsbEVsZW1lbnRbXSA9IFtdXHJcbiAgICAgICAgICAgICAgICBjb25zdCBYOiBudW1iZXIgPSBwaWVjZS54XHJcbiAgICAgICAgICAgICAgICBjb25zdCBZOiBudW1iZXIgPSBwaWVjZS55XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbZHgsIGR5XSBvZiBwaWVjZS5kaXJlY3Rpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5ld1g6IG51bWJlciA9IFggKyBkeFxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXdZOiBudW1iZXIgPSBZICsgZHlcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNTcXVhcmVWYWxpZChuZXdYLCBuZXdZKSkgY29udGludWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbmV4dFBpZWNlIGplIGZpZ3VyYSBrb2phIHNlIG5hbGF6aSBuYSBub3ZpbSBrb29yZGluYXRhbWFcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbmV4dFBpZWNlOiBjaGVzc1BpZWNlID0gdGhpcy4jYm9hcmRQb3NpdGlvbltuZXdYXVtuZXdZXVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyByZWd1bGnFoWVtbyBtb2d1xIdhIHNsb2JvZG5hIHBvbGphIHphIHBlxaFha2UsIG90xaF0byBzbW8gaW5pY2lqYWxubyBzdGF2aWxpIGRhIGltYSBzdmUgNCBvcGNpamUga3JldGFuamFcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGllY2UgaW5zdGFuY2VvZiBQYXduKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG9uZW1vZ3VjdWplbW8gZGEgc2UgcGVzYWsgcG9tZXJpIGR2ZSBwb3ppY2lqZSB1a29saWtvIHNlIGlzcHJlZCBuamVnYSBuYWxhemkgbmVrYSBmaWd1cmFcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGR4ID09PSAyIHx8IGR4ID09PSAtMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRQaWVjZSAhPT0gbnVsbCkgY29udGludWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLiNib2FyZFBvc2l0aW9uW25ld1ggKyAoZHggPT09IDIgPyAtMSA6IDEpXVtuZXdZXSAhPT0gbnVsbCkgY29udGludWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvbmVtb2d1Y3VqZW1vIGRhIHNlIGtyZWNlIGplZG5vIHBvbGplIHVuYXByZWQgdWtvbGlrbyBzZSBpc3ByZWQgbmFsYXppIGZpZ3VyYVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKGR4ID09PSAxIHx8IGR4ID09PSAtMSkgJiYgZHkgPT09IDAgJiYgbmV4dFBpZWNlICE9PSBudWxsKSBjb250aW51ZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gb25lbW9ndWN1amVtbyBkYSBqZWRlIHVrdXNvIHVrb2xpa28gc2UgaXNwcmVkIG5lIG5hbGF6aSBmaWd1cmFcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChkeCA9PT0gMSB8fCBkeCA9PT0gLTEpICYmIG5leHRQaWVjZSA9PT0gbnVsbCAmJiAoZHkgPT09IDEgfHwgZHkgPT09IC0xKSkgY29udGludWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwaWVjZSBpbnN0YW5jZW9mIFBhd24gfHwgcGllY2UgaW5zdGFuY2VvZiBLaW5nIHx8IHBpZWNlIGluc3RhbmNlb2YgS25pZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0UGllY2UgPT09IG51bGwgfHwgbmV4dFBpZWNlLmNvbG9yICE9PSB0aGlzLiNwbGF5ZXJDb2xvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNTcXVhcmVTYWZlKFgsIFksIG5ld1gsIG5ld1kpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FmZVNxdWFyZXMucHVzaCh0aGlzLiNib2FyZEVsZW1lbnRzW25ld1hdW25ld1ldKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5pc1NxdWFyZVZhbGlkKG5ld1gsIG5ld1kpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXh0UGllY2UgPSB0aGlzLiNib2FyZFBvc2l0aW9uW25ld1hdW25ld1ldXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobmV4dFBpZWNlID09PSBudWxsIHx8IG5leHRQaWVjZS5jb2xvciAhPT0gdGhpcy4jcGxheWVyQ29sb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1NxdWFyZVNhZmUoWCwgWSwgbmV3WCwgbmV3WSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FmZVNxdWFyZXMucHVzaCh0aGlzLiNib2FyZEVsZW1lbnRzW25ld1hdW25ld1ldKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBibG9raXJhbW8gdHJhemVuamUgcG8gcHV0YW5qaSBpc3ByZWQga29qZSBzZSBuYWxhemkgZmlndXJhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRQaWVjZSAhPT0gbnVsbCkgYnJlYWtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdYICs9IGR4XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3WSArPSBkeVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzYWZlU3F1YXJlcy5sZW5ndGggIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdE9mQWxsQXZhaWxhYmxlU3F1YXJlc1tYLnRvU3RyaW5nKCkgKyBcIixcIiArIFkudG9TdHJpbmcoKV0gPSBzYWZlU3F1YXJlc1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbGlzdE9mQWxsQXZhaWxhYmxlU3F1YXJlc1xyXG4gICAgfVxyXG5cclxuICAgIGlzQ2hlY2soY2hlY2tpbmdOZXh0UG9zaXRpb246IGJvb2xlYW4gPSBmYWxzZSwgY29sb3JUb0NoZWNrOiBDb2xvcik6IGJvb2xlYW4ge1xyXG5cclxuICAgICAgICAvLyBjaGVja2luZ05leHRQb3NpdGlvbiBuYW0gc2x1emkgc2FtbyBkYSBuZSBtYXJraXJhbW8gcG9samUga29qZSBqZSBjcnZlbm8gdWtvbGlrbyBqZSBwb3ppY2lqYSBrb2p1IHByb3ZlcmF2YW1vXHJcbiAgICAgICAgLy8gdGVzdCBwb3ppY2lqYSBkYSBiaSB1dHZyaWRsaSBkYSBzZSBuZSBva3RyaWN2YSBzYWggdGkgcG90ZXpvbSBpIGRhIGplIHRvIHBvbGplIHphcHJhdm8gc2xvYm9kbm9cclxuICAgICAgICBmb3IgKGNvbnN0IHJvdyBvZiB0aGlzLiNib2FyZFBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgcGllY2Ugb2Ygcm93KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXBpZWNlIHx8IHBpZWNlLmNvbG9yICE9PSBjb2xvclRvQ2hlY2spIGNvbnRpbnVlXHJcblxyXG4gICAgICAgICAgICAgICAgLy8gcGVzYWssIGtyYWxqIGkgc2tha2FjIG5lIG1vZ3UgZGEgcHJlZGp1IHZpc2UgcG90ZXphIHVuYXByZWQgbmVnbyBzdG8gaW0gamUgZGVmaW5pc2FubyB1IGtvb3JkaW5hdGFtYVxyXG4gICAgICAgICAgICAgICAgLy8gYSB6YSBvc3RhbGUgc3UgZGF0aSBzYW1vIHByYXZjaSBwYSBcclxuICAgICAgICAgICAgICAgIGlmIChwaWVjZSBpbnN0YW5jZW9mIFBhd24gfHwgcGllY2UgaW5zdGFuY2VvZiBLaW5nIHx8IHBpZWNlIGluc3RhbmNlb2YgS25pZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBbZHgsIGR5XSBvZiBwaWVjZS5kaXJlY3Rpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld1ggPSBwaWVjZS54ICsgZHhcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3WSA9IHBpZWNlLnkgKyBkeVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBpZWNlIGluc3RhbmNlb2YgUGF3biAmJiBkeSA9PT0gMCkgY29udGludWUgLy8gemF0byBzdG8gcGVzYWsgbmUgbmFwYWRhIHVwcmF2bm8gdmVjIHVrb3NvXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNTcXVhcmVWYWxpZChuZXdYLCBuZXdZKSkgY29udGludWVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHRQaWVjZTogY2hlc3NQaWVjZSA9IHRoaXMuI2JvYXJkUG9zaXRpb25bbmV3WF1bbmV3WV1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0UGllY2UgaW5zdGFuY2VvZiBLaW5nICYmIHBpZWNlLmNvbG9yICE9PSBuZXh0UGllY2UuY29sb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2hlY2tpbmdOZXh0UG9zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiNib2FyZEVsZW1lbnRzW25ld1hdW25ld1ldLnN0eWxlLmJhY2tncm91bmRDb2xvciA9IFwicmVkXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtkeCwgZHldIG9mIHBpZWNlLmRpcmVjdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5ld1g6IG51bWJlciA9IHBpZWNlLnggKyBkeFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbmV3WTogbnVtYmVyID0gcGllY2UueSArIGR5XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5pc1NxdWFyZVZhbGlkKG5ld1gsIG5ld1kpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0UGllY2U6IGNoZXNzUGllY2UgPSB0aGlzLiNib2FyZFBvc2l0aW9uW25ld1hdW25ld1ldXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5leHRQaWVjZSBpbnN0YW5jZW9mIEtpbmcgJiYgcGllY2UuY29sb3IgIT09IG5leHRQaWVjZS5jb2xvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghY2hlY2tpbmdOZXh0UG9zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4jYm9hcmRFbGVtZW50c1tuZXdYXVtuZXdZXS5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IgPSBcInJlZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBha28gc2UgbmEgcHV0dSBmaWd1cmUgbmFkamUgcG9samUga29qZSBuaWplIHByYXpubyB6bmFjaSBkYSBuZSBtb3plbW8gZGEgaWRlbW8gdG9tIHB1dGFuam9tXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpIHNpZ3Vybm8gbmlqZSBzYWhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHRoaXMuI2JvYXJkUG9zaXRpb25bbmV3WF1bbmV3WV0gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3WCArPSBkeFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1kgKz0gZHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgIH1cclxuXHJcbiAgICBzaG93UGF3blByb21vdGlvbkRpYWxvZyhjdXJyZW50WDogbnVtYmVyLCBjdXJyZW50WTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgICAgY29uc3QgcGllY2VJbWFnZXM6IHN0cmluZ1tdID0gW1wiYmlzaG9wXCIsIFwia25pZ2h0XCIsIFwicm9va1wiLCBcInF1ZWVuXCJdXHJcbiAgICAgICAgY29uc3QgcGF3blByb21vaXRpb25Qb3BVcCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikgYXMgSFRNTERpdkVsZW1lbnRcclxuICAgICAgICBwYXduUHJvbW9pdGlvblBvcFVwLmNsYXNzTGlzdC5hZGQoXCJwYXduLXByb21vdGlvbi1wb3B1cFwiKVxyXG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQocGF3blByb21vaXRpb25Qb3BVcClcclxuXHJcbiAgICAgICAgY29uc3QgYnRuQ2xvc2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpIGFzIEhUTUxEaXZFbGVtZW50XHJcbiAgICAgICAgYnRuQ2xvc2UuY2xhc3NMaXN0LmFkZChcImJ0bi1jbG9zZVwiKVxyXG4gICAgICAgIHBhd25Qcm9tb2l0aW9uUG9wVXAuYXBwZW5kQ2hpbGQoYnRuQ2xvc2UpXHJcblxyXG4gICAgICAgIGNvbnN0IGNsb3NlUGF3blByb21vdGlvbkRpYWxvZyQ6IE9ic2VydmFibGU8RXZlbnQ+ID0gZnJvbUV2ZW50KGJ0bkNsb3NlLCBcImNsaWNrXCIpXHJcblxyXG4gICAgICAgIGNsb3NlUGF3blByb21vdGlvbkRpYWxvZyQucGlwZShcclxuICAgICAgICAgICAgdGFwKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHBhd25Qcm9tb2l0aW9uUG9wVXAuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKS5zdWJzY3JpYmUoKVxyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IHBpZWNlSW1hZ2Ugb2YgcGllY2VJbWFnZXMpIHtcclxuICAgICAgICAgICAgY29uc3QgZmlndXJlT3B0aW9uID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSBhcyBIVE1MRGl2RWxlbWVudFxyXG4gICAgICAgICAgICBmaWd1cmVPcHRpb24uY2xhc3NMaXN0LmFkZChcImZpZ3VyZS1vcHRpb25cIilcclxuICAgICAgICAgICAgY29uc3QgZmlndXJlSW1hZ2UgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpIGFzIEhUTUxJbWFnZUVsZW1lbnRcclxuICAgICAgICAgICAgZmlndXJlSW1hZ2Uuc3JjID0gYHNyYy9hc3NldHMvJHt0aGlzLiNwbGF5ZXJDb2xvcn0gJHtwaWVjZUltYWdlfS5wbmdgXHJcbiAgICAgICAgICAgIGZpZ3VyZUltYWdlLmFsdCA9IHRoaXMuI3BsYXllckNvbG9yICsgXCIgXCIgKyBwaWVjZUltYWdlXHJcblxyXG4gICAgICAgICAgICBmcm9tRXZlbnQoZmlndXJlSW1hZ2UsIFwiY2xpY2tcIikucGlwZShcclxuICAgICAgICAgICAgICAgIHRhcCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5ld1BpZWNlOiBQaWVjZVxyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAocGllY2VJbWFnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFBpZWNlVHlwZS5RVUVFTjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1BpZWNlID0gbmV3IFF1ZWVuKHRoaXMuI3BsYXllckNvbG9yLCBjdXJyZW50WCwgY3VycmVudFkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFBpZWNlVHlwZS5ST09LOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3UGllY2UgPSBuZXcgUm9vayh0aGlzLiNwbGF5ZXJDb2xvciwgY3VycmVudFgsIGN1cnJlbnRZKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBQaWVjZVR5cGUuQklTSE9QOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3UGllY2UgPSBuZXcgQmlzaG9wKHRoaXMuI3BsYXllckNvbG9yLCBjdXJyZW50WCwgY3VycmVudFkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFBpZWNlVHlwZS5LTklHSFQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdQaWVjZSA9IG5ldyBLbmlnaHQodGhpcy4jcGxheWVyQ29sb3IsIGN1cnJlbnRYLCBjdXJyZW50WSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbW9yYW1vIGRhIG9uZW1vZ3VjaW1vIGtsaWsgbmEgZmlndXJ1IGtvamEgc2UgcHJvbW92aXNhbGFcclxuICAgICAgICAgICAgICAgICAgICBmaWd1cmVJbWFnZS5zdHlsZS5wb2ludGVyRXZlbnRzID0gXCJub25lXCJcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwcm9tb3RlZFBpZWNlOiBJUHJvbW90ZWRQaWVjZSA9IHsgZWxlbWVudDogbmV3UGllY2UsIGltZzogZmlndXJlSW1hZ2UgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUG9zaXRpb24oY3VycmVudFgsIGN1cnJlbnRZLCBwcm9tb3RlZFBpZWNlKVxyXG4gICAgICAgICAgICAgICAgICAgIHBhd25Qcm9tb2l0aW9uUG9wVXAuc3R5bGUuZGlzcGxheSA9IFwibm9uZVwiXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApLnN1YnNjcmliZSgpXHJcblxyXG4gICAgICAgICAgICBmaWd1cmVPcHRpb24uYXBwZW5kQ2hpbGQoZmlndXJlSW1hZ2UpXHJcbiAgICAgICAgICAgIHBhd25Qcm9tb2l0aW9uUG9wVXAuYXBwZW5kQ2hpbGQoZmlndXJlT3B0aW9uKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuXHJcbiJdLCJuYW1lcyI6WyJleHRlbmRTdGF0aWNzIiwiZCIsImIiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIkFycmF5IiwicCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl9fZXh0ZW5kcyIsIlR5cGVFcnJvciIsIlN0cmluZyIsIl9fIiwidGhpcyIsImNvbnN0cnVjdG9yIiwiY3JlYXRlIiwiX19nZW5lcmF0b3IiLCJ0aGlzQXJnIiwiYm9keSIsImYiLCJ5IiwidCIsImciLCJfIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsIm5leHQiLCJ2ZXJiIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJuIiwidiIsIm9wIiwiZG9uZSIsInZhbHVlIiwicG9wIiwibGVuZ3RoIiwicHVzaCIsImUiLCJzdGVwIiwiX192YWx1ZXMiLCJvIiwicyIsIm0iLCJpIiwiX19yZWFkIiwiciIsImFyIiwiZXJyb3IiLCJfX3NwcmVhZEFycmF5IiwidG8iLCJmcm9tIiwicGFjayIsImFyZ3VtZW50cyIsImwiLCJzbGljZSIsImNvbmNhdCIsIl9fYXdhaXQiLCJTdXBwcmVzc2VkRXJyb3IiLCJpc0FycmF5TGlrZSIsIngiLCJpc0Z1bmN0aW9uIiwiY3JlYXRlRXJyb3JDbGFzcyIsImNyZWF0ZUltcGwiLCJjdG9yRnVuYyIsImluc3RhbmNlIiwiRXJyb3IiLCJzdGFjayIsIlVuc3Vic2NyaXB0aW9uRXJyb3IiLCJfc3VwZXIiLCJlcnJvcnMiLCJtZXNzYWdlIiwibWFwIiwiZXJyIiwidG9TdHJpbmciLCJqb2luIiwibmFtZSIsImFyclJlbW92ZSIsImFyciIsIml0ZW0iLCJpbmRleCIsImluZGV4T2YiLCJzcGxpY2UiLCJTdWJzY3JpcHRpb24iLCJpbml0aWFsVGVhcmRvd24iLCJjbG9zZWQiLCJfcGFyZW50YWdlIiwiX2ZpbmFsaXplcnMiLCJlbXB0eSIsInVuc3Vic2NyaWJlIiwiZV8xIiwiX2EiLCJlXzIiLCJfYiIsImlzQXJyYXkiLCJfcGFyZW50YWdlXzEiLCJfcGFyZW50YWdlXzFfMSIsInJlbW92ZSIsImVfMV8xIiwicmV0dXJuIiwiaW5pdGlhbEZpbmFsaXplciIsIl9maW5hbGl6ZXJzXzEiLCJfZmluYWxpemVyc18xXzEiLCJmaW5hbGl6ZXIiLCJleGVjRmluYWxpemVyIiwiZV8yXzEiLCJhZGQiLCJ0ZWFyZG93biIsIl9oYXNQYXJlbnQiLCJfYWRkUGFyZW50IiwicGFyZW50IiwiaW5jbHVkZXMiLCJfcmVtb3ZlUGFyZW50IiwiRU1QVFkiLCJFTVBUWV9TVUJTQ1JJUFRJT04iLCJpc1N1YnNjcmlwdGlvbiIsImNvbmZpZyIsIm9uVW5oYW5kbGVkRXJyb3IiLCJvblN0b3BwZWROb3RpZmljYXRpb24iLCJQcm9taXNlIiwidW5kZWZpbmVkIiwidXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZyIsInVzZURlcHJlY2F0ZWROZXh0Q29udGV4dCIsInRpbWVvdXRQcm92aWRlciIsInNldFRpbWVvdXQiLCJoYW5kbGVyIiwidGltZW91dCIsImFyZ3MiLCJfaSIsImRlbGVnYXRlIiwiYXBwbHkiLCJjbGVhclRpbWVvdXQiLCJoYW5kbGUiLCJyZXBvcnRVbmhhbmRsZWRFcnJvciIsIm5vb3AiLCJDT01QTEVURV9OT1RJRklDQVRJT04iLCJjcmVhdGVOb3RpZmljYXRpb24iLCJraW5kIiwiY29udGV4dCIsImVycm9yQ29udGV4dCIsImNiIiwiaXNSb290IiwiZXJyb3JUaHJvd24iLCJTdWJzY3JpYmVyIiwiZGVzdGluYXRpb24iLCJfdGhpcyIsImlzU3RvcHBlZCIsIkVNUFRZX09CU0VSVkVSIiwiY29tcGxldGUiLCJTYWZlU3Vic2NyaWJlciIsImhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24iLCJuZXh0Tm90aWZpY2F0aW9uIiwiX25leHQiLCJfZXJyb3IiLCJfY29tcGxldGUiLCJfYmluZCIsIkZ1bmN0aW9uIiwiYmluZCIsImZuIiwiQ29uc3VtZXJPYnNlcnZlciIsInBhcnRpYWxPYnNlcnZlciIsImhhbmRsZVVuaGFuZGxlZEVycm9yIiwib2JzZXJ2ZXJPck5leHQiLCJjb250ZXh0XzEiLCJub3RpZmljYXRpb24iLCJzdWJzY3JpYmVyIiwib2JzZXJ2YWJsZSIsImlkZW50aXR5IiwiT2JzZXJ2YWJsZSIsInN1YnNjcmliZSIsIl9zdWJzY3JpYmUiLCJsaWZ0Iiwib3BlcmF0b3IiLCJzb3VyY2UiLCJpc09ic2VydmVyIiwiX3RyeVN1YnNjcmliZSIsInNpbmsiLCJmb3JFYWNoIiwicHJvbWlzZUN0b3IiLCJnZXRQcm9taXNlQ3RvciIsInJlc29sdmUiLCJyZWplY3QiLCJwaXBlIiwib3BlcmF0aW9ucyIsImZucyIsImlucHV0IiwicmVkdWNlIiwicHJldiIsInRvUHJvbWlzZSIsImlubmVyRnJvbSIsImlzSW50ZXJvcE9ic2VydmFibGUiLCJvYmoiLCJvYnMiLCJhcnJheSIsInRoZW4iLCJwcm9taXNlIiwiYXN5bmNJdGVyYXRvciIsImlzQXN5bmNJdGVyYWJsZSIsImZyb21Bc3luY0l0ZXJhYmxlIiwiaXNJdGVyYWJsZSIsIml0ZXJhYmxlIiwiaXRlcmFibGVfMSIsIml0ZXJhYmxlXzFfMSIsImdldFJlYWRlciIsImlzUmVhZGFibGVTdHJlYW1MaWtlIiwicmVhZGFibGVTdHJlYW0iLCJfYXJndW1lbnRzIiwiZ2VuZXJhdG9yIiwicSIsImEiLCJyZXN1bWUiLCJmdWxmaWxsIiwic2V0dGxlIiwic2hpZnQiLCJfX2FzeW5jR2VuZXJhdG9yIiwicmVhZGVyIiwicmVhZCIsInJlbGVhc2VMb2NrIiwicmVhZGFibGVTdHJlYW1MaWtlVG9Bc3luY0dlbmVyYXRvciIsImNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yIiwiYXN5bmNJdGVyYWJsZSIsImFzeW5jSXRlcmFibGVfMSIsImFzeW5jSXRlcmFibGVfMV8xIiwiUCIsIl9fYXN5bmNWYWx1ZXMiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInJlc3VsdCIsInByb2Nlc3MiLCJjYXRjaCIsIm9wZXJhdGUiLCJpbml0IiwiaGFzTGlmdCIsImxpZnRlZFNvdXJjZSIsImNyZWF0ZU9wZXJhdG9yU3Vic2NyaWJlciIsIm9uTmV4dCIsIm9uQ29tcGxldGUiLCJvbkVycm9yIiwib25GaW5hbGl6ZSIsIk9wZXJhdG9yU3Vic2NyaWJlciIsInNob3VsZFVuc3Vic2NyaWJlIiwiY2xvc2VkXzEiLCJwcm9qZWN0IiwibWVyZ2VNYXAiLCJyZXN1bHRTZWxlY3RvciIsImNvbmN1cnJlbnQiLCJJbmZpbml0eSIsImlpIiwib25CZWZvcmVOZXh0IiwiZXhwYW5kIiwiaW5uZXJTdWJTY2hlZHVsZXIiLCJhZGRpdGlvbmFsRmluYWxpemVyIiwiYnVmZmVyIiwiYWN0aXZlIiwiaXNDb21wbGV0ZSIsImNoZWNrQ29tcGxldGUiLCJvdXRlck5leHQiLCJkb0lubmVyU3ViIiwiaW5uZXJDb21wbGV0ZSIsImlubmVyVmFsdWUiLCJfbG9vcF8xIiwiYnVmZmVyZWRWYWx1ZSIsIm1lcmdlSW50ZXJuYWxzIiwiQ29sb3IiLCJub2RlRXZlbnRFbWl0dGVyTWV0aG9kcyIsImV2ZW50VGFyZ2V0TWV0aG9kcyIsImpxdWVyeU1ldGhvZHMiLCJmcm9tRXZlbnQiLCJ0YXJnZXQiLCJldmVudE5hbWUiLCJvcHRpb25zIiwiY2FsbE9yQXBwbHkiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImlzRXZlbnRUYXJnZXQiLCJtZXRob2ROYW1lIiwiYWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImlzTm9kZVN0eWxlRXZlbnRFbWl0dGVyIiwidG9Db21tb25IYW5kbGVyUmVnaXN0cnkiLCJvbiIsIm9mZiIsImlzSlF1ZXJ5U3R5bGVFdmVudEVtaXR0ZXIiLCJzdWJUYXJnZXQiLCJ0YXAiLCJ0YXBPYnNlcnZlciIsImlzVW5zdWIiLCJmaW5hbGl6ZSIsIlBpZWNlIiwiY29sb3IiLCJwaWVjZVR5cGUiLCJpbWFnZVVSTCIsInNldERpcmVjdGlvbnMiLCJkaXJlY3Rpb25zIiwiUGllY2VUeXBlIiwic3VwZXIiLCJQQVdOIiwiQkxBQ0siLCJkaXJlY3Rpb24iLCJoYXNNb3ZlZCIsImJsYWNrUGF3bkRpcmVjdGlvbnMiLCJwYXduRGlyZWN0aW9ucyIsIkJJU0hPUCIsIktOSUdIVCIsIlJPT0siLCJRVUVFTiIsIktJTkciLCJPYmplY3RVbnN1YnNjcmliZWRFcnJvciIsIlN1YmplY3QiLCJjdXJyZW50T2JzZXJ2ZXJzIiwib2JzZXJ2ZXJzIiwiaGFzRXJyb3IiLCJ0aHJvd25FcnJvciIsInN1YmplY3QiLCJBbm9ueW1vdXNTdWJqZWN0IiwiX3Rocm93SWZDbG9zZWQiLCJfYyIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIl9jaGVja0ZpbmFsaXplZFN0YXR1c2VzIiwiX2lubmVyU3Vic2NyaWJlIiwiYXNPYnNlcnZhYmxlIiwiQmVoYXZpb3JTdWJqZWN0IiwiX3ZhbHVlIiwiZ2V0VmFsdWUiLCJzdWJzY3JpcHRpb24iLCJmaWxsIiwiV0hJVEUiLCJ1cGRhdGVQb3NpdGlvbiIsIlgiLCJZIiwicHJvbW90ZWRQaWVjZSIsImVsZW1lbnQiLCJpbWciLCJwcmV2WCIsInByZXZZIiwiY3VycmVudFgiLCJjdXJyZW50WSIsInBpZWNlIiwieFBvc2l0aW9uQ2hhbmdlZCIsIk1hdGgiLCJhYnMiLCJ5UG9zaXRpb25DaGFuZ2VkIiwiaW5uZXJIVE1MIiwiY2hpbGROb2RlcyIsIm5leHRQaWVjZSIsImFwcGVuZENoaWxkIiwic3F1YXJlIiwic3R5bGUiLCJwb2ludGVyRXZlbnRzIiwiY3Vyc29yIiwib3V0bGluZSIsInJlbW92ZUN1cnNvcnNGcm9tVW5hdmFpbGFibGVTcXVhcmVzIiwiY2hhbmdlUGxheWVyIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiaW5uZXJUZXh0IiwiaXNDaGVjayIsImxpc3RPZkFsbEF2YWlsYWJsZVNxdWFyZXMiLCJmaW5kQXZhaWxhYmxlU3F1YXJlcyIsImtleXMiLCJ3aW5uZXIiLCJ0b1VwcGVyQ2FzZSIsInJvdyIsImNyZWF0ZUNoZXNzQm9hcmQiLCJzdGFydEdhbWUiLCJjaGVzc1RhYmxlIiwiY3JlYXRlRWxlbWVudCIsImNsYXNzTGlzdCIsImoiLCJzZXRBdHRyaWJ1dGUiLCJjdXJyZW50UGllY2UiLCJzcmMiLCJhbHQiLCJ0b0xvd2VyQ2FzZSIsIndob0lzUGxheWluZyIsImlzU3F1YXJlVmFsaWQiLCJvcHBvc2l0ZVBsYXllckNvbG9yIiwicGllY2VDb2xvclNhbWVBc09wcG9zaXRlUGxheWVyIiwibW92ZSIsIk51bWJlciIsImdldEF0dHJpYnV0ZSIsImNvbnNvbGUiLCJsb2ciLCJvcHBvc2l0ZUNvbG9yQ2hlY2siLCJvcHBvc2l0ZUNvbG9yUGF3blBvc1giLCJvcHBvc2l0ZUNvbG9yUGF3blBvc1kiLCJlblBhc3NhbnRYUG9zIiwiZW5QYXNzYW50WVBvcyIsInBhd25PZkN1cnJlbnRQbGF5ZXIiLCJwYXduT2ZOZXh0UGxheWVyIiwicm9va1hQb3MiLCJraW5nWFBvcyIsImtpbmdZUG9zIiwiY2FuS2luZ0Nhc3RsZSIsInNtYWxsQ2FzdGxlIiwicm9vayIsIm5ld2tpbmdZUG9zIiwibmV3a2luZ1lQb3MxIiwiaXNTcXVhcmVTYWZlIiwic3EiLCJzb21lIiwiY29udGFpbnMiLCJiYWNrZ3JvdW5kQ29sb3IiLCJyb29rTmV3UG9zWSIsInJvb2tQcmV2UG9zWSIsInNob3dQYXduUHJvbW90aW9uRGlhbG9nIiwibmV3WCIsIm5ld1kiLCJvbGRQaWVjZSIsIm5ld1BpZWNlIiwib3Bwb3NpdGVDb2xvclBsYXllciIsImNvbG9yVG9DaGVjayIsInNhZmVTcXVhcmVzIiwiZHgiLCJkeSIsImNoZWNraW5nTmV4dFBvc2l0aW9uIiwicGllY2VJbWFnZXMiLCJwYXduUHJvbW9pdGlvblBvcFVwIiwiYnRuQ2xvc2UiLCJkaXNwbGF5IiwicGllY2VJbWFnZSIsImZpZ3VyZU9wdGlvbiIsImZpZ3VyZUltYWdlIiwiZXZlbnQiLCJwcmV2ZW50RGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=